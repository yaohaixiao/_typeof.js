{"version":3,"file":"types.core.min.js","sources":["enum/types.js","enum/objects.js","_type.js","isNumber.js","isInteger.js","isFloat.js","isInfinite.js","_getExactTypeOfNumber.js","isString.js","isBlank.js","isBase64.js","isEmail.js","isEmpty.js","isGuid.js","isIPAddress.js","enum/tags.js","isHTML.js","trim.js","_isTime.js","_isDate.js","_getExactTypeOfString.js","isChinese.js","isHex.js","isJSON.js","isTime.js","isFunction.js","isUndefined.js","isObject.js","isVNode.js","hasOwn.js","_getExactTypeOfObject.js","isXML.js","isPrototype.js","isPlainObject.js","isObjectLike.js","lang/index.js","is.js","isValue.js","isBigInt.js","isBoolean.js","isNull.js","isSymbol.js","isSet.js","isMap.js","isArray.js","isArrayLike.js","isConstructor.js","isNativeFunction.js","isHash.js","isBuffer.js","isDate.js","isElement.js","isPromise.js","isNumeric.js","isURL.js","isPhoneNumber.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\r\nconst TYPES = {\r\n  /* ===== Primitive data types ===== */\r\n  BIG_INT: 'bigint',\r\n  BOOLEAN: 'boolean',\r\n  NULL: 'null',\r\n  NUMBER: 'number',\r\n  UNDEFINED: 'undefined',\r\n  STRING: 'string',\r\n  SYMBOL: 'symbol',\r\n  /* ===== Keyed Collections ===== */\r\n  SET: 'set',\r\n  WEAK_SET: 'weakset',\r\n  MAP: 'map',\r\n  WEAK_MAP: 'weakmap',\r\n  /* ===== Array ===== */\r\n  ARRAY: 'array',\r\n  ARGUMENTS: 'arguments',\r\n  /* ===== Typed Arrays ===== */\r\n  DATA_VIEW: 'dataview',\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  INT8_ARRAY: 'int8array',\r\n  UNIT8_ARRAY: 'uint8array',\r\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\r\n  INT16_ARRAY: 'int16array',\r\n  UNIT16_ARRAY: 'uint16array',\r\n  INT32_ARRAY: 'int32array',\r\n  UNIT32_ARRAY: 'uint32array',\r\n  FLOAT32_ARRAY: 'float32array',\r\n  FLOAT64_ARRAY: 'float64array',\r\n  BIG_INT64_ARRAY: 'bigint64array',\r\n  BIG_UINT64_ARRAY: 'biguint64array',\r\n  /* ===== Object ===== */\r\n  OBJECT: 'object',\r\n  COLLECTION: 'collection',\r\n  DATE: 'date',\r\n  ELEMENT: 'element',\r\n  ERROR: 'error',\r\n  FRAGMENT: 'fragment',\r\n  FUNCTION: 'function',\r\n  PROMISE: 'promise',\r\n  REGEXP: 'regexp',\r\n  TEXT: 'text'\r\n}\r\n\r\nexport default TYPES\r\n","import TYPES from './types'\r\n\r\n// Object.prototype.toString() 输出的类型名称枚举值\r\nconst OBJECTS = {\r\n  /* ===== Primitive data types ===== */\r\n  '[object Null]': TYPES.NULL,\r\n  /* ===== Keyed Collections ===== */\r\n  '[object Set]': TYPES.SET,\r\n  '[object WeakSet]': TYPES.WEAK_SET,\r\n  '[object Map]': TYPES.MAP,\r\n  '[object WeakMap]': TYPES.WEAK_MAP,\r\n  /* ===== Array ===== */\r\n  '[object Array]': TYPES.ARRAY,\r\n  '[object Arguments]': TYPES.ARGUMENTS,\r\n  /* ===== Typed Arrays ===== */\r\n  '[object DataView]': TYPES.DATA_VIEW,\r\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\r\n  '[object Int8Array]': TYPES.INT8_ARRAY,\r\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\r\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\r\n  '[object Int16Array]': TYPES.INT16_ARRAY,\r\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\r\n  '[object Int32Array]': TYPES.INT32_ARRAY,\r\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\r\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\r\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\r\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\r\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\r\n  /* ===== Object ===== */\r\n  '[object Object]': TYPES.OBJECT,\r\n  '[object Boolean]': TYPES.OBJECT,\r\n  '[object String]': TYPES.OBJECT,\r\n  '[object Number]': TYPES.OBJECT,\r\n  '[object Date]': TYPES.DATE,\r\n  '[object Error]': TYPES.ERROR,\r\n  '[object DocumentFragment]': TYPES.FRAGMENT,\r\n  '[object Function]': TYPES.FUNCTION,\r\n  '[object NodeList]': TYPES.COLLECTION,\r\n  '[object Promise]': TYPES.PROMISE,\r\n  '[object RegExp]': TYPES.REGEXP,\r\n  '[object Text]': TYPES.TEXT\r\n}\r\n\r\nexport default OBJECTS\r\n","import TYPES from './enum/types'\r\nimport OBJECTS from './enum/objects'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String}\r\n */\r\nconst _type = (val) => {\r\n  const type = Object.prototype.toString.apply(val)\r\n  const _typeof = typeof val\r\n  let name\r\n\r\n  // HTMLElement\r\n  if (val?.tagName && val.nodeType === 1) {\r\n    name = TYPES.ELEMENT\r\n  } else {\r\n    /* ===== 原始值类型（Primitive data types） ===== */\r\n    switch (_typeof) {\r\n      case 'bigint':\r\n        name = TYPES.BIG_INT\r\n        break\r\n      case 'string':\r\n        name = TYPES.STRING\r\n        break\r\n      case 'number':\r\n        name = TYPES.NUMBER\r\n        break\r\n      case 'boolean':\r\n        name = TYPES.BOOLEAN\r\n        break\r\n      case 'undefined':\r\n        name = TYPES.UNDEFINED\r\n        break\r\n      case 'symbol':\r\n        name = TYPES.SYMBOL\r\n        break\r\n      // 对象（引用）类型的数据\r\n      default:\r\n        name = OBJECTS[type]\r\n        break\r\n    }\r\n  }\r\n\r\n  return name || type\r\n}\r\n\r\nexport default _type\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Number 类型\r\n * ========================================================================\r\n * @method isNumber\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Number 类型，返回 true，否则返回 false\r\n */\r\nconst isNumber = (val) => {\r\n  return _type(val) === TYPES.NUMBER\r\n}\r\n\r\nexport default isNumber\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据是否为整数\r\n * ========================================================================\r\n * @method isInteger\r\n * @category Lang\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是整数，返回 true，否则返回 false\r\n */\r\nconst isInteger = (val) => {\r\n  return isNumber(val) && !isNaN(val) && Number(val) === val && val % 1 === 0\r\n}\r\n\r\nexport default isInteger\r\n","import isNumber from './isNumber'\r\nimport isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据是否为整数\r\n * ========================================================================\r\n * @method isFloat\r\n * @category Lang\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是整数，返回 true，否则返回 false\r\n */\r\nfunction isFloat(val) {\r\n  return (\r\n    isNumber(val) &&\r\n    !isNaN(val) &&\r\n    isFinite(val) &&\r\n    !isInteger(val) &&\r\n    Number(val) === val &&\r\n    val % 1 !== 0\r\n  )\r\n}\r\n\r\nexport default isFloat\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据的数据是正无穷或者负无穷\r\n * ========================================================================\r\n * @method isInfinite\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是正无穷或者负无穷，返回 true，否则返回 false\r\n */\r\nconst isInfinite = (val) => {\r\n  return isNumber(val) && (val === Infinity || val === -Infinity)\r\n}\r\n\r\nexport default isInfinite\r\n","import isInteger from './isInteger'\r\nimport isFloat from './isFloat'\r\nimport isInfinite from './isInfinite'\r\n\r\n/**\r\n * （私有方法）获取确切的数值类型\r\n * ========================================================================\r\n * @method _getExactTypeOfNumber\r\n * @private\r\n * @param {Number} val - 要检测的数值\r\n * @returns {String} - 返回数值类型：integer、float、infinite\r\n */\r\nconst _getExactTypeOfNumber = (val) => {\r\n  let name = 'number'\r\n\r\n  if (isInteger(val)) {\r\n    name = 'integer'\r\n  } else if (isFloat(val)) {\r\n    name = 'float'\r\n  } else if (isInfinite(val)) {\r\n    name = 'infinite'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default _getExactTypeOfNumber\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为字符串\r\n * ========================================================================\r\n * @method isString\r\n * @category Lang\r\n * @param {*} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是字符串，返回 true，否则返回 false\r\n */\r\nconst isString = (obj) => {\r\n  return _type(obj) === TYPES.STRING\r\n}\r\n\r\nexport default isString\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否只包空格\r\n * ========================================================================\r\n * @method isBlank\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 只包含空格，返回 true，否则返回 false\r\n */\r\nfunction isBlank(val) {\r\n  if (!isString(val)) {\r\n    return false\r\n  }\r\n\r\n  return /^\\s*$/.test(val)\r\n}\r\n\r\nexport default isBlank\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为一个基于 base64 编码的字符串。\r\n * ========================================================================\r\n * @method isBase64\r\n * @param {String} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 base64 编码的字符串，返回 true，否则返回 false\r\n */\r\nconst isBase64 = (val) => {\r\n  const REGEXP_BASE64 =\r\n    /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}={2})$/gm\r\n  return isString(val) && (!val.length || REGEXP_BASE64.test(val))\r\n}\r\n\r\nexport default isBase64\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测是否为正确的 Email 邮箱地址格式\r\n * ========================================================================\r\n * @method isEmail\r\n * @category Lang\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Email 邮箱地址格式，返回 true，否则返回 false\r\n */\r\nconst isEmail = (val) => {\r\n  const pattern =\r\n    /^([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)$/\r\n  return isString(val) && pattern.test(val)\r\n}\r\n\r\nexport default isEmail\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为空字符串\r\n * ========================================================================\r\n * @method isEmpty\r\n * @category Lang\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是空字符串，返回 true，否则返回 false\r\n */\r\nconst isEmpty = (val) => {\r\n  return isString(val) && val === ''\r\n}\r\n\r\nexport default isEmpty\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为 Guid 格式字符串\r\n * ========================================================================\r\n * @method isGuid\r\n * @since 1.4.0\r\n * @category Lang\r\n * @param {String} str - 待检测数据（字符串）\r\n * @returns {Boolean} 'val' 是 Guid 格式字符串，返回 true，否则返回 false\r\n */\r\nconst isGuid = (str) => {\r\n  const patternWithHyphens =\r\n    /^{?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}}?$/gi\r\n  const patternWithoutHyphens =\r\n    /^{?[0-9a-fA-F]{8}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{12}}?$/gi\r\n\r\n  let guid\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  guid = str.replace(/^[{}]$/i, '')\r\n\r\n  return patternWithHyphens.test(guid) || patternWithoutHyphens.test(guid)\r\n}\r\n\r\nexport default isGuid\r\n","import isString from './isString'\r\n\r\n/**\r\n * 验证是否为（v4 or v6） IP 地址\r\n * ========================================================================\r\n * @method isIPAddress\r\n * @category Lang\r\n * @param {String} str - 待检测的数据（字符串）\r\n * @returns {Boolean} 'val' 是 IP 地址，返回 true，否则返回 false\r\n */\r\nconst isIPAddress = (str) => {\r\n  const ipV6 =\r\n    /(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]+|::(ffff(:0{1,4})?:)?((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d)|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d))/\r\n  const ipV4 =\r\n    /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/\r\n  return isString(str) && (ipV4.test(str) || ipV6.test(str))\r\n}\r\n\r\nexport default isIPAddress\r\n","// HTML 合法的标签\r\nconst TAGS = [\r\n  'a',\r\n  'abbr',\r\n  'address',\r\n  'area',\r\n  'article',\r\n  'aside',\r\n  'audio',\r\n  'b',\r\n  'base',\r\n  'bdi',\r\n  'bdo',\r\n  'blockquote',\r\n  'body',\r\n  'br',\r\n  'button',\r\n  'canvas',\r\n  'caption',\r\n  'cite',\r\n  'code',\r\n  'col',\r\n  'colgroup',\r\n  'data',\r\n  'datalist',\r\n  'dd',\r\n  'del',\r\n  'details',\r\n  'dfn',\r\n  'dialog',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'em',\r\n  'embed',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'head',\r\n  'header',\r\n  'hgroup',\r\n  'hr',\r\n  'html',\r\n  'i',\r\n  'iframe',\r\n  'img',\r\n  'input',\r\n  'ins',\r\n  'kbd',\r\n  'label',\r\n  'legend',\r\n  'li',\r\n  'link',\r\n  'main',\r\n  'map',\r\n  'mark',\r\n  'math',\r\n  'menu',\r\n  'menuitem',\r\n  'meta',\r\n  'meter',\r\n  'nav',\r\n  'noscript',\r\n  'object',\r\n  'ol',\r\n  'optgroup',\r\n  'option',\r\n  'output',\r\n  'p',\r\n  'param',\r\n  'picture',\r\n  'pre',\r\n  'progress',\r\n  'q',\r\n  'rb',\r\n  'rp',\r\n  'rt',\r\n  'rtc',\r\n  'ruby',\r\n  's',\r\n  'samp',\r\n  'script',\r\n  'search',\r\n  'section',\r\n  'select',\r\n  'slot',\r\n  'small',\r\n  'source',\r\n  'span',\r\n  'strong',\r\n  'style',\r\n  'sub',\r\n  'summary',\r\n  'sup',\r\n  'svg',\r\n  'table',\r\n  'tbody',\r\n  'td',\r\n  'template',\r\n  'textarea',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'time',\r\n  'title',\r\n  'tr',\r\n  'track',\r\n  'u',\r\n  'ul',\r\n  'var',\r\n  'video',\r\n  'wbr'\r\n]\r\n\r\nexport default TAGS\r\n","import isString from './isString'\r\nimport trim from './trim'\r\nimport TAGS from './enum/tags'\r\n\r\n/**\r\n * 检测测试数据是否为合法的 HTML 代码\r\n * ========================================================================\r\n * @method isHTML\r\n * @since 0.5.0\r\n * @category Lang\r\n * @see https://github.com/sindresorhus/html-tags\r\n * @see https://github.com/sindresorhus/is-html\r\n * @param {String} str - 要检测的数据\r\n * @returns {Boolean} 'val' 为合法的 HTML 代码，返回 true，否则返回 false\r\n */\r\nconst isHTML = (str) => {\r\n  let html\r\n  let basic\r\n  let full\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  // 为了提高性能，我们将其限制在合理的长度内。\r\n  html = trim(str).slice(0, 1000)\r\n  basic = /\\s*<!doctype html>|<html\\b[^>]*>|<body\\b[^>]*>|<x-[^>]+>/i\r\n  full = new RegExp(TAGS.map((tag) => `<${tag}\\\\b[^>]*>`).join('|'), 'i')\r\n\r\n  return basic.test(html) || full.test(html)\r\n}\r\n\r\nexport default isHTML\r\n","const trim = (str) => {\n  /* istanbul ignore else */\n  if (str.trim) {\n    return str.trim()\n  }\n\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nexport default trim\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为有效的时间（字符串）\r\n * ========================================================================\r\n * @method _isTime\r\n * @private\r\n * @param {String} str - 待检测数据（字符串）\r\n * @returns {Boolean}\r\n */\r\nconst _isTime = (str) => {\r\n  const pattern12Hours = /^(0?[1-9]|1[0-2]):[0-5]\\d(\\s(am|pm|AM|PM))?$/\r\n  const pattern24Hours = /^(0?[1-9]|2[0-3]):([0-5]\\d){1,2}$/\r\n\r\n  return isString(str) && (pattern12Hours.test(str) || pattern24Hours.test(str))\r\n}\r\n\r\nexport default _isTime\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为有效的日期（字符串）\r\n * ========================================================================\r\n * @method _isDate\r\n * @private\r\n * @param {String} str - 待检测数据（字符串）\r\n * @returns {Boolean}\r\n */\r\nconst _isDate = (str) => {\r\n  return isString(str) && !isNaN(Date.parse(str))\r\n}\r\n\r\nexport default _isDate\r\n","import isBlank from './isBlank'\r\nimport isBase64 from './isBase64'\r\nimport isChinese from './isChinese'\r\nimport isEmail from './isEmail'\r\nimport isEmpty from './isEmpty'\r\nimport isGuid from './isGuid'\r\nimport isIPAddress from './isIPAddress'\r\nimport isHex from './isHex'\r\nimport isHTML from './isHTML'\r\nimport isJSON from './isJSON'\r\nimport isTime from './isTime'\r\n\r\n/**\r\n * （私有方法）获取确切的字符串类型\r\n * ========================================================================\r\n * @method _getExactTypeOfString\r\n * @private\r\n * @param {String} val - 要检测的字符串\r\n * @returns {String} 返回字符串类型：blank、chinese、email、empty... 等等\r\n */\r\nconst _getExactTypeOfString = (val) => {\r\n  let name = 'string'\r\n\r\n  if (isEmpty(val)) {\r\n    name = 'empty'\r\n  } else if (isBlank(val)) {\r\n    name = 'blank'\r\n  } else if (isGuid(val)) {\r\n    name = 'guid'\r\n  } else if (isBase64(val)) {\r\n    name = 'base64'\r\n  } else if (isChinese(val)) {\r\n    name = 'chinese'\r\n  } else if (isEmail(val)) {\r\n    name = 'email'\r\n  } else if (isIPAddress(val)) {\r\n    name = 'IP address'\r\n  } else if (isHex(val)) {\r\n    name = 'hex'\r\n  } else if (isHTML(val)) {\r\n    name = 'html'\r\n  } else if (isJSON(val)) {\r\n    name = 'json'\r\n  } else if (isTime(val)) {\r\n    name = 'time'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default _getExactTypeOfString\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测字符串是否为中文字符\r\n * ========================================================================\r\n * Wiki 介绍中文字符包含以下内容：\r\n *\r\n * 1. 中文汉字\r\n * 2. 象形文字扩展 A-H\r\n * 3. 兼容象形文字符\r\n * 4. 兼容表意文字增补字符\r\n * 5. 中文标点符号\r\n * 6. 兼容标点符号\r\n *\r\n * 其中：\r\n *\r\n * 兼容象形文字符：[0xf900, 0xfaff],（https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs）和\r\n * 兼容表意文字增补字符：[0x2f800, 0x2fa1f]（https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs_Supplement）\r\n *\r\n * 只是看上去像汉字，因此在 isChinese() 方法中也没有纳入到汉字字符\r\n * ========================================================================\r\n * @method isChinese\r\n * @since 1.2.0\r\n * @param {String} str - （必须）检测字符串\r\n * @param {Boolean} [includePunctuation] - （可选）是否包含标点符号：默认值：true\r\n * @returns {boolean} - ‘val’ 是中文字符，返回 true，否则返回 false;\r\n */\r\nconst isChinese = (str, includePunctuation = true) => {\r\n  // 转换成正则表达式\r\n  const toRegExp = (range) => {\r\n    const pattern = range\r\n      .map((range) => {\r\n        const rangeStart = range[0]\r\n        const rangeEnd = range[1]\r\n        const hexStart = rangeStart.toString(16)\r\n        const hexEnd = rangeEnd.toString(16)\r\n\r\n        if (rangeStart === rangeEnd) {\r\n          return `\\\\u{${hexStart}}`\r\n        }\r\n        return `[\\\\u{${hexStart}}-\\\\u{${hexEnd}}]`\r\n      })\r\n      .join('|')\r\n\r\n    return new RegExp(`^(?:${pattern})+$`, 'u')\r\n  }\r\n  // 文字\r\n  // https://en.wikipedia.org/wiki/CJK_Unified_Ideographs\r\n  const chineseIdeographs = [\r\n    // 中文汉字\r\n    [0x4e00, 0x9fff],\r\n\r\n    // 象形文字扩展 A - H\r\n    [0x3400, 0x4dbf],\r\n    [0x20000, 0x2a6df],\r\n    [0x2a700, 0x2b73f],\r\n    [0x2b740, 0x2b81f],\r\n    [0x2b820, 0x2ceaf],\r\n    [0x2ceb0, 0x2ebef],\r\n    [0x30000, 0x3134f],\r\n    [0x31350, 0x323af]\r\n  ]\r\n  // 标点符号\r\n  const chinesePunctuations = [\r\n    // ，\r\n    [0xff0c, 0xff0c],\r\n    // 。\r\n    [0x3002, 0x3002],\r\n    // ·\r\n    [0x00b7, 0x00b7],\r\n    // ×\r\n    [0x00d7, 0x00d7],\r\n    // —\r\n    [0x2014, 0x2014],\r\n    // ‘\r\n    [0x2018, 0x2018],\r\n    // ’\r\n    [0x2019, 0x2019],\r\n    // “\r\n    [0x201c, 0x201c],\r\n    // ”\r\n    [0x201d, 0x201d],\r\n    // …\r\n    [0x2026, 0x2026],\r\n    // 、\r\n    [0x3001, 0x3001],\r\n    // 《\r\n    [0x300a, 0x300a],\r\n    // 》\r\n    [0x300b, 0x300b],\r\n    // 『\r\n    [0x300e, 0x300e],\r\n    // 』\r\n    [0x300f, 0x300f],\r\n    // 【\r\n    [0x3010, 0x3010],\r\n    // 】\r\n    [0x3011, 0x3011],\r\n    // ！\r\n    [0xff01, 0xff01],\r\n    // （\r\n    [0xff08, 0xff08],\r\n    // ）\r\n    [0xff09, 0xff09],\r\n    // ：\r\n    [0xff1a, 0xff1a],\r\n    // ；\r\n    [0xff1b, 0xff1b],\r\n    // ？\r\n    [0xff1f, 0xff1f],\r\n    // ～\r\n    [0xff5e, 0xff5e],\r\n    // 兼容性标点符号\r\n    // https://en.wikipedia.org/wiki/CJK_Compatibility_Forms\r\n    [0xfe30, 0xfe4f]\r\n  ]\r\n  const asciiChars = /\\w+/\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  if (asciiChars.test(str)) {\r\n    return false\r\n  }\r\n\r\n  const pattern = includePunctuation\r\n    ? toRegExp(chineseIdeographs.concat(chinesePunctuations))\r\n    : toRegExp(chineseIdeographs)\r\n\r\n  return pattern.test(str)\r\n}\r\n\r\nexport default isChinese\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为 16 进制编码的字符串\r\n * ========================================================================\r\n * @method isHex\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 16 进制编码的字符串，返回 true，否则返回 false\r\n */\r\nconst isHex = (val) => {\r\n  const REGEXP_HEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n  return isString(val) && REGEXP_HEX.test(val)\r\n}\r\n\r\nexport default isHex\r\n","import isString from './isString'\r\nimport isBlank from './isBlank'\r\n\r\n/**\r\n * 检测测试数据是否为 JSON 格式字符串数据\r\n * ========================================================================\r\n * @method isJSON\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 JSON 格式字符串，返回 true，否则返回 false\r\n */\r\nconst isJSON = (val) => {\r\n  if (!isString(val) || isBlank(val) || !val) {\r\n    return false\r\n  }\r\n\r\n  val = val.replace(/\\\\(?:([\"\\\\/bfnrt])|(u[0-9a-fA-F]{4}))/g, '@')\r\n  val = val.replace(\r\n    /\"[\\w\\s]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?/g,\r\n    ']'\r\n  )\r\n  val = val.replace(/(?:^|:|,)(?:\\s*\\[)+/g, '')\r\n\r\n  return /^[\\],:{}\\s]*$/.test(val)\r\n}\r\n\r\nexport default isJSON\r\n","import _isTime from './_isTime'\r\nimport _isDate from './_isDate'\r\n\r\n/**\r\n * 检测测试数据是否为有效的时间（字符串）\r\n * ========================================================================\r\n * @method isTime\r\n * @since 1.4.0\r\n * @param {String} str - （必须）待测试的字符串\r\n * @param {String} [type] - 测试的时间类型：\r\n *                          time - 时间；\r\n *                          date - 日期；\r\n *                          不传 - 时间或者日期皆可\r\n * @returns {Boolean} 'val' 是有效的时间（字符串），返回 true，否则返回 false\r\n */\r\nconst isTime = (str, type) => {\r\n  switch (type) {\r\n    case 'time':\r\n      return _isTime(str)\r\n    case 'date':\r\n      return _isDate(str)\r\n    default:\r\n      return _isTime(str) || _isDate(str)\r\n  }\r\n}\r\n\r\nexport default isTime\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @category Lang\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Function 类型，返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  const type = _type(val)\r\n  return type === TYPES.FUNCTION\r\n}\r\n\r\nexport default isFunction\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否 undefined（未定义）\r\n * ========================================================================\r\n * @method isUndefined\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 undefined（未定义），返回 true，否则返回 false\r\n */\r\nconst isUndefined = (val) => {\r\n  return _type(val) === TYPES.UNDEFINED\r\n}\r\n\r\nexport default isUndefined\r\n","import isFunction from './isFunction'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为对象\r\n * ========================================================================\r\n * @method isObject\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为对象，返回 true，否则返回 false\r\n */\r\nconst isObject = (val) => {\r\n  const type = typeof val\r\n\r\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\r\n}\r\n\r\nexport default isObject\r\n","import hasOwn from './hasOwn'\r\nimport isObject from './isObject'\r\n\r\n/**\r\n * 判断是否未 VNode 对象\r\n * =============================================================\r\n * @method isVNode\r\n * @param {Object} node - 要检测的数据\r\n * @returns {Boolean} 'val' 是 VNode 类型，返回 true，否则返回 false\r\n */\r\nconst isVNode = (node) => {\r\n  return node !== null && isObject(node) && hasOwn(node, 'componentOptions')\r\n}\r\n\r\nexport default isVNode\r\n","import isUndefined from './isUndefined'\n\n/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n\n  if (hasOwnProperty) {\n    // 不建议直接实用对象从原型链继承的 hasOwnProperty() 方法\n    // 所以采用直接调用 Object.prototype.hasOwnProperty() 方法\n    return hasOwnProperty.call(obj, prop)\n  }\n\n  return (\n    // 从对象构造函数的原型链继承的同名属性不算 obj 自身的属性\n    !isUndefined(obj[prop]) && obj.constructor.prototype[prop] !== obj[prop]\n  )\n}\n\nexport default hasOwn\n","import isPrototype from './isPrototype'\r\nimport isVNode from './isVNode'\r\nimport isXML from './isXML'\r\n\r\n/**\r\n * （私有方法）获取确切的对象类型\r\n * ========================================================================\r\n * @method _getExactTypeOfString\r\n * @private\r\n * @param {String} val - 要检测的字符串\r\n * @returns {String} 返回对象类型：prototype、vnode、xml\r\n */\r\nconst _getExactTypeOfObject = (val) => {\r\n  let name = 'object'\r\n\r\n  if (isXML(val)) {\r\n    name = 'xml'\r\n  } else if (isVNode(val)) {\r\n    name = 'vnode'\r\n  } else if (isPrototype(val)) {\r\n    name = 'prototype'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default _getExactTypeOfObject\r\n","/**\r\n * 检测是否为 XML 文档\r\n * ========================================================================\r\n * @method isXML\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 XML 文档，返回 true，否则返回 false\r\n */\r\nconst isXML = (val) => {\r\n  const documentElement = val && (val.ownerDocument || val).documentElement\r\n  return documentElement ? documentElement.nodeName !== 'HTML' : false\r\n}\r\n\r\nexport default isXML\r\n","import isFunction from './isFunction'\r\n\r\n/**\r\n * 判断是否为 prototype 对象\r\n * ========================================================================\r\n * @method isPrototype\r\n * @param {Function|Object} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 prototype 对象，返回 true，否则返回 false\r\n */\r\nconst isPrototype = (val) => {\r\n  const OP = Object.prototype\r\n  const Ctor = val ? val.constructor : null\r\n  const proto = (isFunction(Ctor) && Ctor.prototype) || OP\r\n\r\n  return val === proto\r\n}\r\n\r\nexport default isPrototype\r\n","import isObjectLike from './isObjectLike'\n\n/**\n * 检测测试数据是否为普通对象\n * ========================================================================\n * @method isPlainObject\n * @param {Object} val - 要检测的数据\n * @returns {Boolean} 'val' 是普通对象，返回 true，否则返回 false\n */\nconst isPlainObject = (val) => {\n  const getPrototypeOf = Object.getPrototypeOf\n  let proto\n\n  // Detect obvious negatives\n  if (!isObjectLike(val)) {\n    return false\n  }\n\n  proto = val.prototype\n\n  // JavaScript 对象分为两种：普通对象和函数对象\n  // 普通对象：原型是 __proto__，没有 prototype 原型（属性）\n  // 函数对象：原型是 prototype ，prototype 只存在于函数对象上\n  if (!proto) {\n    return true\n  }\n\n  proto = val\n\n  while (getPrototypeOf(proto) !== null) {\n    proto = getPrototypeOf(proto)\n  }\n\n  return getPrototypeOf(val) === proto\n}\n\nexport default isPlainObject\n","import isObject from './isObject'\r\n\r\n/**\r\n * 检测测试数据是否为类似 Object 类型\r\n * ========================================================================\r\n * @method isObjectLike\r\n * @param {Object} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是类似 Object 类型，返回 true，否则返回 false\r\n */\r\nconst isObjectLike = (val) => {\r\n  return isObject(val) && val !== null\r\n}\r\n\r\nexport default isObjectLike\r\n","// Base\r\nimport is from '../is'\r\nimport isValue from '../isValue'\r\n// Primitive Values\r\nimport isNumber from '../isNumber'\r\nimport isString from '../isString'\r\nimport isBigInt from '../isBigInt'\r\nimport isBoolean from '../isBoolean'\r\nimport isUndefined from '../isUndefined'\r\nimport isNull from '../isNull'\r\nimport isSymbol from '../isSymbol'\r\n// Keyed Collections\r\nimport isSet from '../isSet'\r\nimport isMap from '../isMap'\r\n// Array\r\nimport isArray from '../isArray'\r\nimport isArrayLike from '../isArrayLike'\r\n// Function\r\nimport isFunction from '../isFunction'\r\nimport isConstructor from '../isConstructor'\r\n// Object\r\nimport isObject from '../isObject'\r\nimport isHash from '../isHash'\r\nimport isBuffer from '../isBuffer'\r\nimport isDate from '../isDate'\r\nimport isElement from '../isElement'\r\nimport isPromise from '../isPromise'\r\n// Number\r\nimport isFloat from '../isFloat'\r\nimport isInteger from '../isInteger'\r\nimport isNumeric from '../isNumeric'\r\n// String\r\nimport isEmpty from '../isEmpty'\r\nimport isEmail from '../isEmail'\r\nimport isURL from '../isURL'\r\nimport isHTML from '../isHTML'\r\nimport isGuid from '../isGuid'\r\nimport isIPAddress from '../isIPAddress'\r\nimport isPhoneNumber from '../isPhoneNumber'\r\n\r\nconst Types = {\r\n  is,\r\n  isValue,\r\n  isNumber,\r\n  isString,\r\n  isBigInt,\r\n  isBoolean,\r\n  isUndefined,\r\n  isNull,\r\n  isSymbol,\r\n  isSet,\r\n  isMap,\r\n  isArray,\r\n  isArrayLike,\r\n  isFunction,\r\n  isConstructor,\r\n  isObject,\r\n  isHash,\r\n  isBuffer,\r\n  isDate,\r\n  isElement,\r\n  isPromise,\r\n  isFloat,\r\n  isInteger,\r\n  isNumeric,\r\n  isEmpty,\r\n  isEmail,\r\n  isURL,\r\n  isHTML,\r\n  isGuid,\r\n  isIPAddress,\r\n  isPhoneNumber\r\n}\r\n\r\nexport default Types\r\n","import _type from './_type'\r\nimport _getExactTypeOfNumber from './_getExactTypeOfNumber'\r\nimport _getExactTypeOfString from './_getExactTypeOfString'\r\nimport _getExactTypeOfObject from './_getExactTypeOfObject'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method is\r\n * @category Lang\r\n * @see _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String} 返回确切的数据类型名称\r\n */\r\nconst is = (val) => {\r\n  const type = _type(val)\r\n  let name\r\n\r\n  switch (type) {\r\n    case 'number':\r\n      name = _getExactTypeOfNumber(val)\r\n      break\r\n    case 'string':\r\n      name = _getExactTypeOfString(val)\r\n      break\r\n    case 'object':\r\n      name = _getExactTypeOfObject(val)\r\n      break\r\n    default:\r\n      name = type\r\n      break\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default is\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为有效的数据\r\n * =============================================================\r\n * @method isValue\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是有效的数据，返回 true，否则返回 false\r\n */\r\nconst isValue = (val) => {\r\n  const type = _type(val)\r\n\r\n  switch (type) {\r\n    case TYPES.NUMBER:\r\n      return isFinite(val)\r\n    case TYPES.NULL:\r\n    case TYPES.UNDEFINED:\r\n      return false\r\n    default:\r\n      return !!type\r\n  }\r\n}\r\n\r\nexport default isValue\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 BigInt 类型。\r\n * ========================================================================\r\n * @method isBigInt\r\n * @since 0.6.0\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 BigInt 类型，返回 true，否则返回 false\r\n */\r\nconst isBigInt = (val) => {\r\n  return _type(val) === TYPES.BIG_INT\r\n}\r\n\r\nexport default isBigInt\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Boolean 类型\r\n * ========================================================================\r\n * @method isBoolean\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Boolean 类型，则返回 true，否则返回 false\r\n */\r\nconst isBoolean = (val) => {\r\n  return _type(val) === TYPES.BOOLEAN\r\n}\r\n\r\nexport default isBoolean\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 null\r\n * ========================================================================\r\n * @method isNull\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 null，返回 true，否则返回 false\r\n */\r\nconst isNull = (val) => {\r\n  return _type(val) === TYPES.NULL\r\n}\r\n\r\nexport default isNull\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Symbol 类型\r\n * ========================================================================\r\n * @method isSymbol\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Symbol 类型，返回 true，否则返回 false\r\n */\r\nconst isSymbol = (val) => {\r\n  return _type(val) === TYPES.SYMBOL\r\n}\r\n\r\nexport default isSymbol\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Set 类型\r\n * ========================================================================\r\n * @method isSet\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Set 类型，返回 true，否则返回 false\r\n */\r\nconst isSet = (val) => {\r\n  return _type(val) === TYPES.SET\r\n}\r\n\r\nexport default isSet\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Map 类型\r\n * ========================================================================\r\n * @method isMap\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Map 类型，返回 true，否则返回 false\r\n */\r\nconst isMap = (val) => {\r\n  return _type(val) === TYPES.MAP\r\n}\r\n\r\nexport default isMap\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} - 'val' 是 Array 类型，返回 true，否则返回 false\r\n */\r\nconst isArray = (val) => {\r\n  return Array.isArray ? Array.isArray(val) : _type(val) === TYPES.ARRAY\r\n}\r\n\r\nexport default isArray\r\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为类似数组（array、arguments 对象或者\n * HTMLNodeList 对象）类型。\n * ========================================================================\n * @method isArrayLike\n * @param {*} val - 要检测是的数据\n * @returns {Boolean} 'val' 是 array、arguments 或者 HTMLNodeList 类型返回 true，否则返回 false\n */\nconst isArrayLike = (val) => {\n  const type = _type(val)\n\n  return (\n    type === TYPES.ARRAY ||\n    type === TYPES.ARGUMENTS ||\n    type === TYPES.COLLECTION\n  )\n}\n\nexport default isArrayLike\n","import isFunction from './isFunction'\r\nimport isNativeFunction from './isNativeFunction'\r\n\r\n/**\r\n * 检测测试函数是否为构造函数\r\n * ========================================================================\r\n * @method isConstructor\r\n * @category Lang\r\n * @param {Function|Object} fn - 要测试的（构造）函数\r\n * @returns {Boolean} - fn 是构造函数，返回 true，否则返回 false;\r\n */\r\nconst isConstructor = (fn) => {\r\n  const proto = fn.prototype\r\n  let instance\r\n\r\n  if (!isFunction(fn) || !proto) {\r\n    return false\r\n  }\r\n\r\n  // 判断 fn 是否为 Promise 构造函数\r\n  if (isNativeFunction(fn) && proto?.then) {\r\n    instance = new fn((resolve, reject) => {})\r\n  } else {\r\n    instance = new fn()\r\n  }\r\n\r\n  // 判断 constructor\r\n  return (\r\n    (instance.constructor === fn && instance instanceof fn) ||\r\n    (instance.constructor === Object && instance instanceof Object)\r\n  )\r\n}\r\n\r\nexport default isConstructor\r\n","import isFunction from './isFunction'\r\n\r\n/**\r\n * 检测测试数据是否为 JavaScript 内置函数\r\n * ========================================================================\r\n * @method isNativeFunction\r\n * @param {Function|Object} fn - 要测试的函数\r\n * @returns {Boolean} - fn 是内置函数，返回 true，否则返回 false;\r\n */\r\nconst isNativeFunction = (fn) => {\r\n  return isFunction(fn) && /\\{\\s*\\[native code\\]\\s*\\}/.test('' + fn)\r\n}\r\n\r\nexport default isNativeFunction\r\n","import isPlainObject from './isPlainObject'\r\n\r\n/**\r\n * 检测测试数据是否为空（单体）对象\r\n * ========================================================================\r\n * @method isHash\r\n * @alias isPlainObject\r\n * @since 0.4.0\r\n * @category Lang\r\n * @param {Object} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是普通对象，返回 true，否则返回 false\r\n */\r\nconst isHash = (obj) => {\r\n  return isPlainObject(obj)\r\n}\r\n\r\nexport default isHash\r\n","/**\r\n * 验证数据是否为 Buffer 类型\r\n * ========================================================================\r\n * @method isBuffer\r\n * @since 1.6.0\r\n * @category Lang\r\n * @param {*} val - 待检测的数据\r\n * @returns {Boolean} 'val' 是 Buffer 类型返回 true，否则返回 false\r\n */\r\nconst isBuffer = (val) => {\r\n  // Node.js 环境检测 `global`\r\n  const Global =\r\n    typeof global === 'object' &&\r\n    global !== null &&\r\n    global.Object === Object &&\r\n    global\r\n\r\n  // 检测 `globalThis`\r\n  const GlobalThis =\r\n    typeof globalThis === 'object' &&\r\n    globalThis !== null &&\r\n    globalThis.Object === Object &&\r\n    globalThis\r\n\r\n  // 检测 `self`\r\n  const Self =\r\n    typeof self === 'object' && self !== null && self.Object === Object && self\r\n\r\n  // 应用之前检测的 `global object` 的引用\r\n  const _Global = GlobalThis || Global || Self || Function('return this')()\r\n\r\n  // 检测 `exports`\r\n  const Exports =\r\n    typeof exports === 'object' &&\r\n    exports !== null &&\r\n    !exports.nodeType &&\r\n    exports\r\n\r\n  // 检测 `module`\r\n  const Module =\r\n    Exports &&\r\n    typeof module === 'object' &&\r\n    module !== null &&\r\n    !module.nodeType &&\r\n    module\r\n\r\n  // 检测 `module.exports`\r\n  const ModuleExports = Module && Module.exports === Exports\r\n\r\n  // 获取 Buffer 对象的引用\r\n  const Buffer = ModuleExports ? _Global.Buffer : undefined\r\n\r\n  // 获取 isBuffer() 方法\r\n  const detectBuffer = Buffer ? Buffer.isBuffer : () => false\r\n\r\n  return detectBuffer(val)\r\n}\r\n\r\nexport default isBuffer\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 Date 类型\r\n * ========================================================================\r\n * @method isDate\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 Date 类型，返回 true，否则返回 false\r\n */\r\nconst isDate = (val) => {\r\n  return (\r\n    _type(val) === TYPES.DATE &&\r\n    val.toString() !== 'Invalid Date' &&\r\n    !isNaN(val)\r\n  )\r\n}\r\n\r\nexport default isDate\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 HTML 元素节点。\r\n * ========================================================================\r\n * @method isElement\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 HTML 元素节点，返回 true，否则返回 false\r\n */\r\nconst isElement = (val) => {\r\n  return _type(val) === TYPES.ELEMENT\r\n}\r\n\r\nexport default isElement\r\n","import _type from './_type'\r\nimport isObject from './isObject'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测数据是否为 Promise 对象\r\n * ========================================================================\r\n * @method isPromise\r\n * @since 1.3.0\r\n * @category Lang\r\n * @param {Object} val - 测试数据\r\n * @returns {Boolean} 'val' 是 Promise 对象，返回 true，否则返回 false\r\n */\r\nconst isPromise = (val) => {\r\n  return isObject(val) && _type(val) === TYPES.PROMISE\r\n}\r\n\r\nexport default isPromise\r\n","import isNumber from './isNumber'\r\nimport isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否是一个数字（只能是 number 类型或者 '123123' 这样的数字字符串）\r\n * ========================================================================\r\n * @method isNumeric\r\n * @category Lang\r\n * @param {Number|String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是一个数字，返回 true，否则返回false\r\n */\r\nconst isNumeric = (val) => {\r\n  return (isNumber(val) || isString(val)) && !isNaN(val - parseFloat(val))\r\n}\r\n\r\nexport default isNumeric\r\n","import isString from './isString'\r\n\r\n/**\r\n * 判断字符串是否为有效的 URL 地址\r\n * ========================================================================\r\n * @method isURL\r\n * @category Lang\r\n * @param {String} str - 要检测的字符串\r\n * @returns {Boolean} 'val' 是有效的 URL 字符串格式，返回 true，否则返回 false\r\n */\r\nconst isURL = (str) => {\r\n  const protocol = '(https?:)?'\r\n  const user = '([^\\\\/\\\\?\\\\#\\\\:]+)'\r\n  const password = '(.+)'\r\n  const auth = '(' + user + ':' + password + '@)?'\r\n  const domain = '(([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*(\\\\.)?)+[a-z]{2,})'\r\n  const ip = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})'\r\n  const port = '(\\\\:\\\\d+)?'\r\n  const path = '(\\\\/[-a-z\\\\d%_.~+]*)*'\r\n  const search = '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'\r\n  const hash = '(\\\\#[-a-z\\\\d_]*)?'\r\n  const url =\r\n    '^' +\r\n    protocol +\r\n    '\\\\/\\\\/' +\r\n    auth +\r\n    '(' +\r\n    domain +\r\n    '|' +\r\n    ip +\r\n    ')' +\r\n    port +\r\n    path +\r\n    search +\r\n    hash +\r\n    '$'\r\n  const pattern = new RegExp(url, 'i')\r\n\r\n  return isString(str) && !!pattern.test(str)\r\n}\r\n\r\nexport default isURL\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测是否为电话号码\r\n * ========================================================================\r\n * @method isPhoneNumber\r\n * @category Lang\r\n * @param {String} str - 要检测的数据\r\n * @returns {Boolean} 'val' 是 电话号码 格式，返回 true，否则返回 false\r\n *\r\n * @example\r\n * // 移动电话号码\r\n * isPhoneNumber(13901030304) // -> false\r\n * isPhoneNumber('1390103030a') // => false\r\n *\r\n * isPhoneNumber('+86 13901030304')\r\n * isPhoneNumber('13901030304')\r\n * isPhoneNumber('139-010-30304')\r\n * isPhoneNumber('139.010.30304')\r\n *\r\n * // 固定电话号码\r\n * isPhoneNumber('+86 84923296') // -> true\r\n * isPhoneNumber('027 84923296') // -> true\r\n * isPhoneNumber('(027) 84923296') // -> true\r\n * isPhoneNumber('(027)84923296') // -> true\r\n * isPhoneNumber('027-84923296') // -> true\r\n * isPhoneNumber('027.84923296') // -> true\r\n * isPhoneNumber('027 849-23296') // -> true\r\n * isPhoneNumber('027-849-23296') // -> true\r\n */\r\nconst isPhoneNumber = (str) => {\r\n  const pattern =\r\n    /^\\+?\\(?(\\d{2,3})?\\)?[-\\s.]?((\\d{3}[-\\s.]?\\d{4,6})|(\\d{11}))$/im\r\n  return isString(str) && pattern.test(str)\r\n}\r\n\r\nexport default isPhoneNumber\r\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","isNumber","isInteger","isNaN","Number","isFloat","isFinite","_getExactTypeOfNumber","Infinity","isInfinite","isString","obj","isBlank","test","isEmail","isEmpty","isGuid","str","guid","replace","isIPAddress","TAGS","isHTML","html","basic","full","trim","slice","RegExp","map","tag","join","_isTime","_isDate","Date","parse","_getExactTypeOfString","length","isBase64","includePunctuation","toRegExp","range","pattern","rangeStart","rangeEnd","hexStart","hexEnd","chineseIdeographs","concat","isChinese","isHex","isJSON","isTime","isFunction","isUndefined","isObject","isVNode","node","prop","hasOwnProperty","call","constructor","hasOwn","_getExactTypeOfObject","documentElement","ownerDocument","nodeName","isXML","OP","Ctor","proto","isPrototype","isPlainObject","getPrototypeOf","isObjectLike","is","isValue","isBigInt","isBoolean","isNull","isSymbol","isSet","isMap","isArray","Array","isArrayLike","isConstructor","fn","instance","isNativeFunction","then","resolve","reject","isHash","isBuffer","Global","global","GlobalThis","globalThis","Self","self","_Global","Function","Exports","exports","Module","module","Buffer","undefined","isDate","isElement","isPromise","isNumeric","parseFloat","isURL","isPhoneNumber"],"mappings":"sOACA,MAAMA,EAEK,SAFLA,EAGK,UAHLA,EAIE,OAJFA,EAKI,SALJA,EAMO,YANPA,EAOI,SAPJA,EAQI,SARJA,EAUC,MAVDA,EAYC,MAZDA,EAeG,QAfHA,EAgBO,YAhBPA,EAgCI,SAhCJA,EAiCQ,aAjCRA,EAkCE,OAlCFA,EAmCK,UAnCLA,EAsCM,WAtCNA,EAuCK,UCrCLC,EAAU,CAEd,gBAAiBD,EAEjB,eAAgBA,EAChB,mBDIU,UCHV,eAAgBA,EAChB,mBDIU,UCFV,iBAAkBA,EAClB,qBAAsBA,EAEtB,oBDIW,WCHX,uBDIc,cCHd,qBDIY,YCHZ,sBDIa,aCHb,6BDIqB,oBCHrB,sBDIa,aCHb,uBDIc,cCHd,sBDIa,aCHb,uBDIc,cCHd,wBDIe,eCHf,wBDIe,eCHf,yBDIiB,gBCHjB,0BDIkB,iBCFlB,kBAAmBA,EACnB,mBAAoBA,EACpB,kBAAmBA,EACnB,kBAAmBA,EACnB,gBAAiBA,EACjB,iBDGO,QCFP,4BDGU,WCFV,oBAAqBA,EACrB,oBAAqBA,EACrB,mBAAoBA,EACpB,kBDEQ,SCDR,gBDEM,QEhCFE,EAASC,IACb,MAAMC,EAAOC,OAAOC,UAAUC,SAASC,MAAML,GACvCM,SAAiBN,EACvB,IAAIO,EAGJ,GAAIP,GAAKQ,SAA4B,IAAjBR,EAAIS,SACtBF,EAAOV,OAGP,OAAQS,GACN,IAAK,SACHC,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,UACHU,EAAOV,EACP,MACF,IAAK,YACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MAEF,QACEU,EAAOT,EAAQG,GAKrB,OAAOM,GAAQN,GCnCXS,EAAYV,GACTD,EAAMC,KAASH,ECFlBc,EAAaX,GACVU,EAASV,KAASY,MAAMZ,IAAQa,OAAOb,KAASA,GAAOA,EAAM,GAAM,ECA5E,SAASc,EAAQd,GACf,OACEU,EAASV,KACRY,MAAMZ,IACPe,SAASf,KACRW,EAAUX,IACXa,OAAOb,KAASA,GAChBA,EAAM,GAAM,CAEhB,CCXA,MCGMgB,EAAyBhB,IAC7B,IAAIO,EAAO,SAUX,OARII,EAAUX,GACZO,EAAO,UACEO,EAAQd,GACjBO,EAAO,QDTQ,CAACP,GACXU,EAASV,KAASA,IAAQiB,KAAYjB,KAAQ,KCS1CkB,CAAWlB,KACpBO,EAAO,YAGFA,GCZHY,EAAYC,GACTrB,EAAMqB,KAASvB,ECHxB,SAASwB,EAAQrB,GACf,QAAKmB,EAASnB,IAIP,QAAQsB,KAAKtB,EACtB,CCNA,MCCMuB,EAAWvB,GAGRmB,EAASnB,IADd,oKAC8BsB,KAAKtB,GCHjCwB,EAAWxB,GACRmB,EAASnB,IAAgB,KAARA,ECApByB,EAAUC,IAMd,IAAIC,EAEJ,QAAKR,EAASO,KAIdC,EAAOD,EAAIE,QAAQ,UAAW,IAV5B,sFAYwBN,KAAKK,IAV7B,kFAU4DL,KAAKK,GAAI,ECfnEE,EAAeH,GAKZP,EAASO,KADd,4EAC4BJ,KAAKI,IAHjC,6kBAG8CJ,KAAKI,ICdjDI,EAAO,CACX,IACA,OACA,UACA,OACA,UACA,QACA,QACA,IACA,OACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,KACA,KACA,KACA,QACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,SACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,OACA,MACA,OACA,OACA,OACA,WACA,OACA,QACA,MACA,WACA,SACA,KACA,WACA,SACA,SACA,IACA,QACA,UACA,MACA,WACA,IACA,KACA,KACA,KACA,MACA,OACA,IACA,OACA,SACA,SACA,UACA,SACA,OACA,QACA,SACA,OACA,SACA,QACA,MACA,UACA,MACA,MACA,QACA,QACA,KACA,WACA,WACA,QACA,KACA,QACA,OACA,QACA,KACA,QACA,IACA,KACA,MACA,QACA,OCxGIC,EAAUL,IACd,IAAIM,EACAC,EACAC,EAEJ,QAAKf,EAASO,KAKdM,ECzBW,CAACN,GAERA,EAAIS,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"}