{"version":3,"file":"types.core.min.js","sources":["enum/types.js","enum/objects.js","_type.js","isFunction.js","isObject.js","isUndefined.js","isPlainObject.js","hasOwn.js","isNumber.js","isString.js","isInteger.js","lang/index.js","is.js","isValue.js","isHash.js","isArray.js","isArrayLike.js","isConstructor.js","isNativeFunction.js","isNull.js","isNumeric.js","isFloat.js","isBigInt.js","isBoolean.js","isSet.js","isMap.js","isSymbol.js","isDate.js","isElement.js","isEmpty.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\r\nconst TYPES = {\r\n  BOOLEAN: 'boolean',\r\n  BIG_INT: 'bigint',\r\n  NULL: 'null',\r\n  UNDEFINED: 'undefined',\r\n  NUMBER: 'number',\r\n  STRING: 'string',\r\n  OBJECT: 'object',\r\n  ARRAY: 'array',\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  DATA_VIEW: 'dataview',\r\n  DATE: 'date',\r\n  ERROR: 'error',\r\n  PROMISE: 'promise',\r\n  ARGUMENTS: 'arguments',\r\n  FUNCTION: 'function',\r\n  ELEMENT: 'element',\r\n  FRAGMENT: 'fragment',\r\n  COLLECTION: 'collection',\r\n  TEXT: 'text',\r\n  REGEXP: 'regexp',\r\n  SYMBOL: 'symbol',\r\n  SET: 'set',\r\n  WEAK_SET: 'weakset',\r\n  MAP: 'map',\r\n  WEAK_MAP: 'weakmap',\r\n  INT8_ARRAY: 'int8array',\r\n  UNIT8_ARRAY: 'uint8array',\r\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\r\n  INT16_ARRAY: 'int16array',\r\n  UNIT16_ARRAY: 'uint16array',\r\n  INT32_ARRAY: 'int32array',\r\n  UNIT32_ARRAY: 'uint32array',\r\n  FLOAT32_ARRAY: 'float32array',\r\n  FLOAT64_ARRAY: 'float64array',\r\n  BIG_INT64_ARRAY: 'bigint64array',\r\n  BIG_UINT64_ARRAY: 'biguint64array'\r\n}\r\n\r\nexport default TYPES\r\n","// Object.prototype.toString() 输出的类型名称枚举值\r\nconst OBJECTS = {\r\n  BIG_INT: '[object BigInt]',\r\n  BIG_INT64_ARRAY: '[object BigInt64Array]',\r\n  BIG_UINT64_ARRAY: '[object BigUint64Array]',\r\n  STRING: '[object String]',\r\n  NUMBER: '[object Number]',\r\n  BOOLEAN: '[object Boolean]',\r\n  NULL: '[object Null]',\r\n  UNDEFINED: '[object Undefined]',\r\n  OBJECT: '[object Object]',\r\n  PROMISE: '[object Promise]',\r\n  ARGUMENTS: '[object Arguments]',\r\n  ARRAY: '[object Array]',\r\n  ARRAY_BUFFER: '[object ArrayBuffer]',\r\n  INT8_ARRAY: '[object Int8Array]',\r\n  UNIT8_ARRAY: '[object Uint8Array]',\r\n  UNIT8_CLAMPED_ARRAY: '[object Uint8ClampedArray]',\r\n  INT16_ARRAY: '[object Int16Array]',\r\n  UNIT16_ARRAY: '[object Uint16Array]',\r\n  INT32_ARRAY: '[object Int32Array]',\r\n  UNIT32_ARRAY: '[object Uint32Array]',\r\n  FLOAT32_ARRAY: '[object Float32Array]',\r\n  FLOAT64_ARRAY: '[object Float64Array]',\r\n  DATA_VIEW: '[object DataView]',\r\n  DATE: '[object Date]',\r\n  ERROR: '[object Error]',\r\n  FUNCTION: '[object Function]',\r\n  REGEXP: '[object RegExp]',\r\n  SET: '[object Set]',\r\n  WEAK_SET: '[object WeakSet]',\r\n  MAP: '[object Map]',\r\n  WEAK_MAP: '[object WeakMap]',\r\n  SYMBOL: '[object Symbol]',\r\n  NODE_LIST: '[object NodeList]',\r\n  FRAGMENT: '[object DocumentFragment]',\r\n  TEXT_NODE: '[object Text]'\r\n}\r\n\r\nexport default OBJECTS\r\n","import TYPES from './enum/types'\r\nimport OBJECTS from './enum/objects'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String}\r\n */\r\nconst _type = (val) => {\r\n  const type = Object.prototype.toString.apply(val)\r\n  const _typeof = typeof val\r\n\r\n  switch (type) {\r\n    /* ===== 原始值类型（Primitive data types） ===== */\r\n    case OBJECTS.STRING:\r\n      if (_typeof === 'string') {\r\n        // 检测是否为 String 类型\r\n        return TYPES.STRING\r\n      }\r\n      return TYPES.OBJECT\r\n    case OBJECTS.BIG_INT:\r\n      return TYPES.BIG_INT\r\n    case OBJECTS.NUMBER:\r\n      // 检测是否为 Number 类型\r\n      if (_typeof === 'number') {\r\n        return TYPES.NUMBER\r\n      }\r\n      return TYPES.OBJECT\r\n    case OBJECTS.BOOLEAN:\r\n      if (typeof val === 'boolean') {\r\n        // 检查是否为 Boolean 类型\r\n        return TYPES.BOOLEAN\r\n      }\r\n      return TYPES.OBJECT\r\n    case OBJECTS.NULL:\r\n      // 检测是否为 null\r\n      return TYPES.NULL\r\n    case OBJECTS.UNDEFINED:\r\n      // 检测是否为 Undefined\r\n      return TYPES.UNDEFINED\r\n    case OBJECTS.SYMBOL:\r\n      // 检测是否为 Symbol 类型\r\n      return TYPES.SYMBOL\r\n    /* ===== ES6 对象 ( Map, WeakMap, Set, WeakSet ) ===== */\r\n    case OBJECTS.SET:\r\n      // 检测是否为 Set 类型\r\n      return TYPES.SET\r\n    case OBJECTS.WEAK_SET:\r\n      // 检测是否为 WeakSet 类型\r\n      return TYPES.WEAK_SET\r\n    case OBJECTS.MAP:\r\n      // 检测是否为 Map 类型\r\n      return TYPES.MAP\r\n    case OBJECTS.WEAK_MAP:\r\n      // 检测是否为 WeakMap 类型\r\n      return TYPES.WEAK_MAP\r\n    /* ===== 引用类型（Reference data types） ===== */\r\n    case OBJECTS.FUNCTION:\r\n      // 检测是否为 Function 类型\r\n      return TYPES.FUNCTION\r\n    case OBJECTS.ARRAY:\r\n      // 检测是否为 Array 类型\r\n      return TYPES.ARRAY\r\n    case OBJECTS.ARRAY_BUFFER:\r\n      // 检测是否为 ArrayBuffer 类型\r\n      return TYPES.ARRAY_BUFFER\r\n    case OBJECTS.DATA_VIEW:\r\n      // 检测是否为 DataView 类型\r\n      return TYPES.DATA_VIEW\r\n    case OBJECTS.DATE:\r\n      // 检测是否为 Date 类型\r\n      return TYPES.DATE\r\n    case OBJECTS.ERROR:\r\n      // 检测是否为 Error 类型\r\n      return TYPES.ERROR\r\n    case OBJECTS.REGEXP:\r\n      // 检测是否为 RegExp 类型\r\n      return TYPES.REGEXP\r\n    /* ===== ES2017 Typed Arrays ===== */\r\n    // Int - 整数\r\n    // Uint - 无符号整数\r\n    // Float - IEEE754 浮点数 )\r\n    case OBJECTS.BIG_INT64_ARRAY:\r\n      return TYPES.BIG_INT64_ARRAY\r\n    case OBJECTS.BIG_UINT64_ARRAY:\r\n      return TYPES.BIG_UINT64_ARRAY\r\n    case OBJECTS.INT8_ARRAY:\r\n      return TYPES.INT8_ARRAY\r\n    case OBJECTS.INT16_ARRAY:\r\n      return TYPES.INT16_ARRAY\r\n    case OBJECTS.INT32_ARRAY:\r\n      return TYPES.INT32_ARRAY\r\n    case OBJECTS.UNIT8_ARRAY:\r\n      return TYPES.UNIT8_ARRAY\r\n    case OBJECTS.UNIT8_CLAMPED_ARRAY:\r\n      return TYPES.UNIT8_CLAMPED_ARRAY\r\n    case OBJECTS.UNIT16_ARRAY:\r\n      return TYPES.UNIT16_ARRAY\r\n    case OBJECTS.UNIT32_ARRAY:\r\n      return TYPES.UNIT32_ARRAY\r\n    case OBJECTS.FLOAT32_ARRAY:\r\n      return TYPES.FLOAT32_ARRAY\r\n    case OBJECTS.FLOAT64_ARRAY:\r\n      return TYPES.FLOAT64_ARRAY\r\n    /* ===== 其它类型（Others） ===== */\r\n    case OBJECTS.PROMISE:\r\n      // 检测是否为 Promise 对象\r\n      return TYPES.PROMISE\r\n    case OBJECTS.ARGUMENTS:\r\n      // 检测是否为 arguments 对象\r\n      return TYPES.ARGUMENTS\r\n    case OBJECTS.NODE_LIST:\r\n      // 检测是否为 NodeList 类型\r\n      return TYPES.COLLECTION\r\n    case OBJECTS.TEXT_NODE:\r\n      // 检测是否为 Text 节点\r\n      return TYPES.TEXT\r\n    case OBJECTS.FRAGMENT:\r\n      // 检测是否为 DocumentFragment 文档碎片\r\n      return TYPES.FRAGMENT\r\n    case OBJECTS.OBJECT:\r\n      return TYPES.OBJECT\r\n    default:\r\n      if (val.tagName && val.nodeType === 1) {\r\n        return TYPES.ELEMENT\r\n      }\r\n      return type\r\n  }\r\n}\r\n\r\nexport default _type\r\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {Boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  const type = _type(val)\n  return type === TYPES.FUNCTION\n}\n\nexport default isFunction\n","import isFunction from './isFunction'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为对象\n * ========================================================================\n * @method isObject\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为对象返回 true，否则返回 false\n */\nconst isObject = (val) => {\n  const type = typeof val\n\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\n}\n\nexport default isObject\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否 undefined（未定义）\n * ========================================================================\n * @method isUndefined\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 undefined（未定义）返回 true，否则返回 false\n */\nconst isUndefined = (val) => {\n  return _type(val) === TYPES.UNDEFINED\n}\n\nexport default isUndefined\n","import isObject from './isObject'\nimport hasOwn from './hasOwn'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为普通对象\n * ========================================================================\n * @method isPlainObject\n * @param {Object} val - 要检测的数据\n * @returns {Boolean} 'val' 是普通对象返回 true，否则返回 false\n */\nconst isPlainObject = (val) => {\n  const toString = Object.prototype.toString\n  let proto\n  let Ctor\n\n  // Detect obvious negatives\n  if (!isObject(val)) {\n    return false\n  }\n\n  proto = val.prototype\n\n  if (!proto) {\n    return true\n  }\n\n  Ctor = hasOwn(proto, 'constructor') && proto.constructor\n\n  return (\n    typeof Ctor === TYPES.FUNCTION &&\n    toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\n  )\n}\n\nexport default isPlainObject\n","import isUndefined from './isUndefined'\n\n/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n\n  if (hasOwnProperty) {\n    // 不建议直接实用对象从原型链继承的 hasOwnProperty() 方法\n    // 所以采用直接调用 Object.prototype.hasOwnProperty() 方法\n    return hasOwnProperty.call(obj, prop)\n  }\n\n  return (\n    // 从对象构造函数的原型链继承的同名属性不算 obj 自身的属性\n    !isUndefined(obj[prop]) && obj.constructor.prototype[prop] !== obj[prop]\n  )\n}\n\nexport default hasOwn\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Number 类型\n * ========================================================================\n * @method isNumber\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Number 类型返回 true，否则返回 false\n */\nconst isNumber = (val) => {\n  return _type(val) === TYPES.NUMBER\n}\n\nexport default isNumber\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为字符串\n *\n * @method isString\n * @param {*} obj - 要检测的数据\n * @returns {Boolean} 'val' 是字符串返回 true，否则返回 false\n */\nconst isString = (obj) => {\n  return _type(obj) === TYPES.STRING\n}\n\nexport default isString\n","import isNumber from './isNumber'\n\n/**\n * 检测测试数据是否为整数\n * ========================================================================\n * @method isInteger\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是整数返回 true，否则返回 false\n */\nconst isInteger = (val) => {\n  return isNumber(val) && !isNaN(val) && Number(val) === val && val % 1 === 0\n}\n\nexport default isInteger\n","import is from '../is'\nimport isValue from '../isValue'\nimport isObject from '../isObject'\nimport isHash from '../isHash'\nimport isArray from '../isArray'\nimport isArrayLike from '../isArrayLike'\nimport isFunction from '../isFunction'\nimport isConstructor from '../isConstructor'\nimport isNumber from '../isNumber'\nimport isNumeric from '../isNumeric'\nimport isFloat from '../isFloat'\nimport isInteger from '../isInteger'\nimport isString from '../isString'\nimport isBoolean from '../isBoolean'\nimport isUndefined from '../isUndefined'\nimport isNull from '../isNull'\nimport isBigInt from '../isBigInt'\nimport isSet from '../isSet'\nimport isMap from '../isMap'\nimport isSymbol from '../isSymbol'\nimport isDate from '../isDate'\nimport isElement from '../isElement'\nimport isEmpty from '../isEmpty'\n\nconst Types = {\n  is,\n  isValue,\n  isObject,\n  isHash,\n  isArray,\n  isArrayLike,\n  isFunction,\n  isConstructor,\n  isNull,\n  isNumber,\n  isNumeric,\n  isFloat,\n  isInteger,\n  isString,\n  isBigInt,\n  isBoolean,\n  isUndefined,\n  isSet,\n  isMap,\n  isSymbol,\n  isDate,\n  isElement,\n  isEmpty\n}\n\nexport default Types\n","import _type from './_type'\n\n/**\n * 检测数据类型，返回检测数据类型的字符串\n * ========================================================================\n * @method is\n * @param {*} val - 要检测的任意值\n * @see _type\n * @returns {String}\n */\nconst is = (val) => {\n  return _type(val)\n}\n\nexport default is\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为有效的数据\n *\n * @method isValue\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是有效的数据返回 true，否则返回 false\n */\nconst isValue = (val) => {\n  const type = _type(val)\n\n  switch (type) {\n    case TYPES.NUMBER:\n      return isFinite(val)\n    case TYPES.NULL:\n    case TYPES.UNDEFINED:\n      return false\n    default:\n      return !!type\n  }\n}\n\nexport default isValue\n","import isPlainObject from './isPlainObject'\n\n/**\n * 检测测试数据是否为空（单体）对象\n * ========================================================================\n * @method isHash\n * @since 0.4.0\n * @param obj\n * @returns {Boolean}\n */\nconst isHash = (obj) => {\n  return isPlainObject(obj)\n}\n\nexport default isHash\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Array 类型\n * ========================================================================\n * @method isArray\n * @param {*} val - 要检测的数据\n * @returns {Boolean} - 'val' 是 Array 则返回 true，否则返回 false\n */\nconst isArray = (val) => {\n  return Array.isArray ? Array.isArray(val) : _type(val) === TYPES.ARRAY\n}\n\nexport default isArray\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为类似数组（array、arguments 对象或者\n * HTMLNodeList 对象）类型。\n * ========================================================================\n * @method isArrayLike\n * @param {*} val - 要检测是的数据\n * @returns {Boolean} 'val' 是 array、arguments 或者 HTMLNodeList 类型返回 true，否则返回 false\n */\nconst isArrayLike = (val) => {\n  const type = _type(val)\n\n  return (\n    type === TYPES.ARRAY ||\n    type === TYPES.ARGUMENTS ||\n    type === TYPES.COLLECTION\n  )\n}\n\nexport default isArrayLike\n","import isFunction from './isFunction'\r\nimport isNativeFunction from './isNativeFunction'\r\n\r\n/**\r\n * 检测测试函数是否为构造函数\r\n * ========================================================================\r\n * @method isConstructor\r\n * @param {Function|Object} fn - 要测试的（构造）函数\r\n * @returns {Boolean} - fn 是构造函数返回 true，否则返回 false;\r\n */\r\nconst isConstructor = (fn) => {\r\n  const proto = fn.prototype\r\n  let instance\r\n\r\n  if (!isFunction(fn) || !proto) {\r\n    return false\r\n  }\r\n\r\n  // 判断 fn 是否为 Promise 构造函数\r\n  if (isNativeFunction(fn) && proto?.then) {\r\n    instance = new fn((resolve, reject) => {})\r\n  } else {\r\n    instance = new fn()\r\n  }\r\n\r\n  // 判断 constructor\r\n  return (\r\n    (instance.constructor === fn && instance instanceof fn) ||\r\n    (instance.constructor === Object && instance instanceof Object)\r\n  )\r\n}\r\n\r\nexport default isConstructor\r\n","import isFunction from './isFunction'\n\n/**\n * 检测测试数据是否为 JavaScript 内置函数\n * ========================================================================\n * @method isNativeFunction\n * @param {Function|Object} fn - 要测试的函数\n * @returns {Boolean} - fn 是内置函数返回 true，否则返回 false;\n */\nconst isNativeFunction = (fn) => {\n  return isFunction(fn) && /\\{\\s*\\[native code\\]\\s*\\}/.test('' + fn)\n}\n\nexport default isNativeFunction\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 null\n * ========================================================================\n * @method isNull\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 null 返回 true，否则返回 false\n */\nconst isNull = (val) => {\n  return _type(val) === TYPES.NULL\n}\n\nexport default isNull\n","import isNumber from './isNumber'\nimport isString from './isString'\n\n/**\n * 检测测试数据是否是一个数字（只能是 number 类型或者 '123123' 这样的数字字符串）\n * ========================================================================\n * @method isNumeric\n * @param {Number|String} val - 要检测的数据\n * @returns {Boolean} 'val' 是一个数字返回 true，否则返回false\n */\nconst isNumeric = (val) => {\n  return (isNumber(val) || isString(val)) && !isNaN(val - parseFloat(val))\n}\n\nexport default isNumeric\n","import isNumber from './isNumber'\nimport isInteger from './isInteger'\n\n/**\n * 检测测试数据是否为整数\n * ========================================================================\n * @method isFloat\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是整数返回 true，否则返回 false\n */\nfunction isFloat(val) {\n  return (\n    isNumber(val) &&\n    !isNaN(val) &&\n    isFinite(val) &&\n    !isInteger(val) &&\n    Number(val) === val &&\n    val % 1 !== 0\n  )\n}\n\nexport default isFloat\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 BigInt 类型。\n * ========================================================================\n * @method isBigInt\n * @since 0.6.0\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 BigInt 类型，返回 true，否则返回 false\n */\nconst isBigInt = (val) => {\n  return _type(val) === TYPES.BIG_INT\n}\n\nexport default isBigInt\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Boolean 类型\n * ========================================================================\n * @method isBoolean\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Boolean 类型则返回 true，否则返回 false\n */\nconst isBoolean = (val) => {\n  return _type(val) === TYPES.BOOLEAN\n}\n\nexport default isBoolean\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Set 类型\n * ========================================================================\n * @method isSet\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Set 类型返回 true，否则返回 false\n */\nconst isSet = (val) => {\n  return _type(val) === TYPES.SET\n}\n\nexport default isSet\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Map 类型\n * ========================================================================\n * @method isMap\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Map 类型返回 true，否则返回 false\n */\nconst isMap = (val) => {\n  return _type(val) === TYPES.MAP\n}\n\nexport default isMap\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Symbol 类型\n * ========================================================================\n * @method isSymbol\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Symbol 类型返回 true，否则返回 false\n */\nconst isSymbol = (val) => {\n  return _type(val) === TYPES.SYMBOL\n}\n\nexport default isSymbol\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 Date 类型\n * ========================================================================\n * @method isDate\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 Date 类型返回 true，否则返回 false\n */\nconst isDate = (val) => {\n  return (\n    _type(val) === TYPES.DATE &&\n    val.toString() !== 'Invalid Date' &&\n    !isNaN(val)\n  )\n}\n\nexport default isDate\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 HTML 元素节点。\n * ========================================================================\n * @method isElement\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 HTML 元素节点返回 true，否则返回 false\n */\nconst isElement = (val) => {\n  return _type(val) === TYPES.ELEMENT\n}\n\nexport default isElement\n","import isString from './isString'\n\n/**\n * 检测测试数据是否为空字符串\n * ========================================================================\n * @method isEmpty\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 是空字符串返回 true，否则返回 false\n */\nconst isEmpty = (val) => {\n  return isString(val) && val === ''\n}\n\nexport default isEmpty\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","tagName","nodeType","isFunction","isObject","isUndefined","isPlainObject","proto","Ctor","obj","prop","hasOwnProperty","call","constructor","hasOwn","isNumber","isString","isInteger","isNaN","Number","is","isValue","isFinite","isHash","isArray","Array","isArrayLike","isConstructor","fn","instance","test","isNativeFunction","then","resolve","reject","isNull","isNumeric","parseFloat","isFloat","isBigInt","isBoolean","isSet","isMap","isSymbol","isDate","isElement","isEmpty"],"mappings":"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"}