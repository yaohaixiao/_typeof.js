{"version":3,"file":"types.core.min.js","sources":["enum/types.js","enum/objects.js","_type.js","isNumber.js","isString.js","isUndefined.js","isFunction.js","isObject.js","isPlainObject.js","hasOwn.js","isInteger.js","isNumeric.js","enum/tags.js","lang/index.js","is.js","isValue.js","isBigInt.js","isBoolean.js","isNull.js","isSymbol.js","isSet.js","isMap.js","isArray.js","isArrayLike.js","isConstructor.js","isNativeFunction.js","isHash.js","isBuffer.js","isDate.js","isElement.js","isPromise.js","isFloat.js","isEmpty.js","isEmail.js","isURL.js","isHTML.js","trim.js","isGuid.js","isIPAddress.js","isPhoneNumber.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\nconst TYPES = {\n  /* ===== Primitive data types ===== */\n  BIG_INT: 'bigint',\n  BOOLEAN: 'boolean',\n  NULL: 'null',\n  NUMBER: 'number',\n  UNDEFINED: 'undefined',\n  STRING: 'string',\n  SYMBOL: 'symbol',\n  /* ===== Keyed Collections ===== */\n  SET: 'set',\n  WEAK_SET: 'weakset',\n  MAP: 'map',\n  WEAK_MAP: 'weakmap',\n  /* ===== Array ===== */\n  ARRAY: 'array',\n  ARGUMENTS: 'arguments',\n  /* ===== Typed Arrays ===== */\n  DATA_VIEW: 'dataview',\n  ARRAY_BUFFER: 'arraybuffer',\n  INT8_ARRAY: 'int8array',\n  UNIT8_ARRAY: 'uint8array',\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\n  INT16_ARRAY: 'int16array',\n  UNIT16_ARRAY: 'uint16array',\n  INT32_ARRAY: 'int32array',\n  UNIT32_ARRAY: 'uint32array',\n  FLOAT32_ARRAY: 'float32array',\n  FLOAT64_ARRAY: 'float64array',\n  BIG_INT64_ARRAY: 'bigint64array',\n  BIG_UINT64_ARRAY: 'biguint64array',\n  /* ===== Object ===== */\n  OBJECT: 'object',\n  COLLECTION: 'collection',\n  DATE: 'date',\n  ELEMENT: 'element',\n  ERROR: 'error',\n  FRAGMENT: 'fragment',\n  FUNCTION: 'function',\n  PROMISE: 'promise',\n  REGEXP: 'regexp',\n  TEXT: 'text'\n}\n\nexport default TYPES\n","import TYPES from './types'\n\n// Object.prototype.toString() 输出的类型名称枚举值\nconst OBJECTS = {\n  /* ===== Primitive data types ===== */\n  '[object Null]': TYPES.NULL,\n  /* ===== Keyed Collections ===== */\n  '[object Set]': TYPES.SET,\n  '[object WeakSet]': TYPES.WEAK_SET,\n  '[object Map]': TYPES.MAP,\n  '[object WeakMap]': TYPES.WEAK_MAP,\n  /* ===== Array ===== */\n  '[object Array]': TYPES.ARRAY,\n  '[object Arguments]': TYPES.ARGUMENTS,\n  /* ===== Typed Arrays ===== */\n  '[object DataView]': TYPES.DATA_VIEW,\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\n  '[object Int8Array]': TYPES.INT8_ARRAY,\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\n  '[object Int16Array]': TYPES.INT16_ARRAY,\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\n  '[object Int32Array]': TYPES.INT32_ARRAY,\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\n  /* ===== Object ===== */\n  '[object Object]': TYPES.OBJECT,\n  '[object Boolean]': TYPES.OBJECT,\n  '[object String]': TYPES.OBJECT,\n  '[object Number]': TYPES.OBJECT,\n  '[object Date]': TYPES.DATE,\n  '[object Error]': TYPES.ERROR,\n  '[object DocumentFragment]': TYPES.FRAGMENT,\n  '[object Function]': TYPES.FUNCTION,\n  '[object NodeList]': TYPES.COLLECTION,\n  '[object Promise]': TYPES.PROMISE,\n  '[object RegExp]': TYPES.REGEXP,\n  '[object Text]': TYPES.TEXT\n}\n\nexport default OBJECTS\n","import TYPES from './enum/types'\nimport OBJECTS from './enum/objects'\n\n/**\n * 检测数据类型，返回检测数据类型的字符串\n * ========================================================================\n * @method _type\n * @param {*} val - 要检测的任意值\n * @returns {String}\n */\nconst _type = (val) => {\n  const type = Object.prototype.toString.apply(val)\n  const _typeof = typeof val\n  let name\n\n  // HTMLElement\n  if (val?.tagName && val.nodeType === 1) {\n    name = TYPES.ELEMENT\n  } else {\n    /* ===== 原始值类型（Primitive data types） ===== */\n    switch (_typeof) {\n      case 'bigint':\n        name = TYPES.BIG_INT\n        break\n      case 'string':\n        name = TYPES.STRING\n        break\n      case 'number':\n        name = TYPES.NUMBER\n        break\n      case 'boolean':\n        name = TYPES.BOOLEAN\n        break\n      case 'undefined':\n        name = TYPES.UNDEFINED\n        break\n      case 'symbol':\n        name = TYPES.SYMBOL\n        break\n      // 对象（引用）类型的数据\n      default:\n        name = OBJECTS[type]\n        break\n    }\n  }\n\n  return name || type\n}\n\nexport default _type\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Number 类型\n * ========================================================================\n * @method isNumber\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Number 类型返回 true，否则返回 false\n */\nconst isNumber = (val) => {\n  return _type(val) === TYPES.NUMBER\n}\n\nexport default isNumber\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为字符串\n * ========================================================================\n * @method isString\n * @category Lang\n * @param {*} obj - 要检测的数据\n * @returns {Boolean} 'val' 是字符串返回 true，否则返回 false\n */\nconst isString = (obj) => {\n  return _type(obj) === TYPES.STRING\n}\n\nexport default isString\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否 undefined（未定义）\n * ========================================================================\n * @method isUndefined\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 undefined（未定义）返回 true，否则返回 false\n */\nconst isUndefined = (val) => {\n  return _type(val) === TYPES.UNDEFINED\n}\n\nexport default isUndefined\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @category Lang\n * @param {*} val - （必须）待检测的数据\n * @returns {Boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  const type = _type(val)\n  return type === TYPES.FUNCTION\n}\n\nexport default isFunction\n","import isFunction from './isFunction'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为对象\n * ========================================================================\n * @method isObject\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为对象返回 true，否则返回 false\n */\nconst isObject = (val) => {\n  const type = typeof val\n\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\n}\n\nexport default isObject\n","import isObject from './isObject'\nimport hasOwn from './hasOwn'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为普通对象\n * ========================================================================\n * @method isPlainObject\n * @param {Object} val - 要检测的数据\n * @returns {Boolean} 'val' 是普通对象返回 true，否则返回 false\n */\nconst isPlainObject = (val) => {\n  const toString = Object.prototype.toString\n  let proto\n  let Ctor\n\n  // Detect obvious negatives\n  if (!isObject(val)) {\n    return false\n  }\n\n  proto = val.prototype\n\n  if (!proto) {\n    return true\n  }\n\n  Ctor = hasOwn(proto, 'constructor') && proto.constructor\n\n  return (\n    typeof Ctor === TYPES.FUNCTION &&\n    toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\n  )\n}\n\nexport default isPlainObject\n","import isUndefined from './isUndefined'\n\n/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n\n  if (hasOwnProperty) {\n    // 不建议直接实用对象从原型链继承的 hasOwnProperty() 方法\n    // 所以采用直接调用 Object.prototype.hasOwnProperty() 方法\n    return hasOwnProperty.call(obj, prop)\n  }\n\n  return (\n    // 从对象构造函数的原型链继承的同名属性不算 obj 自身的属性\n    !isUndefined(obj[prop]) && obj.constructor.prototype[prop] !== obj[prop]\n  )\n}\n\nexport default hasOwn\n","import isNumber from './isNumber'\n\n/**\n * 检测测试数据是否为整数\n * ========================================================================\n * @method isInteger\n * @category Lang\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是整数返回 true，否则返回 false\n */\nconst isInteger = (val) => {\n  return isNumber(val) && !isNaN(val) && Number(val) === val && val % 1 === 0\n}\n\nexport default isInteger\n","import isNumber from './isNumber'\nimport isString from './isString'\n\n/**\n * 检测测试数据是否是一个数字（只能是 number 类型或者 '123123' 这样的数字字符串）\n * ========================================================================\n * @method isNumeric\n * @category Lang\n * @param {Number|String} val - 要检测的数据\n * @returns {Boolean} 'val' 是一个数字返回 true，否则返回false\n */\nconst isNumeric = (val) => {\n  return (isNumber(val) || isString(val)) && !isNaN(val - parseFloat(val))\n}\n\nexport default isNumeric\n","// HTML 合法的标签\nconst TAGS = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'math',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rb',\n  'rp',\n  'rt',\n  'rtc',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'search',\n  'section',\n  'select',\n  'slot',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'svg',\n  'table',\n  'tbody',\n  'td',\n  'template',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr'\n]\n\nexport default TAGS\n","// Base\nimport is from '../is'\nimport isValue from '../isValue'\n// Primitive Values\nimport isNumber from '../isNumber'\nimport isString from '../isString'\nimport isBigInt from '../isBigInt'\nimport isBoolean from '../isBoolean'\nimport isUndefined from '../isUndefined'\nimport isNull from '../isNull'\nimport isSymbol from '../isSymbol'\n// Keyed Collections\nimport isSet from '../isSet'\nimport isMap from '../isMap'\n// Array\nimport isArray from '../isArray'\nimport isArrayLike from '../isArrayLike'\n// Function\nimport isFunction from '../isFunction'\nimport isConstructor from '../isConstructor'\n// Object\nimport isObject from '../isObject'\nimport isHash from '../isHash'\nimport isBuffer from '../isBuffer'\nimport isDate from '../isDate'\nimport isElement from '../isElement'\nimport isPromise from '../isPromise'\n// Number\nimport isFloat from '../isFloat'\nimport isInteger from '../isInteger'\nimport isNumeric from '../isNumeric'\n// String\nimport isEmpty from '../isEmpty'\nimport isEmail from '../isEmail'\nimport isURL from '../isURL'\nimport isHTML from '../isHTML'\nimport isGuid from '../isGuid'\nimport isIPAddress from '../isIPAddress'\nimport isPhoneNumber from '../isPhoneNumber'\n\nconst Types = {\n  is,\n  isValue,\n  isNumber,\n  isString,\n  isBigInt,\n  isBoolean,\n  isUndefined,\n  isNull,\n  isSymbol,\n  isSet,\n  isMap,\n  isArray,\n  isArrayLike,\n  isFunction,\n  isConstructor,\n  isObject,\n  isHash,\n  isBuffer,\n  isDate,\n  isElement,\n  isPromise,\n  isFloat,\n  isInteger,\n  isNumeric,\n  isEmpty,\n  isEmail,\n  isURL,\n  isHTML,\n  isGuid,\n  isIPAddress,\n  isPhoneNumber\n}\n\nexport default Types\n","import _type from './_type'\n\n/**\n * 检测数据类型，返回检测数据类型的字符串\n * ========================================================================\n * @method is\n * @category Lang\n * @param {*} val - 要检测的任意值\n * @see _type\n * @returns {String}\n */\nconst is = (val) => {\n  return _type(val)\n}\n\nexport default is\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为有效的数据\n * =============================================================\n * @method isValue\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是有效的数据返回 true，否则返回 false\n */\nconst isValue = (val) => {\n  const type = _type(val)\n\n  switch (type) {\n    case TYPES.NUMBER:\n      return isFinite(val)\n    case TYPES.NULL:\n    case TYPES.UNDEFINED:\n      return false\n    default:\n      return !!type\n  }\n}\n\nexport default isValue\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 BigInt 类型。\n * ========================================================================\n * @method isBigInt\n * @since 0.6.0\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 BigInt 类型，返回 true，否则返回 false\n */\nconst isBigInt = (val) => {\n  return _type(val) === TYPES.BIG_INT\n}\n\nexport default isBigInt\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Boolean 类型\n * ========================================================================\n * @method isBoolean\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Boolean 类型则返回 true，否则返回 false\n */\nconst isBoolean = (val) => {\n  return _type(val) === TYPES.BOOLEAN\n}\n\nexport default isBoolean\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 null\n * ========================================================================\n * @method isNull\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 null 返回 true，否则返回 false\n */\nconst isNull = (val) => {\n  return _type(val) === TYPES.NULL\n}\n\nexport default isNull\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Symbol 类型\n * ========================================================================\n * @method isSymbol\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Symbol 类型返回 true，否则返回 false\n */\nconst isSymbol = (val) => {\n  return _type(val) === TYPES.SYMBOL\n}\n\nexport default isSymbol\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Set 类型\n * ========================================================================\n * @method isSet\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Set 类型返回 true，否则返回 false\n */\nconst isSet = (val) => {\n  return _type(val) === TYPES.SET\n}\n\nexport default isSet\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Map 类型\n * ========================================================================\n * @method isMap\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Map 类型返回 true，否则返回 false\n */\nconst isMap = (val) => {\n  return _type(val) === TYPES.MAP\n}\n\nexport default isMap\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Array 类型\n * ========================================================================\n * @method isArray\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} - 'val' 是 Array 则返回 true，否则返回 false\n */\nconst isArray = (val) => {\n  return Array.isArray ? Array.isArray(val) : _type(val) === TYPES.ARRAY\n}\n\nexport default isArray\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为类似数组（array、arguments 对象或者\n * HTMLNodeList 对象）类型。\n * ========================================================================\n * @method isArrayLike\n * @param {*} val - 要检测是的数据\n * @returns {Boolean} 'val' 是 array、arguments 或者 HTMLNodeList 类型返回 true，否则返回 false\n */\nconst isArrayLike = (val) => {\n  const type = _type(val)\n\n  return (\n    type === TYPES.ARRAY ||\n    type === TYPES.ARGUMENTS ||\n    type === TYPES.COLLECTION\n  )\n}\n\nexport default isArrayLike\n","import isFunction from './isFunction'\nimport isNativeFunction from './isNativeFunction'\n\n/**\n * 检测测试函数是否为构造函数\n * ========================================================================\n * @method isConstructor\n * @category Lang\n * @param {Function|Object} fn - 要测试的（构造）函数\n * @returns {Boolean} - fn 是构造函数返回 true，否则返回 false;\n */\nconst isConstructor = (fn) => {\n  const proto = fn.prototype\n  let instance\n\n  if (!isFunction(fn) || !proto) {\n    return false\n  }\n\n  // 判断 fn 是否为 Promise 构造函数\n  if (isNativeFunction(fn) && proto?.then) {\n    instance = new fn((resolve, reject) => {})\n  } else {\n    instance = new fn()\n  }\n\n  // 判断 constructor\n  return (\n    (instance.constructor === fn && instance instanceof fn) ||\n    (instance.constructor === Object && instance instanceof Object)\n  )\n}\n\nexport default isConstructor\n","import isFunction from './isFunction'\n\n/**\n * 检测测试数据是否为 JavaScript 内置函数\n * ========================================================================\n * @method isNativeFunction\n * @param {Function|Object} fn - 要测试的函数\n * @returns {Boolean} - fn 是内置函数返回 true，否则返回 false;\n */\nconst isNativeFunction = (fn) => {\n  return isFunction(fn) && /\\{\\s*\\[native code\\]\\s*\\}/.test('' + fn)\n}\n\nexport default isNativeFunction\n","import isPlainObject from './isPlainObject'\n\n/**\n * 检测测试数据是否为空（单体）对象\n * ========================================================================\n * @method isHash\n * @alias isPlainObject\n * @since 0.4.0\n * @category Lang\n * @param {Object} obj - 要检测的数据\n * @returns {Boolean} 'val' 是普通对象返回 true，否则返回 false\n */\nconst isHash = (obj) => {\n  return isPlainObject(obj)\n}\n\nexport default isHash\n","/**\r\n * 验证数据是否为 Buffer 类型\r\n * ========================================================================\r\n * @method isBuffer\r\n * @since 1.6.0\r\n * @category Lang\r\n * @param {*} val - 待检测的数据\r\n * @returns {Boolean} 'val' 是 Buffer 类型返回 true，否则返回 false\r\n */\r\nconst isBuffer = (val) => {\r\n  // Node.js 环境检测 `global`\r\n  const Global =\r\n    typeof global === 'object' &&\r\n    global !== null &&\r\n    global.Object === Object &&\r\n    global\r\n\r\n  // 检测 `globalThis`\r\n  const GlobalThis =\r\n    typeof globalThis === 'object' &&\r\n    globalThis !== null &&\r\n    globalThis.Object === Object &&\r\n    globalThis\r\n\r\n  // 检测 `self`\r\n  const Self =\r\n    typeof self === 'object' && self !== null && self.Object === Object && self\r\n\r\n  // 应用之前检测的 `global object` 的引用\r\n  const _Global = GlobalThis || Global || Self || Function('return this')()\r\n\r\n  // 检测 `exports`\r\n  const Exports =\r\n    typeof exports === 'object' &&\r\n    exports !== null &&\r\n    !exports.nodeType &&\r\n    exports\r\n\r\n  // 检测 `module`\r\n  const Module =\r\n    Exports &&\r\n    typeof module === 'object' &&\r\n    module !== null &&\r\n    !module.nodeType &&\r\n    module\r\n\r\n  // 检测 `module.exports`\r\n  const ModuleExports = Module && Module.exports === Exports\r\n\r\n  // 获取 Buffer 对象的引用\r\n  const Buffer = ModuleExports ? _Global.Buffer : undefined\r\n\r\n  // 获取 isBuffer() 方法\r\n  const detectBuffer = Buffer ? Buffer.isBuffer : () => false\r\n\r\n  return detectBuffer(val)\r\n}\r\n\r\nexport default isBuffer\r\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 Date 类型\n * ========================================================================\n * @method isDate\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 Date 类型返回 true，否则返回 false\n */\nconst isDate = (val) => {\n  return (\n    _type(val) === TYPES.DATE &&\n    val.toString() !== 'Invalid Date' &&\n    !isNaN(val)\n  )\n}\n\nexport default isDate\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 HTML 元素节点。\n * ========================================================================\n * @method isElement\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 HTML 元素节点返回 true，否则返回 false\n */\nconst isElement = (val) => {\n  return _type(val) === TYPES.ELEMENT\n}\n\nexport default isElement\n","import _type from './_type'\nimport isObject from './isObject'\nimport TYPES from './enum/types'\n\n/**\n * 检测数据是否为 Promise 对象\n * ========================================================================\n * @method isPromise\n * @since 1.3.0\n * @category Lang\n * @param {Object} val - 测试数据\n * @returns {Boolean} 'val' 是 Promise 对象，返回 true，否则返回 false\n */\nconst isPromise = (val) => {\n  return isObject(val) && _type(val) === TYPES.PROMISE\n}\n\nexport default isPromise\n","import isNumber from './isNumber'\nimport isInteger from './isInteger'\n\n/**\n * 检测测试数据是否为整数\n * ========================================================================\n * @method isFloat\n * @category Lang\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是整数返回 true，否则返回 false\n */\nfunction isFloat(val) {\n  return (\n    isNumber(val) &&\n    !isNaN(val) &&\n    isFinite(val) &&\n    !isInteger(val) &&\n    Number(val) === val &&\n    val % 1 !== 0\n  )\n}\n\nexport default isFloat\n","import isString from './isString'\n\n/**\n * 检测测试数据是否为空字符串\n * ========================================================================\n * @method isEmpty\n * @category Lang\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 是空字符串返回 true，否则返回 false\n */\nconst isEmpty = (val) => {\n  return isString(val) && val === ''\n}\n\nexport default isEmpty\n","import isString from './isString'\n\n/**\n * 检测是否为正确的 Email 邮箱地址格式\n * ========================================================================\n * @method isEmail\n * @category Lang\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Email 邮箱地址格式，返回 true，否则返回 false\n */\nconst isEmail = (val) => {\n  const pattern =\n    /^([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)$/\n  return isString(val) && pattern.test(val)\n}\n\nexport default isEmail\n","import isString from './isString'\n\n/**\n * 判断字符串是否为有效的 URL 地址\n * ========================================================================\n * @method isURL\n * @category Lang\n * @param {String} str - 要检测的字符串\n * @returns {Boolean}\n */\nconst isURL = (str) => {\n  const protocol = '(https?:)?'\n  const user = '([^\\\\/\\\\?\\\\#\\\\:]+)'\n  const password = '(.+)'\n  const auth = '(' + user + ':' + password + '@)?'\n  const domain = '(([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*(\\\\.)?)+[a-z]{2,})'\n  const ip = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})'\n  const port = '(\\\\:\\\\d+)?'\n  const path = '(\\\\/[-a-z\\\\d%_.~+]*)*'\n  const search = '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'\n  const hash = '(\\\\#[-a-z\\\\d_]*)?'\n  const url =\n    '^' +\n    protocol +\n    '\\\\/\\\\/' +\n    auth +\n    '(' +\n    domain +\n    '|' +\n    ip +\n    ')' +\n    port +\n    path +\n    search +\n    hash +\n    '$'\n  const pattern = new RegExp(url, 'i')\n\n  return isString(str) && !!pattern.test(str)\n}\n\nexport default isURL\n","import isString from './isString'\nimport trim from './trim'\nimport TAGS from './enum/tags'\n\n/**\n * 检测测试数据是否为合法的 HTML 代码\n * ========================================================================\n * @method isHTML\n * @since 0.5.0\n * @category Lang\n * @see https://github.com/sindresorhus/html-tags\n * @see https://github.com/sindresorhus/is-html\n * @param {String} str - 要检测的数据\n * @returns {Boolean} 'val' 为合法的 HTML 代码，返回 true，否则返回 false\n */\nconst isHTML = (str) => {\n  let html\n  let basic\n  let full\n\n  if (!isString(str)) {\n    return false\n  }\n\n  // 为了提高性能，我们将其限制在合理的长度内。\n  html = trim(str).slice(0, 1000)\n  basic = /\\s*<!doctype html>|<html\\b[^>]*>|<body\\b[^>]*>|<x-[^>]+>/i\n  full = new RegExp(TAGS.map((tag) => `<${tag}\\\\b[^>]*>`).join('|'), 'i')\n\n  return basic.test(html) || full.test(html)\n}\n\nexport default isHTML\n","const trim = (str) => {\n  /* istanbul ignore else */\n  if (str.trim) {\n    return str.trim()\n  }\n\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nexport default trim\n","import isString from './isString'\n\n/**\n * 检测测试数据是否为 Guid 格式字符串\n * ========================================================================\n * @method isGuid\n * @since 1.4.0\n * @category Lang\n * @param {String} str - 待检测数据（字符串）\n * @returns {Boolean} 'val' 是 Guid 格式字符串，返回 true，否则返回 false\n */\nconst isGuid = (str) => {\n  const patternWithHyphens =\n    /^{?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}}?$/gi\n  const patternWithoutHyphens =\n    /^{?[0-9a-fA-F]{8}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{12}}?$/gi\n\n  let guid\n\n  if (!isString(str)) {\n    return false\n  }\n\n  guid = str.replace(/^[{}]$/i, '')\n\n  return patternWithHyphens.test(guid) || patternWithoutHyphens.test(guid)\n}\n\nexport default isGuid\n","import isString from './isString'\n\n/**\n * 验证是否为（v4 or v6） IP 地址\n * ========================================================================\n * @method isIPAddress\n * @category Lang\n * @param {String} str - 待检测的数据（字符串）\n * @returns {Boolean} 'val' 是 IP 地址返回 true，否则返回 false\n */\nconst isIPAddress = (str) => {\n  const ipV6 =\n    /(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]+|::(ffff(:0{1,4})?:)?((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d)|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d))/\n  const ipV4 =\n    /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/\n  return isString(str) && (ipV4.test(str) || ipV6.test(str))\n}\n\nexport default isIPAddress\n","import isString from './isString'\n\n/**\n * 检测是否为电话号码\n * ========================================================================\n * @method isPhoneNumber\n * @category Lang\n * @param {String} str - 要检测的数据\n * @returns {Boolean} 'val' 是 电话号码 格式，返回 true，否则返回 false\n *\n * @example\n * // 移动电话号码\n * isPhoneNumber(13901030304) // -> false\n * isPhoneNumber('1390103030a') // => false\n *\n * isPhoneNumber('+86 13901030304')\n * isPhoneNumber('13901030304')\n * isPhoneNumber('139-010-30304')\n * isPhoneNumber('139.010.30304')\n *\n * // 固定电话号码\n * isPhoneNumber('+86 84923296') // -> true\n * isPhoneNumber('027 84923296') // -> true\n * isPhoneNumber('(027) 84923296') // -> true\n * isPhoneNumber('(027)84923296') // -> true\n * isPhoneNumber('027-84923296') // -> true\n * isPhoneNumber('027.84923296') // -> true\n * isPhoneNumber('027 849-23296') // -> true\n * isPhoneNumber('027-849-23296') // -> true\n */\nconst isPhoneNumber = (str) => {\n  const pattern =\n    /^\\+?\\(?(\\d{2,3})?\\)?[-\\s.]?((\\d{3}[-\\s.]?\\d{4,6})|(\\d{11}))$/im\n  return isString(str) && pattern.test(str)\n}\n\nexport default isPhoneNumber\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","isNumber","isString","obj","isUndefined","isFunction","isObject","isPlainObject","proto","Ctor","prop","hasOwnProperty","call","constructor","hasOwn","isInteger","isNaN","Number","TAGS","is","isValue","isFinite","isBigInt","isBoolean","isNull","isSymbol","isSet","isMap","isArray","Array","isArrayLike","isConstructor","fn","instance","test","isNativeFunction","then","resolve","reject","isHash","isBuffer","Global","global","GlobalThis","globalThis","Self","self","_Global","Function","Exports","exports","Module","module","Buffer","undefined","isDate","isElement","isPromise","isFloat","isNumeric","parseFloat","isEmpty","isEmail","isURL","str","pattern","RegExp","isHTML","html","basic","full","trim","replace","slice","map","tag","join","isGuid","guid","isIPAddress","isPhoneNumber"],"mappings":"sOACA,MAAMA,EAEK,SAFLA,EAGK,UAHLA,EAIE,OAJFA,EAKI,SALJA,EAMO,YANPA,EAOI,SAPJA,EAQI,SARJA,EAUC,MAVDA,EAYC,MAZDA,EAeG,QAfHA,EAgBO,YAhBPA,EAgCI,SAhCJA,EAiCQ,aAjCRA,EAkCE,OAlCFA,EAmCK,UAnCLA,EAsCM,WAtCNA,EAuCK,UCrCLC,EAAU,CAEd,gBAAiBD,EAEjB,eAAgBA,EAChB,mBDIU,UCHV,eAAgBA,EAChB,mBDIU,UCFV,iBAAkBA,EAClB,qBAAsBA,EAEtB,oBDIW,WCHX,uBDIc,cCHd,qBDIY,YCHZ,sBDIa,aCHb,6BDIqB,oBCHrB,sBDIa,aCHb,uBDIc,cCHd,sBDIa,aCHb,uBDIc,cCHd,wBDIe,eCHf,wBDIe,eCHf,yBDIiB,gBCHjB,0BDIkB,iBCFlB,kBAAmBA,EACnB,mBAAoBA,EACpB,kBAAmBA,EACnB,kBAAmBA,EACnB,gBAAiBA,EACjB,iBDGO,QCFP,4BDGU,WCFV,oBAAqBA,EACrB,oBAAqBA,EACrB,mBAAoBA,EACpB,kBDEQ,SCDR,gBDEM,QEhCFE,EAASC,IACb,MAAMC,EAAOC,OAAOC,UAAUC,SAASC,MAAML,GACvCM,SAAiBN,EACvB,IAAIO,EAGJ,GAAIP,GAAKQ,SAA4B,IAAjBR,EAAIS,SACtBF,EAAOV,OAGP,OAAQS,GACN,IAAK,SACHC,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,UACHU,EAAOV,EACP,MACF,IAAK,YACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MAEF,QACEU,EAAOT,EAAQG,GAKrB,OAAOM,GAAQN,GCnCXS,EAAYV,GACTD,EAAMC,KAASH,ECDlBc,EAAYC,GACTb,EAAMa,KAASf,ECDlBgB,EAAeb,GACZD,EAAMC,KAASH,ECDlBiB,EAAcd,GACLD,EAAMC,KACHH,ECFZkB,EAAYf,MAGNA,UAFUA,IAEOH,IAAgBiB,EAAWd,ICHlDgB,EAAiBhB,IACrB,MAAMI,EAAWF,OAAOC,UAAUC,SAClC,IAAIa,EACAC,EAGJ,QAAKH,EAASf,KAIdiB,EAAQjB,EAAIG,WAEPc,IAILC,ECjBa,EAACN,EAAKO,KACnB,MAAMC,EAAiBlB,OAAOC,UAAUiB,eAExC,OAAIA,EAGKA,EAAeC,KAAKT,EAAKO,IAK/BN,EAAYD,EAAIO,KAAUP,EAAIU,YAAYnB,UAAUgB,KAAUP,EAAIO,EACpE,EDKMI,CAAON,EAAO,gBAAkBA,EAAMK,mBAGpCJ,IAASrB,GAChBO,EAASiB,KAAKH,KAAU,CAAA,EAAGE,eAAehB,SAASiB,KAAKnB,SACzD,EEtBGsB,EAAaxB,GACVU,EAASV,KAASyB,MAAMzB,IAAQ0B,OAAO1B,KAASA,GAAOA,EAAM,GAAM,ECA5E,MCVM2B,EAAO,CACX,IACA,OACA,UACA,OACA,UACA,QACA,QACA,IACA,OACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,KACA,KACA,KACA,QACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,SACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,OACA,MACA,OACA,OACA,OACA,WACA,OACA,QACA,MACA,WACA,SACA,KACA,WACA,SACA,SACA,IACA,QACA,UACA,MACA,WACA,IACA,KACA,KACA,KACA,MACA,OACA,IACA,OACA,SACA,SACA,UACA,SACA,OACA,QACA,SACA,OACA,SACA,QACA,MACA,UACA,MACA,MACA,QACA,QACA,KACA,WACA,WACA,QACA,KACA,QACA,OACA,QACA,KACA,QACA,IACA,KACA,MACA,QACA,aC/EY,CACZC,GC9BU5B,GACHD,EAAMC,GD8Bb6B,QEhCe7B,IACf,MAAMC,EAAOF,EAAMC,GAEnB,OAAQC,GACN,KAAKJ,EACH,OAAOiC,SAAS9B,GAClB,KAAKH,EACL,KAAKA,EACH,OAAO,EACT,QACE,QAASI,EACZ,EFsBDS,WACAC,WACAoB,SGjCgB/B,GACTD,EAAMC,KAASH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"}