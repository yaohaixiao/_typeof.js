{"version":3,"file":"types.object.min.js","sources":["enum/types.js","enum/objects.js","_type.js","isNumber.js","isInteger.js","isInfinite.js","_getExactTypeOfNumber.js","isFloat.js","isString.js","isBlank.js","isBase64.js","enum/tags.js","_isTime.js","_isDate.js","_getExactTypeOfString.js","isUUID.js","isEmpty.js","isChinese.js","isEmail.js","isIPAddress.js","isHex.js","isHTML.js","trim.js","isSVG.js","isJSON.js","isTime.js","isFunction.js","isPrototype.js","hasOwn.js","isUndefined.js","isObject.js","isVNode.js","isXML.js","isObjectLike.js","isElement.js","isHTMLCollection.js","isFragment.js","isTextNode.js","isPlainObject.js","object/index.js","_getTypes.js","is.js","_getExactTypeOfObject.js","isValue.js","isArray.js","isArrayLike.js","isArguments.js","isDOM.js","isEmptyObject.js","isHash.js","isConstructor.js","isNativeFunction.js","isDate.js","isDataView.js","isError.js","isRegExp.js","isPromise.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\nconst TYPES = {\n  /* ===== Primitive data types ===== */\n  BIG_INT: 'bigint',\n  BOOLEAN: 'boolean',\n  NULL: 'null',\n  NUMBER: 'number',\n  UNDEFINED: 'undefined',\n  STRING: 'string',\n  SYMBOL: 'symbol',\n  /* ===== Keyed Collections ===== */\n  SET: 'set',\n  WEAK_SET: 'weakset',\n  MAP: 'map',\n  WEAK_MAP: 'weakmap',\n  /* ===== Array ===== */\n  ARRAY: 'array',\n  ARGUMENTS: 'arguments',\n  /* ===== Typed Arrays ===== */\n  DATA_VIEW: 'dataview',\n  ARRAY_BUFFER: 'arraybuffer',\n  INT8_ARRAY: 'int8array',\n  UNIT8_ARRAY: 'uint8array',\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\n  INT16_ARRAY: 'int16array',\n  UNIT16_ARRAY: 'uint16array',\n  INT32_ARRAY: 'int32array',\n  UNIT32_ARRAY: 'uint32array',\n  FLOAT32_ARRAY: 'float32array',\n  FLOAT64_ARRAY: 'float64array',\n  BIG_INT64_ARRAY: 'bigint64array',\n  BIG_UINT64_ARRAY: 'biguint64array',\n  /* ===== Object ===== */\n  OBJECT: 'object',\n  COLLECTION: 'collection',\n  DATE: 'date',\n  ELEMENT: 'element',\n  ERROR: 'error',\n  FRAGMENT: 'fragment',\n  FUNCTION: 'function',\n  PROMISE: 'promise',\n  REGEXP: 'regexp',\n  TEXT: 'text'\n}\n\nexport default TYPES\n","import TYPES from './types'\n\n// Object.prototype.toString() 输出的类型名称枚举值\nconst OBJECTS = {\n  /* ===== Primitive data types ===== */\n  '[object Null]': TYPES.NULL,\n  /* ===== Keyed Collections ===== */\n  '[object Set]': TYPES.SET,\n  '[object WeakSet]': TYPES.WEAK_SET,\n  '[object Map]': TYPES.MAP,\n  '[object WeakMap]': TYPES.WEAK_MAP,\n  /* ===== Array ===== */\n  '[object Array]': TYPES.ARRAY,\n  '[object Arguments]': TYPES.ARGUMENTS,\n  /* ===== Typed Arrays ===== */\n  '[object DataView]': TYPES.DATA_VIEW,\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\n  '[object Int8Array]': TYPES.INT8_ARRAY,\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\n  '[object Int16Array]': TYPES.INT16_ARRAY,\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\n  '[object Int32Array]': TYPES.INT32_ARRAY,\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\n  /* ===== Object ===== */\n  '[object Object]': TYPES.OBJECT,\n  '[object Boolean]': TYPES.OBJECT,\n  '[object String]': TYPES.OBJECT,\n  '[object Number]': TYPES.OBJECT,\n  '[object Date]': TYPES.DATE,\n  '[object Error]': TYPES.ERROR,\n  '[object DocumentFragment]': TYPES.FRAGMENT,\n  '[object Function]': TYPES.FUNCTION,\n  '[object NodeList]': TYPES.COLLECTION,\n  '[object Promise]': TYPES.PROMISE,\n  '[object RegExp]': TYPES.REGEXP,\n  '[object Text]': TYPES.TEXT\n}\n\nexport default OBJECTS\n","import TYPES from './enum/types'\nimport OBJECTS from './enum/objects'\n\n/**\n * 检测数据类型，返回检测数据类型的字符串\n * ========================================================================\n * @method _type\n * @param {*} val - 要检测的任意值\n * @returns {String}\n */\nconst _type = (val) => {\n  const type = Object.prototype.toString.apply(val)\n  const _typeof = typeof val\n  let name\n\n  // HTMLElement\n  if (val?.tagName && val.nodeType === 1) {\n    name = TYPES.ELEMENT\n  } else {\n    /* ===== 原始值类型（Primitive data types） ===== */\n    switch (_typeof) {\n      case 'bigint':\n        name = TYPES.BIG_INT\n        break\n      case 'string':\n        name = TYPES.STRING\n        break\n      case 'number':\n        name = TYPES.NUMBER\n        break\n      case 'boolean':\n        name = TYPES.BOOLEAN\n        break\n      case 'undefined':\n        name = TYPES.UNDEFINED\n        break\n      case 'symbol':\n        name = TYPES.SYMBOL\n        break\n      // 对象（引用）类型的数据\n      default:\n        name = OBJECTS[type]\n        break\n    }\n  }\n\n  return name || type\n}\n\nexport default _type\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Number 类型\n * ========================================================================\n * @method isNumber\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Number 类型，返回 true，否则返回 false\n */\nconst isNumber = (val) => {\n  return _type(val) === TYPES.NUMBER\n}\n\nexport default isNumber\n","import isNumber from './isNumber'\n\n/**\n * 检测测试数据是否为整数\n * ========================================================================\n * @method isInteger\n * @category Lang\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是整数，返回 true，否则返回 false\n */\nconst isInteger = (val) => {\n  return isNumber(val) && !isNaN(val) && Number(val) === val && val % 1 === 0\n}\n\nexport default isInteger\n","import isNumber from './isNumber'\n\n/**\n * 检测测试数据的数据是正无穷或者负无穷\n * ========================================================================\n * @method isInfinite\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是正无穷或者负无穷，返回 true，否则返回 false\n */\nconst isInfinite = (val) => {\n  return isNumber(val) && (val === Infinity || val === -Infinity)\n}\n\nexport default isInfinite\n","import isInteger from './isInteger'\r\nimport isFloat from './isFloat'\r\nimport isInfinite from './isInfinite'\r\n\r\n/**\r\n * （私有方法）获取确切的数值类型\r\n * ========================================================================\r\n * @method _getExactTypeOfNumber\r\n * @private\r\n * @param {Number} val - 要检测的数值\r\n * @returns {String} - 返回数值类型：integer、float、infinite\r\n */\r\nconst _getExactTypeOfNumber = (val) => {\r\n  let name = 'number'\r\n\r\n  if (isInteger(val)) {\r\n    name = 'integer'\r\n  } else if (isFloat(val)) {\r\n    name = 'float'\r\n  } else if (isInfinite(val)) {\r\n    name = 'infinite'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default _getExactTypeOfNumber\r\n","import isNumber from './isNumber'\nimport isInteger from './isInteger'\n\n/**\n * 检测测试数据是否为整数\n * ========================================================================\n * @method isFloat\n * @category Lang\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是整数，返回 true，否则返回 false\n */\nfunction isFloat(val) {\n  return (\n    isNumber(val) &&\n    !isNaN(val) &&\n    isFinite(val) &&\n    !isInteger(val) &&\n    Number(val) === val &&\n    val % 1 !== 0\n  )\n}\n\nexport default isFloat\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为字符串\n * ========================================================================\n * @method isString\n * @category Lang\n * @param {*} obj - 要检测的数据\n * @returns {Boolean} 'val' 是字符串，返回 true，否则返回 false\n */\nconst isString = (obj) => {\n  return _type(obj) === TYPES.STRING\n}\n\nexport default isString\n","import isString from './isString'\n\n/**\n * 检测测试数据是否只包空格\n * ========================================================================\n * @method isBlank\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 只包含空格，返回 true，否则返回 false\n */\nfunction isBlank(val) {\n  if (!isString(val)) {\n    return false\n  }\n\n  return /^\\s*$/.test(val)\n}\n\nexport default isBlank\n","import isString from './isString'\n\n/**\n * 检测测试数据是否为一个基于 base64 编码的字符串。\n * ========================================================================\n * @method isBase64\n * @param {String} val - 要检测的数据\n * @return {Boolean} 'val' 是 base64 编码的字符串，返回 true，否则返回 false\n */\nconst isBase64 = (val) => {\n  const REGEXP_BASE64 =\n    /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}={2})$/gm\n  return isString(val) && (!val.length || REGEXP_BASE64.test(val))\n}\n\nexport default isBase64\n","// HTML 合法的标签\nconst TAGS = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'math',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rb',\n  'rp',\n  'rt',\n  'rtc',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'search',\n  'section',\n  'select',\n  'slot',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'svg',\n  'table',\n  'tbody',\n  'td',\n  'template',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr'\n]\n\nexport default TAGS\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为有效的时间（字符串）\r\n * ========================================================================\r\n * @method _isTime\r\n * @private\r\n * @param {String} str - 待检测数据（字符串）\r\n * @returns {Boolean}\r\n */\r\nconst _isTime = (str) => {\r\n  const pattern12Hours = /^(0?[1-9]|1[0-2]):[0-5]\\d(\\s(am|pm|AM|PM))?$/\r\n  const pattern24Hours = /^(0?[1-9]|2[0-3]):([0-5]\\d){1,2}$/\r\n\r\n  return isString(str) && (pattern12Hours.test(str) || pattern24Hours.test(str))\r\n}\r\n\r\nexport default _isTime\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为有效的日期（字符串）\r\n * ========================================================================\r\n * @method _isDate\r\n * @private\r\n * @param {String} str - 待检测数据（字符串）\r\n * @returns {Boolean}\r\n */\r\nconst _isDate = (str) => {\r\n  return isString(str) && !isNaN(Date.parse(str))\r\n}\r\n\r\nexport default _isDate\r\n","import isBlank from './isBlank'\r\nimport isBase64 from './isBase64'\r\nimport isChinese from './isChinese'\r\nimport isEmail from './isEmail'\r\nimport isEmpty from './isEmpty'\r\nimport isUUID from './isUUID'\r\nimport isIPAddress from './isIPAddress'\r\nimport isHex from './isHex'\r\nimport isHTML from './isHTML'\r\nimport isSVG from './isSVG'\r\nimport isJSON from './isJSON'\r\nimport isTime from './isTime'\r\n\r\n/**\r\n * （私有方法）获取确切的字符串类型\r\n * ========================================================================\r\n * @method _getExactTypeOfString\r\n * @private\r\n * @param {String} val - 要检测的字符串\r\n * @returns {String} 返回字符串类型：blank、chinese、email、empty... 等等\r\n */\r\nconst _getExactTypeOfString = (val) => {\r\n  let name = 'string'\r\n\r\n  if (isEmpty(val)) {\r\n    name = 'empty'\r\n  } else if (isBlank(val)) {\r\n    name = 'blank'\r\n  } else if (isUUID(val)) {\r\n    name = 'guid'\r\n  } else if (isBase64(val)) {\r\n    name = 'base64'\r\n  } else if (isChinese(val)) {\r\n    name = 'chinese'\r\n  } else if (isEmail(val)) {\r\n    name = 'email'\r\n  } else if (isIPAddress(val)) {\r\n    name = 'IP address'\r\n  } else if (isHex(val)) {\r\n    name = 'hex'\r\n  } else if (isHTML(val)) {\r\n    if (isSVG(val)) {\r\n      name = 'svg'\r\n    } else {\r\n      name = 'html'\r\n    }\r\n  } else if (isJSON(val)) {\r\n    name = 'json'\r\n  } else if (isTime(val)) {\r\n    name = 'time'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default _getExactTypeOfString\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为合法的 UUID 字符串\r\n * ========================================================================\r\n * @method isUUID\r\n * @since 2.1.0\r\n * @see https://stackoverflow.com/questions/7905929/how-to-test-valid-uuid-guid\r\n * @param {String} str - 要检测的数据\r\n * @returns {Boolean} 'str' 为合法的 UUID 字符串，返回 true，否则返回 false\r\n */\r\nconst isUUID = (str) => {\r\n  const pattern =\r\n    /^{?([0-9a-fA-F]{8})-?(([0-9a-fA-F]{4}-?){3})([0-9a-fA-F]{12})}?$/i\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  return pattern.test(str)\r\n}\r\n\r\nexport default isUUID\r\n","import isString from './isString'\n\n/**\n * 检测测试数据是否为空字符串\n * ========================================================================\n * @method isEmpty\n * @category Lang\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 是空字符串，返回 true，否则返回 false\n */\nconst isEmpty = (val) => {\n  return isString(val) && val === ''\n}\n\nexport default isEmpty\n","import isString from './isString'\n\n/**\n * 检测字符串是否为中文字符\n * ========================================================================\n * Wiki 介绍中文字符包含以下内容：\n *\n * 1. 中文汉字\n * 2. 象形文字扩展 A-H\n * 3. 兼容象形文字符\n * 4. 兼容表意文字增补字符\n * 5. 中文标点符号\n * 6. 兼容标点符号\n *\n * 其中：\n *\n * 兼容象形文字符：[0xf900, 0xfaff],（https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs）和\n * 兼容表意文字增补字符：[0x2f800, 0x2fa1f]（https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs_Supplement）\n *\n * 只是看上去像汉字，因此在 isChinese() 方法中也没有纳入到汉字字符\n * ========================================================================\n * @method isChinese\n * @since 1.2.0\n * @param {String} str - （必须）检测字符串\n * @param {Boolean} [includePunctuation] - （可选）是否包含标点符号：默认值：true\n * @returns {boolean} - ‘val’ 是中文字符，返回 true，否则返回 false;\n */\nconst isChinese = (str, includePunctuation = true) => {\n  // 转换成正则表达式\n  const toRegExp = (range) => {\n    const pattern = range\n      .map((range) => {\n        const rangeStart = range[0]\n        const rangeEnd = range[1]\n        const hexStart = rangeStart.toString(16)\n        const hexEnd = rangeEnd.toString(16)\n\n        if (rangeStart === rangeEnd) {\n          return `\\\\u{${hexStart}}`\n        }\n        return `[\\\\u{${hexStart}}-\\\\u{${hexEnd}}]`\n      })\n      .join('|')\n\n    return new RegExp(`^(?:${pattern})+$`, 'u')\n  }\n  // 文字\n  // https://en.wikipedia.org/wiki/CJK_Unified_Ideographs\n  const chineseIdeographs = [\n    // 中文汉字\n    [0x4e00, 0x9fff],\n\n    // 象形文字扩展 A - H\n    [0x3400, 0x4dbf],\n    [0x20000, 0x2a6df],\n    [0x2a700, 0x2b73f],\n    [0x2b740, 0x2b81f],\n    [0x2b820, 0x2ceaf],\n    [0x2ceb0, 0x2ebef],\n    [0x30000, 0x3134f],\n    [0x31350, 0x323af]\n  ]\n  // 标点符号\n  const chinesePunctuations = [\n    // ，\n    [0xff0c, 0xff0c],\n    // 。\n    [0x3002, 0x3002],\n    // ·\n    [0x00b7, 0x00b7],\n    // ×\n    [0x00d7, 0x00d7],\n    // —\n    [0x2014, 0x2014],\n    // ‘\n    [0x2018, 0x2018],\n    // ’\n    [0x2019, 0x2019],\n    // “\n    [0x201c, 0x201c],\n    // ”\n    [0x201d, 0x201d],\n    // …\n    [0x2026, 0x2026],\n    // 、\n    [0x3001, 0x3001],\n    // 《\n    [0x300a, 0x300a],\n    // 》\n    [0x300b, 0x300b],\n    // 『\n    [0x300e, 0x300e],\n    // 』\n    [0x300f, 0x300f],\n    // 【\n    [0x3010, 0x3010],\n    // 】\n    [0x3011, 0x3011],\n    // ！\n    [0xff01, 0xff01],\n    // （\n    [0xff08, 0xff08],\n    // ）\n    [0xff09, 0xff09],\n    // ：\n    [0xff1a, 0xff1a],\n    // ；\n    [0xff1b, 0xff1b],\n    // ？\n    [0xff1f, 0xff1f],\n    // ～\n    [0xff5e, 0xff5e],\n    // 兼容性标点符号\n    // https://en.wikipedia.org/wiki/CJK_Compatibility_Forms\n    [0xfe30, 0xfe4f]\n  ]\n  const asciiChars = /\\w+/\n\n  if (!isString(str)) {\n    return false\n  }\n\n  if (asciiChars.test(str)) {\n    return false\n  }\n\n  const pattern = includePunctuation\n    ? toRegExp(chineseIdeographs.concat(chinesePunctuations))\n    : toRegExp(chineseIdeographs)\n\n  return pattern.test(str)\n}\n\nexport default isChinese\n","import isString from './isString'\n\n/**\n * 检测是否为正确的 Email 邮箱地址格式\n * ========================================================================\n * @method isEmail\n * @category Lang\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Email 邮箱地址格式，返回 true，否则返回 false\n */\nconst isEmail = (val) => {\n  const pattern =\n    /^([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)$/\n  return isString(val) && pattern.test(val)\n}\n\nexport default isEmail\n","import isString from './isString'\n\n/**\n * 验证是否为（v4 or v6） IP 地址\n * ========================================================================\n * @method isIPAddress\n * @category Lang\n * @param {String} str - 待检测的数据（字符串）\n * @returns {Boolean} 'val' 是 IP 地址，返回 true，否则返回 false\n */\nconst isIPAddress = (str) => {\n  const ipV6 =\n    /(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]+|::(ffff(:0{1,4})?:)?((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d)|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d))/\n  const ipV4 =\n    /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/\n  return isString(str) && (ipV4.test(str) || ipV6.test(str))\n}\n\nexport default isIPAddress\n","import isString from './isString'\n\n/**\n * 检测测试数据是否为 16 进制编码的字符串\n * ========================================================================\n * @method isHex\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 是 16 进制编码的字符串，返回 true，否则返回 false\n */\nconst isHex = (val) => {\n  const REGEXP_HEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n  return isString(val) && REGEXP_HEX.test(val)\n}\n\nexport default isHex\n","import isString from './isString'\nimport trim from './trim'\nimport TAGS from './enum/tags'\n\n/**\n * 检测测试数据是否为合法的 HTML 代码\n * ========================================================================\n * @method isHTML\n * @since 0.5.0\n * @category Lang\n * @see https://github.com/sindresorhus/html-tags\n * @see https://github.com/sindresorhus/is-html\n * @param {String} str - 要检测的数据\n * @returns {Boolean} 'val' 为合法的 HTML 代码，返回 true，否则返回 false\n */\nconst isHTML = (str) => {\n  let html\n  let basic\n  let full\n\n  if (!isString(str)) {\n    return false\n  }\n\n  // 为了提高性能，我们将其限制在合理的长度内。\n  html = trim(str).slice(0, 1000)\n  basic = /\\s*<!doctype html>|<html\\b[^>]*>|<body\\b[^>]*>|<x-[^>]+>/i\n  full = new RegExp(TAGS.map((tag) => `<${tag}\\\\b[^>]*>`).join('|'), 'i')\n\n  return basic.test(html) || full.test(html)\n}\n\nexport default isHTML\n","const trim = (str) => {\n  /* istanbul ignore else */\n  if (str.trim) {\n    return str.trim()\n  }\n\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nexport default trim\n","import isString from './isString'\r\n\r\nconst isSVG = (str) => {\r\n  const declaration = '(?:<\\\\?xml[^>]*>\\\\s*)?'\r\n  const doctype =\r\n    '(?:<\\\\!doctype svg[^>]*\\\\s*(?:\\\\[?(?:\\\\s*<![^>]*>\\\\s*)*\\\\]?)*[^>]*>\\\\s*)?'\r\n  const content = '<svg[^>]*>[^]*<\\\\/svg>\\\\s*$'\r\n  const svg = `^\\\\s*${declaration}${doctype}${content}\\\\s*$`\r\n  const pattern = new RegExp(svg, 'i')\r\n\r\n  return isString(str) && pattern.test(str)\r\n}\r\n\r\nexport default isSVG\r\n","import isString from './isString'\nimport isBlank from './isBlank'\n\n/**\n * 检测测试数据是否为 JSON 格式字符串数据\n * ========================================================================\n * @method isJSON\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 是 JSON 格式字符串，返回 true，否则返回 false\n */\nconst isJSON = (val) => {\n  if (!isString(val) || isBlank(val) || !val) {\n    return false\n  }\n\n  val = val.replace(/\\\\(?:([\"\\\\/bfnrt])|(u[0-9a-fA-F]{4}))/g, '@')\n  val = val.replace(\n    /\"[\\w\\s]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?/g,\n    ']'\n  )\n  val = val.replace(/(?:^|:|,)(?:\\s*\\[)+/g, '')\n\n  return /^[\\],:{}\\s]*$/.test(val)\n}\n\nexport default isJSON\n","import _isTime from './_isTime'\nimport _isDate from './_isDate'\n\n/**\n * 检测测试数据是否为有效的时间（字符串）\n * ========================================================================\n * @method isTime\n * @since 1.4.0\n * @param {String} str - （必须）待测试的字符串\n * @param {String} [type] - 测试的时间类型：\n *                          time - 时间；\n *                          date - 日期；\n *                          不传 - 时间或者日期皆可\n * @returns {Boolean} 'val' 是有效的时间（字符串），返回 true，否则返回 false\n */\nconst isTime = (str, type) => {\n  switch (type) {\n    case 'time':\n      return _isTime(str)\n    case 'date':\n      return _isDate(str)\n    default:\n      return _isTime(str) || _isDate(str)\n  }\n}\n\nexport default isTime\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @category Lang\n * @param {*} val - （必须）待检测的数据\n * @returns {Boolean} 'val' 是 Function 类型，返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  const type = _type(val)\n  return type === TYPES.FUNCTION\n}\n\nexport default isFunction\n","import isFunction from './isFunction'\n\n/**\n * 判断是否为 prototype 对象\n * ========================================================================\n * @method isPrototype\n * @param {Function|Object} val - 要检测的数据\n * @returns {Boolean} 'val' 是 prototype 对象，返回 true，否则返回 false\n */\nconst isPrototype = (val) => {\n  const OP = Object.prototype\n  const Ctor = val ? val.constructor : null\n  const proto = (isFunction(Ctor) && Ctor.prototype) || OP\n\n  return val === proto\n}\n\nexport default isPrototype\n","import isUndefined from './isUndefined'\n\n/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n\n  if (hasOwnProperty) {\n    // 不建议直接实用对象从原型链继承的 hasOwnProperty() 方法\n    // 所以采用直接调用 Object.prototype.hasOwnProperty() 方法\n    return hasOwnProperty.call(obj, prop)\n  }\n\n  return (\n    // 从对象构造函数的原型链继承的同名属性不算 obj 自身的属性\n    !isUndefined(obj[prop]) && obj.constructor.prototype[prop] !== obj[prop]\n  )\n}\n\nexport default hasOwn\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否 undefined（未定义）\n * ========================================================================\n * @method isUndefined\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 undefined（未定义），返回 true，否则返回 false\n */\nconst isUndefined = (val) => {\n  return _type(val) === TYPES.UNDEFINED\n}\n\nexport default isUndefined\n","import isFunction from './isFunction'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为对象\n * ========================================================================\n * @method isObject\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为对象，返回 true，否则返回 false\n */\nconst isObject = (val) => {\n  const type = typeof val\n\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\n}\n\nexport default isObject\n","import hasOwn from './hasOwn'\nimport isObject from './isObject'\n\n/**\n * 判断是否未 VNode 对象\n * =============================================================\n * @method isVNode\n * @param {Object} node - 要检测的数据\n * @returns {Boolean} 'val' 是 VNode 类型，返回 true，否则返回 false\n */\nconst isVNode = (node) => {\n  return node !== null && isObject(node) && hasOwn(node, 'componentOptions')\n}\n\nexport default isVNode\n","/**\n * 检测是否为 XML 文档\n * ========================================================================\n * @method isXML\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 XML 文档，返回 true，否则返回 false\n */\nconst isXML = (val) => {\n  const documentElement = val && (val.ownerDocument || val).documentElement\n  return documentElement ? documentElement.nodeName !== 'HTML' : false\n}\n\nexport default isXML\n","import isObject from './isObject'\n\n/**\n * 检测测试数据是否为类似 Object 类型\n * ========================================================================\n * @method isObjectLike\n * @param {Object} val - 要检测的数据\n * @returns {Boolean} 'val' 是类似 Object 类型，返回 true，否则返回 false\n */\nconst isObjectLike = (val) => {\n  return isObject(val) && val !== null\n}\n\nexport default isObjectLike\n","import _type from './_type'\nimport isObject from './isObject'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 HTML 元素节点。\n * ========================================================================\n * @method isElement\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 HTML 元素节点，返回 true，否则返回 false\n */\nconst isElement = (val) => {\n  return !!(isObject(val) && _type(val) === TYPES.ELEMENT)\n}\n\nexport default isElement\n","import _type from './_type'\nimport isObject from './isObject'\nimport TYPES from './enum/types'\n\n/**\n * 检测数据的是否为 HTMLNodeList 对象\n * ========================================================================\n * @method isHTMLCollection\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 HTMLNodeList 对象，返回 true，否则返回 false\n */\nconst isHTMLCollection = (val) => {\n  return !!(isObject(val) && _type(val) === TYPES.COLLECTION)\n}\n\nexport default isHTMLCollection\n","import _type from './_type'\nimport isObject from './isObject'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 DocumentFragment 文档碎片。\n * ========================================================================\n * @method isFragment\n * @since 0.6.0\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 DocumentFragment 文档碎片，返回 true，否则返回 false\n */\nconst isFragment = (val) => {\n  return !!(isObject(val) && _type(val) === TYPES.FRAGMENT)\n}\n\nexport default isFragment\n","import _type from './_type'\nimport isObject from './isObject'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为文本节点\n * ========================================================================\n * @method isTextNode\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是文本节点，返回 true，否则返回 false\n */\nconst isTextNode = (val) => {\n  return !!(\n    isObject(val) &&\n    (_type(val) === TYPES.TEXT || (val.tagName && val.nodeType === 3))\n  )\n}\n\nexport default isTextNode\n","import isObjectLike from './isObjectLike'\n\n/**\n * 检测测试数据是否为普通对象\n * ========================================================================\n * @method isPlainObject\n * @param {Object} val - 要检测的数据\n * @returns {Boolean} 'val' 是普通对象，返回 true，否则返回 false\n */\nconst isPlainObject = (val) => {\n  const getPrototypeOf = Object.getPrototypeOf\n  let proto\n\n  // Detect obvious negatives\n  if (!isObjectLike(val)) {\n    return false\n  }\n\n  proto = val.prototype\n\n  // JavaScript 对象分为两种：普通对象和函数对象\n  // 普通对象：原型是 __proto__，没有 prototype 原型（属性）\n  // 函数对象：原型是 prototype ，prototype 只存在于函数对象上\n  if (!proto) {\n    return true\n  }\n\n  proto = val\n\n  while (getPrototypeOf(proto) !== null) {\n    proto = getPrototypeOf(proto)\n  }\n\n  return getPrototypeOf(val) === proto\n}\n\nexport default isPlainObject\n","import is from '../is'\nimport isValue from '../isValue'\nimport isArray from '../isArray'\nimport isArrayLike from '../isArrayLike'\nimport isArguments from '../isArguments'\nimport isObject from '../isObject'\nimport isObjectLike from '../isObjectLike'\nimport isDOM from '../isDOM'\nimport isEmptyObject from '../isEmptyObject'\nimport isHash from '../isHash'\nimport isPlainObject from '../isPlainObject'\nimport isPrototype from '../isPrototype'\nimport isFunction from '../isFunction'\nimport isConstructor from '../isConstructor'\nimport isDate from '../isDate'\nimport isDataView from '../isDataView'\nimport isError from '../isError'\nimport isRegExp from '../isRegExp'\nimport isElement from '../isElement'\nimport isHTMLCollection from '../isHTMLCollection'\nimport isFragment from '../isFragment'\nimport isPromise from '../isPromise'\nimport isTextNode from '../isTextNode'\nimport isVNode from '../isVNode'\nimport isXML from '../isXML'\n// _getTypes\nimport _getTypes from '../_getTypes'\n\nconst METHODS = {\n  is,\n  isValue,\n  isArray,\n  isArrayLike,\n  isArguments,\n  isObject,\n  isObjectLike,\n  isDOM,\n  isEmptyObject,\n  isHash,\n  isPlainObject,\n  isPrototype,\n  isFunction,\n  isConstructor,\n  isDate,\n  isDataView,\n  isError,\n  isRegExp,\n  isElement,\n  isHTMLCollection,\n  isFragment,\n  isPromise,\n  isTextNode,\n  isVNode,\n  isXML\n}\n\nconst Types = _getTypes(METHODS)\n\nexport default Types\n","const _getTypes = (METHODS) => {\n  const keys = Object.keys(METHODS)\n\n  const Types = function (val) {\n    const methods = {}\n    let value = val\n\n    keys.forEach((prop) => {\n      const fn = METHODS[prop]\n      methods[prop] = () => {\n        return fn(value)\n      }\n    })\n\n    return methods\n  }\n\n  keys.forEach((prop) => {\n    Types[prop] = METHODS[prop]\n  })\n\n  return Types\n}\n\nexport default _getTypes\n","import _type from './_type'\nimport _getExactTypeOfNumber from './_getExactTypeOfNumber'\nimport _getExactTypeOfString from './_getExactTypeOfString'\nimport _getExactTypeOfObject from './_getExactTypeOfObject'\n\n/**\n * 检测数据类型，返回检测数据类型的字符串\n * ========================================================================\n * @method is\n * @category Lang\n * @see _type\n * @param {*} val - 要检测的任意值\n * @returns {String} 返回确切的数据类型名称\n */\nconst is = (val) => {\n  const type = _type(val)\n  let name\n\n  switch (type) {\n    case 'number':\n      name = _getExactTypeOfNumber(val)\n      break\n    case 'string':\n      name = _getExactTypeOfString(val)\n      break\n    case 'object':\n      name = _getExactTypeOfObject(val)\n      break\n    default:\n      name = type\n      break\n  }\n\n  return name\n}\n\nexport default is\n","import isPrototype from './isPrototype'\r\nimport isVNode from './isVNode'\r\nimport isXML from './isXML'\r\n\r\n/**\r\n * （私有方法）获取确切的对象类型\r\n * ========================================================================\r\n * @method _getExactTypeOfString\r\n * @private\r\n * @param {String} val - 要检测的字符串\r\n * @returns {String} 返回对象类型：prototype、vnode、xml\r\n */\r\nconst _getExactTypeOfObject = (val) => {\r\n  let name = 'object'\r\n\r\n  if (isXML(val)) {\r\n    name = 'xml'\r\n  } else if (isVNode(val)) {\r\n    name = 'vnode'\r\n  } else if (isPrototype(val)) {\r\n    name = 'prototype'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default _getExactTypeOfObject\r\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为有效的数据\n * =============================================================\n * @method isValue\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是有效的数据，返回 true，否则返回 false\n */\nconst isValue = (val) => {\n  const type = _type(val)\n\n  switch (type) {\n    case TYPES.NUMBER:\n      return isFinite(val)\n    case TYPES.NULL:\n    case TYPES.UNDEFINED:\n      return false\n    default:\n      return !!type\n  }\n}\n\nexport default isValue\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Array 类型\n * ========================================================================\n * @method isArray\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} - 'val' 是 Array 类型，返回 true，否则返回 false\n */\nconst isArray = (val) => {\n  return Array.isArray ? Array.isArray(val) : _type(val) === TYPES.ARRAY\n}\n\nexport default isArray\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为类似数组（array、arguments 对象或者\n * HTMLNodeList 对象）类型。\n * ========================================================================\n * @method isArrayLike\n * @param {*} val - 要检测是的数据\n * @returns {Boolean} 'val' 是 array、arguments 或者 HTMLNodeList 类型返回 true，否则返回 false\n */\nconst isArrayLike = (val) => {\n  const type = _type(val)\n\n  return (\n    type === TYPES.ARRAY ||\n    type === TYPES.ARGUMENTS ||\n    type === TYPES.COLLECTION\n  )\n}\n\nexport default isArrayLike\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 arguments 对象\n * ========================================================================\n * @method isArguments\n * @param {*} val - 要检测的数据\n * @return {Boolean} ‘val’ 是 Arguments 对象，返回 true，否则返回 false;\n */\nfunction isArguments(val) {\n  return _type(val) === TYPES.ARGUMENTS\n}\n\nexport default isArguments\n","import isObject from './isObject'\r\nimport isElement from './isElement'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isFragment from './isFragment'\r\nimport isTextNode from './isTextNode'\r\n\r\nconst isDOM = (el) => {\r\n  return (\r\n    isObject(el) &&\r\n    (isElement(el) || isHTMLCollection(el) || isFragment(el) || isTextNode(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import isPlainObject from './isPlainObject'\nimport hasOwn from './hasOwn'\n\n/**\n * 检测测试数据是否为空（单体）对象\n * ========================================================================\n * @method isEmptyObject\n * @param {Object} obj - 要检测的数据\n * @returns {Boolean} 'val' 是空对象，返回 true，否则返回 false\n */\nconst isEmptyObject = (obj) => {\n  let prop\n\n  if (!isPlainObject(obj)) {\n    return false\n  }\n\n  for (prop in obj) {\n    /* istanbul ignore else */\n    if (hasOwn(obj, prop)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport default isEmptyObject\n","import isPlainObject from './isPlainObject'\n\n/**\n * 检测测试数据是否为空（单体）对象\n * ========================================================================\n * @method isHash\n * @alias isPlainObject\n * @since 0.4.0\n * @category Lang\n * @param {Object} obj - 要检测的数据\n * @returns {Boolean} 'val' 是普通对象，返回 true，否则返回 false\n */\nconst isHash = (obj) => {\n  return isPlainObject(obj)\n}\n\nexport default isHash\n","import isFunction from './isFunction'\nimport isNativeFunction from './isNativeFunction'\n\n/**\n * 检测测试函数是否为构造函数\n * ========================================================================\n * @method isConstructor\n * @category Lang\n * @param {Function|Object} fn - 要测试的（构造）函数\n * @returns {Boolean} - fn 是构造函数，返回 true，否则返回 false;\n */\nconst isConstructor = (fn) => {\n  const proto = fn.prototype\n  const constructor = fn.constructor\n  let instance\n\n  if (!isFunction(fn) || !proto) {\n    return false\n  }\n\n  if (\n    isNativeFunction(fn) &&\n    (constructor === Function || constructor === fn)\n  ) {\n    return true\n  }\n\n  // 判断 fn 是否为 Promise 构造函数\n  instance = new fn()\n\n  // 判断 constructor\n  return (\n    (instance.constructor === fn && instance instanceof fn) ||\n    (instance.constructor === Object && instance instanceof Object)\n  )\n}\n\nexport default isConstructor\n","import isFunction from './isFunction'\n\n/**\n * 检测测试数据是否为 JavaScript 内置函数\n * ========================================================================\n * @method isNativeFunction\n * @param {Function|Object} fn - 要测试的函数\n * @returns {Boolean} - fn 是内置函数，返回 true，否则返回 false;\n */\nconst isNativeFunction = (fn) => {\n  return isFunction(fn) && /\\{\\s*\\[native code\\]\\s*\\}/.test('' + fn)\n}\n\nexport default isNativeFunction\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 Date 类型\n * ========================================================================\n * @method isDate\n * @category Lang\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 Date 类型，返回 true，否则返回 false\n */\nconst isDate = (val) => {\n  return (\n    _type(val) === TYPES.DATE &&\n    val.toString() !== 'Invalid Date' &&\n    !isNaN(val)\n  )\n}\n\nexport default isDate\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 DataView 类型\n * ========================================================================\n * @method isDataView\n * @param {*} val - 要检测的数据\n * @return {Boolean} 'val' 是 DataView 类型，返回 true，否则返回 false\n */\nconst isDataView = (val) => {\n  return _type(val) === TYPES.DATA_VIEW\n}\n\nexport default isDataView\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Error 类型\n * ========================================================================\n * @method isError\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Error 类型，返回 true，否则返回 false\n */\nconst isError = (val) => {\n  return _type(val) === TYPES.ERROR\n}\n\nexport default isError\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为正则表达式\n * ========================================================================\n * @method isRegExp\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是正则表达式，返回 true，否则返回 false\n */\nconst isRegExp = (val) => {\n  return _type(val) === TYPES.REGEXP\n}\n\nexport default isRegExp\n","import _type from './_type'\nimport isObject from './isObject'\nimport TYPES from './enum/types'\n\n/**\n * 检测数据是否为 Promise 对象\n * ========================================================================\n * @method isPromise\n * @since 1.3.0\n * @category Lang\n * @param {Object} val - 测试数据\n * @returns {Boolean} 'val' 是 Promise 对象，返回 true，否则返回 false\n */\nconst isPromise = (val) => {\n  return isObject(val) && _type(val) === TYPES.PROMISE\n}\n\nexport default isPromise\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","isNumber","isInteger","isNaN","Number","_getExactTypeOfNumber","isFinite","isFloat","Infinity","isInfinite","isString","obj","isBlank","test","TAGS","_isTime","str","_isDate","Date","parse","_getExactTypeOfString","isEmpty","length","isBase64","includePunctuation","toRegExp","range","pattern","map","rangeStart","rangeEnd","hexStart","hexEnd","join","RegExp","chineseIdeographs","concat","isChinese","isEmail","isIPAddress","isHex","html","basic","full","trim","replace","slice","tag","isHTML","isSVG","isJSON","isTime","isFunction","isPrototype","OP","Ctor","constructor","proto","hasOwn","prop","hasOwnProperty","call","isObject","isVNode","node","isXML","documentElement","ownerDocument","nodeName","isObjectLike","isElement","isHTMLCollection","isFragment","isTextNode","isPlainObject","getPrototypeOf","Types","METHODS","keys","methods","value","forEach","fn","_getTypes","is","_getExactTypeOfObject","isValue","isArray","Array","isArrayLike","isArguments","isDOM","el","isEmptyObject","isHash","isConstructor","instance","isNativeFunction","Function","isDate","isDataView","isError","isRegExp","isPromise"],"mappings":"sOACA,MAAMA,EAEK,SAFLA,EAGK,UAHLA,EAIE,OAJFA,EAKI,SALJA,EAMO,YANPA,EAOI,SAPJA,EAQI,SARJA,EAeG,QAfHA,EAgBO,YAhBPA,EAkBO,WAlBPA,EAgCI,SAhCJA,EAiCQ,aAjCRA,EAkCE,OAlCFA,EAmCK,UAnCLA,EAoCG,QApCHA,EAqCM,WArCNA,EAsCM,WAtCNA,EAuCK,UAvCLA,EAwCI,SAxCJA,EAyCE,OCvCFC,EAAU,CAEd,gBAAiBD,EAEjB,eDIK,MCHL,mBDIU,UCHV,eDIK,MCHL,mBDIU,UCFV,iBAAkBA,EAClB,qBAAsBA,EAEtB,oBAAqBA,EACrB,uBDIc,cCHd,qBDIY,YCHZ,sBDIa,aCHb,6BDIqB,oBCHrB,sBDIa,aCHb,uBDIc,cCHd,sBDIa,aCHb,uBDIc,cCHd,wBDIe,eCHf,wBDIe,eCHf,yBDIiB,gBCHjB,0BDIkB,iBCFlB,kBAAmBA,EACnB,mBAAoBA,EACpB,kBAAmBA,EACnB,kBAAmBA,EACnB,gBAAiBA,EACjB,iBAAkBA,EAClB,4BAA6BA,EAC7B,oBAAqBA,EACrB,oBAAqBA,EACrB,mBAAoBA,EACpB,kBAAmBA,EACnB,gBAAiBA,GC9BbE,EAASC,IACb,MAAMC,EAAOC,OAAOC,UAAUC,SAASC,MAAML,GACvCM,SAAiBN,EACvB,IAAIO,EAGJ,GAAIP,GAAKQ,SAA4B,IAAjBR,EAAIS,SACtBF,EAAOV,OAGP,OAAQS,GACN,IAAK,SACHC,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,UACHU,EAAOV,EACP,MACF,IAAK,YACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MAEF,QACEU,EAAOT,EAAQG,GAKrB,OAAOM,GAAQN,GCnCXS,EAAYV,GACTD,EAAMC,KAASH,ECFlBc,EAAaX,GACVU,EAASV,KAASY,MAAMZ,IAAQa,OAAOb,KAASA,GAAOA,EAAM,GAAM,ECF5E,MCGMc,EAAyBd,IAC7B,IAAIO,EAAO,SAUX,OARII,EAAUX,GACZO,EAAO,WCLX,SAAiBP,GACf,OACEU,EAASV,KACRY,MAAMZ,IACPe,SAASf,KACRW,EAAUX,IACXa,OAAOb,KAASA,GAChBA,EAAM,GAAM,CAEhB,CDHagB,CAAQhB,GDRF,CAACA,GACXU,EAASV,KAASA,IAAQiB,KAAYjB,KAAQ,KCS1CkB,CAAWlB,KACpBO,EAAO,YAFPA,EAAO,QAKFA,GEZHY,EAAYC,GACTrB,EAAMqB,KAASvB,ECHxB,SAASwB,EAAQrB,GACf,QAAKmB,EAASnB,IAIP,QAAQsB,KAAKtB,EACtB,CCNA,MCRMuB,EAAO,CACX,IACA,OACA,UACA,OACA,UACA,QACA,QACA,IACA,OACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,KACA,KACA,KACA,QACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,SACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,OACA,MACA,OACA,OACA,OACA,WACA,OACA,QACA,MACA,WACA,SACA,KACA,WACA,SACA,SACA,IACA,QACA,UACA,MACA,WACA,IACA,KACA,KACA,KACA,MACA,OACA,IACA,OACA,SACA,SACA,UACA,SACA,OACA,QACA,SACA,OACA,SACA,QACA,MACA,UACA,MACA,MACA,QACA,QACA,KACA,WACA,WACA,QACA,KACA,QACA,OACA,QACA,KACA,QACA,IACA,KACA,MACA,QACA,OC7GIC,EAAWC,GAIRN,EAASM,KAHO,+CAGiBH,KAAKG,IAFtB,oCAE6CH,KAAKG,ICJrEC,EAAWD,GACRN,EAASM,KAASb,MAAMe,KAAKC,MAAMH,ICUtCI,EAAyB7B,IAC7B,IAAIO,EAAO,SCXE,IAACkB,EDyCd,ME1Cc,CAACzB,GACRmB,EAASnB,IAAgB,KAARA,EFapB8B,CAAQ9B,GACVO,EAAO,QACEc,EAAQrB,GACjBO,EAAO,QCZJY,EAJSM,EDiBIzB,ICfhB,oEAMasB,KAAKG,GDUlBlB,EAAO,OJ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"}