{"version":3,"file":"types.min.js","sources":["../../esm/enum/types.js","../../esm/enum/objects.js","../../esm/_type.js","../../esm/isArray.js","../../esm/isArrayLike.js","../../esm/isFunction.js","../../esm/isObject.js","../../esm/isObjectLike.js","../../esm/isInt8Array.js","../../esm/isString.js","../../esm/isBlank.js","../../esm/isBoolean.js","../../esm/isUndefined.js","../../esm/hasOwn.js","../../esm/isPlainObject.js","../../esm/isNumber.js","../../esm/isInteger.js","../../esm/types.js","../../esm/is.js","../../esm/isArrayLikeObject.js","../../esm/isArguments.js","../../esm/isArrayBuffer.js","../../esm/isUint8Array.js","../../esm/isUint8ClampedArray.js","../../esm/isInt16Array.js","../../esm/isUint16Array.js","../../esm/isInt32Array.js","../../esm/isUint32Array.js","../../esm/isFloat32Array.js","../../esm/isFloat64Array.js","../../esm/isBigInt64Array.js","../../esm/isBigUint64Array.js","../../esm/isBigInt.js","../../esm/isBase64.js","../../esm/isConstructor.js","../../esm/isDataView.js","../../esm/isDate.js","../../esm/isElement.js","../../esm/isEmail.js","../../esm/isEmpty.js","../../esm/isEmptyArray.js","../../esm/isEmptyObject.js","../../esm/isError.js","../../esm/isEven.js","../../esm/isFloat.js","../../esm/isFragment.js","../../esm/isHash.js","../../esm/isHex.js","../../esm/isHTMLCollection.js","../../esm/isInfinite.js","../../esm/isIPAddress.js","../../esm/isJSON.js","../../esm/isLength.js","../../esm/isMap.js","../../esm/isNativeFunction.js","../../esm/isNull.js","../../esm/isNumeric.js","../../esm/isOdd.js","../../esm/isPhoneNumber.js","../../esm/isPrototype.js","../../esm/isRegExp.js","../../esm/isSet.js","../../esm/isSymbol.js","../../esm/isTextNode.js","../../esm/isTypedArray.js","../../esm/isURL.js","../../esm/isValue.js","../../esm/isVNode.js","../../esm/isWeakMap.js","../../esm/isWeakSet.js","../../esm/isXML.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\nconst TYPES = {\n  BOOLEAN: 'boolean',\n  BIG_INT: 'bigint',\n  NULL: 'null',\n  UNDEFINED: 'undefined',\n  NUMBER: 'number',\n  STRING: 'string',\n  OBJECT: 'object',\n  ARRAY: 'array',\n  ARRAY_BUFFER: 'arraybuffer',\n  DATA_VIEW: 'dataview',\n  DATE: 'date',\n  ERROR: 'error',\n  ARGUMENTS: 'arguments',\n  FUNCTION: 'function',\n  ELEMENT: 'element',\n  FRAGMENT: 'fragment',\n  COLLECTION: 'collection',\n  TEXT: 'text',\n  REGEXP: 'regexp',\n  SYMBOL: 'symbol',\n  SET: 'set',\n  WEAK_SET: 'weakset',\n  MAP: 'map',\n  WEAK_MAP: 'weakmap',\n  INT8_ARRAY: 'int8array',\n  UNIT8_ARRAY: 'uint8array',\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\n  INT16_ARRAY: 'int16array',\n  UNIT16_ARRAY: 'uint16array',\n  INT32_ARRAY: 'int32array',\n  UNIT32_ARRAY: 'uint32array',\n  FLOAT32_ARRAY: 'float32array',\n  FLOAT64_ARRAY: 'float64array',\n  BIG_INT64_ARRAY: 'bigint64array',\n  BIG_UINT64_ARRAY: 'biguint64array'\n}\n\nexport default TYPES\n","// Object.prototype.toString() 输出的类型名称枚举值\nconst OBJECTS = {\n  BIG_INT: '[object BigInt]',\n  BIG_INT64_ARRAY: '[object BigInt64Array]',\n  BIG_UINT64_ARRAY: '[object BigUint64Array]',\n  STRING: '[object String]',\n  NUMBER: '[object Number]',\n  BOOLEAN: '[object Boolean]',\n  NULL: '[object Null]',\n  UNDEFINED: '[object Undefined]',\n  OBJECT: '[object Object]',\n  ARGUMENTS: '[object Arguments]',\n  ARRAY: '[object Array]',\n  ARRAY_BUFFER: '[object ArrayBuffer]',\n  INT8_ARRAY: '[object Int8Array]',\n  UNIT8_ARRAY: '[object Uint8Array]',\n  UNIT8_CLAMPED_ARRAY: '[object Uint8ClampedArray]',\n  INT16_ARRAY: '[object Int16Array]',\n  UNIT16_ARRAY: '[object Uint16Array]',\n  INT32_ARRAY: '[object Int32Array]',\n  UNIT32_ARRAY: '[object Uint32Array]',\n  FLOAT32_ARRAY: '[object Float32Array]',\n  FLOAT64_ARRAY: '[object Float64Array]',\n  DATA_VIEW: '[object DataView]',\n  DATE: '[object Date]',\n  ERROR: '[object Error]',\n  FUNCTION: '[object Function]',\n  REGEXP: '[object RegExp]',\n  SET: '[object Set]',\n  WEAK_SET: '[object WeakSet]',\n  MAP: '[object Map]',\n  WEAK_MAP: '[object WeakMap]',\n  SYMBOL: '[object Symbol]',\n  NODE_LIST: '[object NodeList]',\n  FRAGMENT: '[object DocumentFragment]',\n  TEXT_NODE: '[object Text]'\n}\n\nexport default OBJECTS\n","import TYPES from './enum/types'\nimport OBJECTS from './enum/objects'\n\n/**\n * 检测数据类型，返回检测数据类型的字符串\n * ========================================================================\n * @method _type\n * @param {*} val - 要检测的任意值\n * @returns {String}\n */\nconst _type = (val) => {\n  const type = Object.prototype.toString.apply(val)\n  const _typeof = typeof val\n\n  switch (type) {\n    /* ===== 原始值类型（Primitive data types） ===== */\n    case OBJECTS.STRING:\n      if (_typeof === 'string') {\n        // 检测是否为 String 类型\n        return TYPES.STRING\n      }\n      return TYPES.OBJECT\n    case OBJECTS.BIG_INT:\n      return TYPES.BIG_INT\n    case OBJECTS.NUMBER:\n      // 检测是否为 Number 类型\n      if (_typeof === 'number') {\n        return TYPES.NUMBER\n      }\n      return TYPES.OBJECT\n    case OBJECTS.BOOLEAN:\n      if (typeof val === 'boolean') {\n        // 检查是否为 Boolean 类型\n        return TYPES.BOOLEAN\n      }\n      return TYPES.OBJECT\n    case OBJECTS.NULL:\n      // 检测是否为 null\n      return TYPES.NULL\n    case OBJECTS.UNDEFINED:\n      // 检测是否为 Undefined\n      return TYPES.UNDEFINED\n    case OBJECTS.SYMBOL:\n      // 检测是否为 Symbol 类型\n      return TYPES.SYMBOL\n    /* ===== ES6 对象 ( Map, WeakMap, Set, WeakSet ) ===== */\n    case OBJECTS.SET:\n      // 检测是否为 Set 类型\n      return TYPES.SET\n    case OBJECTS.WEAK_SET:\n      // 检测是否为 WeakSet 类型\n      return TYPES.WEAK_SET\n    case OBJECTS.MAP:\n      // 检测是否为 Map 类型\n      return TYPES.MAP\n    case OBJECTS.WEAK_MAP:\n      // 检测是否为 WeakMap 类型\n      return TYPES.WEAK_MAP\n    /* ===== 引用类型（Reference data types） ===== */\n    case OBJECTS.FUNCTION:\n      // 检测是否为 Function 类型\n      return TYPES.FUNCTION\n    case OBJECTS.ARRAY:\n      // 检测是否为 Array 类型\n      return TYPES.ARRAY\n    case OBJECTS.ARRAY_BUFFER:\n      // 检测是否为 ArrayBuffer 类型\n      return TYPES.ARRAY_BUFFER\n    case OBJECTS.DATA_VIEW:\n      // 检测是否为 DataView 类型\n      return TYPES.DATA_VIEW\n    case OBJECTS.DATE:\n      // 检测是否为 Date 类型\n      return TYPES.DATE\n    case OBJECTS.ERROR:\n      // 检测是否为 Error 类型\n      return TYPES.ERROR\n    case OBJECTS.REGEXP:\n      // 检测是否为 RegExp 类型\n      return TYPES.REGEXP\n    /* ===== ES2017 Typed Arrays ===== */\n    // Int - 整数\n    // Uint - 无符号整数\n    // Float - IEEE754 浮点数 )\n    case OBJECTS.BIG_INT64_ARRAY:\n      return TYPES.BIG_INT64_ARRAY\n    case OBJECTS.BIG_UINT64_ARRAY:\n      return TYPES.BIG_UINT64_ARRAY\n    case OBJECTS.INT8_ARRAY:\n      return TYPES.INT8_ARRAY\n    case OBJECTS.INT16_ARRAY:\n      return TYPES.INT16_ARRAY\n    case OBJECTS.INT32_ARRAY:\n      return TYPES.INT32_ARRAY\n    case OBJECTS.UNIT8_ARRAY:\n      return TYPES.UNIT8_ARRAY\n    case OBJECTS.UNIT8_CLAMPED_ARRAY:\n      return TYPES.UNIT8_CLAMPED_ARRAY\n    case OBJECTS.UNIT16_ARRAY:\n      return TYPES.UNIT16_ARRAY\n    case OBJECTS.UNIT32_ARRAY:\n      return TYPES.UNIT32_ARRAY\n    case OBJECTS.FLOAT32_ARRAY:\n      return TYPES.FLOAT32_ARRAY\n    case OBJECTS.FLOAT64_ARRAY:\n      return TYPES.FLOAT64_ARRAY\n    /* ===== 其它类型（Others） ===== */\n    case OBJECTS.ARGUMENTS:\n      // 检测是否为 arguments 对象\n      return TYPES.ARGUMENTS\n    case OBJECTS.NODE_LIST:\n      // 检测是否为 NodeList 类型\n      return TYPES.COLLECTION\n    case OBJECTS.TEXT_NODE:\n      // 检测是否为 Text 节点\n      return TYPES.TEXT\n    case OBJECTS.FRAGMENT:\n      // 检测是否为 DocumentFragment 文档碎片\n      return TYPES.FRAGMENT\n    case OBJECTS.OBJECT:\n      return TYPES.OBJECT\n    default:\n      if (val.tagName && val.nodeType === 1) {\n        return TYPES.ELEMENT\n      }\n      return type\n  }\n}\n\nexport default _type\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} - 'val' 是 Array 则返回 true，否则返回 false\r\n */\r\nconst isArray = (val) => {\r\n  return Array.isArray ? Array.isArray(val) : _type(val) === TYPES.ARRAY\r\n}\r\n\r\nexport default isArray\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为类似数组（array、arguments 对象或者\r\n * HTMLNodeList 对象）类型。\r\n * ========================================================================\r\n * @method isArrayLike\r\n * @param {*} val - 要检测是的数据\r\n * @returns {Boolean} 'val' 是 array、arguments 或者 HTMLNodeList 类型返回 true，否则返回 false\r\n */\r\nconst isArrayLike = (val) => {\r\n  const type = _type(val)\r\n\r\n  return (\r\n    type === TYPES.ARRAY ||\r\n    type === TYPES.ARGUMENTS ||\r\n    type === TYPES.COLLECTION\r\n  )\r\n}\r\n\r\nexport default isArrayLike\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  const type = _type(val)\r\n  return type === TYPES.FUNCTION\r\n}\r\n\r\nexport default isFunction\r\n","import isFunction from './isFunction'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为对象\r\n * ========================================================================\r\n * @method isObject\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为对象返回 true，否则返回 false\r\n */\r\nconst isObject = (val) => {\r\n  const type = typeof val\r\n\r\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\r\n}\r\n\r\nexport default isObject\r\n","import isObject from './isObject'\r\n\r\n/**\r\n * 检测测试数据是否为类似 Object 类型\r\n * ========================================================================\r\n * @method isObjectLike\r\n * @param {Object} val\r\n * @returns {Boolean}\r\n */\r\nconst isObjectLike = (val) => {\r\n  return isObject(val) && val !== null\r\n}\r\n\r\nexport default isObjectLike\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Int8Array 的数组\r\n * ========================================================================\r\n * methods isInt8Array\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isInt8Array = (val) => {\r\n  return _type(val) === TYPES.INT8_ARRAY\r\n}\r\n\r\nexport default isInt8Array\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为字符串\r\n *\r\n * @method isString\r\n * @param {*} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是字符串返回 true，否则返回 false\r\n */\r\nconst isString = (obj) => {\r\n  return _type(obj) === TYPES.STRING\r\n}\r\n\r\nexport default isString\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否只包空格\r\n * ========================================================================\r\n * @method isBlank\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 只包含空格返回 true，否则返回 false\r\n */\r\nfunction isBlank(val) {\r\n  if (!isString(val)) {\r\n    return false\r\n  }\r\n\r\n  return /^\\s*$/.test(val)\r\n}\r\n\r\nexport default isBlank\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Boolean 类型\r\n * ========================================================================\r\n * @method isBoolean\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Boolean 类型则返回 true，否则返回 false\r\n */\r\nconst isBoolean = (val) => {\r\n  return _type(val) === TYPES.BOOLEAN\r\n}\r\n\r\nexport default isBoolean\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否 undefined（未定义）\r\n * ========================================================================\r\n * @method isUndefined\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 undefined（未定义）返回 true，否则返回 false\r\n */\r\nconst isUndefined = (val) => {\r\n  return _type(val) === TYPES.UNDEFINED\r\n}\r\n\r\nexport default isUndefined\r\n","import isUndefined from './isUndefined'\r\n\r\n/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n\r\n  if (hasOwnProperty) {\r\n    // 不建议直接实用对象从原型链继承的 hasOwnProperty() 方法\r\n    // 所以采用直接调用 Object.prototype.hasOwnProperty() 方法\r\n    return hasOwnProperty.call(obj, prop)\r\n  }\r\n\r\n  return (\r\n    // 从对象构造函数的原型链继承的同名属性不算 obj 自身的属性\r\n    !isUndefined(obj[prop]) && obj.constructor.prototype[prop] !== obj[prop]\r\n  )\r\n}\r\n\r\nexport default hasOwn\r\n","import isObject from './isObject'\r\nimport hasOwn from './hasOwn'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为普通对象\r\n * ========================================================================\r\n * @method isPlainObject\r\n * @param {Object} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是普通对象返回 true，否则返回 false\r\n */\r\nconst isPlainObject = (val) => {\r\n  const toString = Object.prototype.toString\r\n  let proto\r\n  let Ctor\r\n\r\n  // Detect obvious negatives\r\n  if (!isObject(val)) {\r\n    return false\r\n  }\r\n\r\n  proto = val.prototype\r\n\r\n  if (!proto) {\r\n    return true\r\n  }\r\n\r\n  Ctor = hasOwn(proto, 'constructor') && proto.constructor\r\n\r\n  return (\r\n    typeof Ctor === TYPES.FUNCTION &&\r\n    toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\r\n  )\r\n}\r\n\r\nexport default isPlainObject\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Number 类型\r\n * ========================================================================\r\n * @method isNumber\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Number 类型返回 true，否则返回 false\r\n */\r\nconst isNumber = (val) => {\r\n  return _type(val) === TYPES.NUMBER\r\n}\r\n\r\nexport default isNumber\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据是否为整数\r\n * ========================================================================\r\n * @method isInteger\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是整数返回 true，否则返回 false\r\n */\r\nconst isInteger = (val) => {\r\n  return isNumber(val) && !isNaN(val) && Number(val) === val && val % 1 === 0\r\n}\r\n\r\nexport default isInteger\r\n","import is from './is'\nimport isArray from './isArray'\nimport isArrayLike from './isArrayLike'\nimport isArrayLikeObject from './isArrayLikeObject'\nimport isArguments from './isArguments'\nimport isArrayBuffer from './isArrayBuffer'\nimport isInt8Array from './isInt8Array'\nimport isUint8Array from './isUint8Array'\nimport isUint8ClampedArray from './isUint8ClampedArray'\nimport isInt16Array from './isInt16Array'\nimport isUint16Array from './isUint16Array'\nimport isInt32Array from './isInt32Array'\nimport isUint32Array from './isUint32Array'\nimport isFloat32Array from './isFloat32Array'\nimport isFloat64Array from './isFloat64Array'\nimport isBigInt64Array from './isBigInt64Array'\nimport isBigUint64Array from './isBigUint64Array'\nimport isBigInt from './isBigInt'\nimport isBase64 from './isBase64'\nimport isBlank from './isBlank'\nimport isBoolean from './isBoolean'\nimport isConstructor from './isConstructor'\nimport isDataView from './isDataView'\nimport isDate from './isDate'\nimport isElement from './isElement'\nimport isEmail from './isEmail'\nimport isEmpty from './isEmpty'\nimport isEmptyArray from './isEmptyArray'\nimport isEmptyObject from './isEmptyObject'\nimport isError from './isError'\nimport isEven from './isEven'\nimport isFloat from './isFloat'\nimport isFragment from './isFragment'\nimport isFunction from './isFunction'\nimport isHash from './isHash'\nimport isHex from './isHex'\nimport isHTMLCollection from './isHTMLCollection'\nimport isInfinite from './isInfinite'\nimport isInteger from './isInteger'\nimport isIPAddress from './isIPAddress'\nimport isJSON from './isJSON'\nimport isLength from './isLength'\nimport isMap from './isMap'\nimport isNativeFunction from './isNativeFunction'\nimport isNull from './isNull'\nimport isNumber from './isNumber'\nimport isNumeric from './isNumeric'\nimport isObject from './isObject'\nimport isObjectLike from './isObjectLike'\nimport isOdd from './isOdd'\nimport isPhoneNumber from './isPhoneNumber'\nimport isPlainObject from './isPlainObject'\nimport isPrototype from './isPrototype'\nimport isRegExp from './isRegExp'\nimport isSet from './isSet'\nimport isString from './isString'\nimport isSymbol from './isSymbol'\nimport isTextNode from './isTextNode'\nimport isTypedArray from './isTypedArray'\nimport isUndefined from './isUndefined'\nimport isURL from './isURL'\nimport isValue from './isValue'\nimport isVNode from './isVNode'\nimport isWeakMap from './isWeakMap'\nimport isWeakSet from './isWeakSet'\nimport isXML from './isXML'\n\nconst Types = {\n  is,\n  isArray,\n  isArrayLike,\n  isArrayLikeObject,\n  isArguments,\n  isArrayBuffer,\n  isInt8Array,\n  isUint8Array,\n  isUint8ClampedArray,\n  isInt16Array,\n  isUint16Array,\n  isInt32Array,\n  isUint32Array,\n  isFloat32Array,\n  isFloat64Array,\n  isBigInt64Array,\n  isBigUint64Array,\n  isBigInt,\n  isBase64,\n  isBlank,\n  isBoolean,\n  isConstructor,\n  isDataView,\n  isDate,\n  isElement,\n  isEmail,\n  isEmpty,\n  isEmptyArray,\n  isEmptyObject,\n  isError,\n  isEven,\n  isFloat,\n  isFragment,\n  isFunction,\n  isHash,\n  isHex,\n  isHTMLCollection,\n  isInfinite,\n  isInteger,\n  isIPAddress,\n  isJSON,\n  isLength,\n  isMap,\n  isNativeFunction,\n  isNull,\n  isNumber,\n  isNumeric,\n  isObject,\n  isObjectLike,\n  isOdd,\n  isPhoneNumber,\n  isPlainObject,\n  isPrototype,\n  isRegExp,\n  isSet,\n  isString,\n  isSymbol,\n  isTextNode,\n  isTypedArray,\n  isUndefined,\n  isURL,\n  isValue,\n  isVNode,\n  isWeakMap,\n  isWeakSet,\n  isXML\n}\n\nexport default Types\n","import _type from './_type'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method is\r\n * @param {*} val - 要检测的任意值\r\n * @see _type\r\n * @returns {String}\r\n */\r\nconst is = (val) => {\r\n  return _type(val)\r\n}\r\n\r\nexport default is\r\n","import isArrayLike from './isArrayLike'\r\nimport isObjectLike from './isObjectLike'\r\n\r\n/**\r\n * 检测测试数据是否为 ArrayLike 的对象数据\r\n * ========================================================================\r\n * @param {Object|Array} val\r\n * @returns {Boolean}\r\n */\r\nconst isArrayLikeObject = (val) => {\r\n  return isObjectLike(val) && isArrayLike(val)\r\n}\r\n\r\nexport default isArrayLikeObject\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 arguments 对象\r\n * ========================================================================\r\n * @method isArguments\r\n * @param {*} val\r\n * @return {Boolean}\r\n */\r\nfunction isArguments(val) {\r\n  return _type(val) === TYPES.ARGUMENTS\r\n}\r\n\r\nexport default isArguments\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 ArrayBuffer 类型\r\n * ========================================================================\r\n * @method isArrayBuffer\r\n * @param {*} val\r\n * @return {Boolean}\r\n */\r\nfunction isArrayBuffer(val) {\r\n  return _type(val) === TYPES.ARRAY_BUFFER\r\n}\r\n\r\nexport default isArrayBuffer\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Uint8Array 的数组\r\n * ========================================================================\r\n * methods isUint8Array\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isUint8Array = (val) => {\r\n  return _type(val) === TYPES.UNIT8_ARRAY\r\n}\r\n\r\nexport default isUint8Array\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Uint8ClampedArray 的数组\r\n * ========================================================================\r\n * methods isUint8ClampedArray\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isUint8ClampedArray = (val) => {\r\n  return _type(val) === TYPES.UNIT8_CLAMPED_ARRAY\r\n}\r\n\r\nexport default isUint8ClampedArray\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Int16Array 的数组\r\n * ========================================================================\r\n * methods isInt16Array\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isInt16Array = (val) => {\r\n  return _type(val) === TYPES.INT16_ARRAY\r\n}\r\n\r\nexport default isInt16Array\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Uint16Array 的数组\r\n * ========================================================================\r\n * methods isUint16Array\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isUint16Array = (val) => {\r\n  return _type(val) === TYPES.UNIT16_ARRAY\r\n}\r\n\r\nexport default isUint16Array\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Int32Array 的数组\r\n * ========================================================================\r\n * methods isInt32Array\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isInt32Array = (val) => {\r\n  return _type(val) === TYPES.INT32_ARRAY\r\n}\r\n\r\nexport default isInt32Array\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Uint32Array 的数组\r\n * ========================================================================\r\n * methods isUint32Array\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isUint32Array = (val) => {\r\n  return _type(val) === TYPES.UNIT32_ARRAY\r\n}\r\n\r\nexport default isUint32Array\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Float32Array 的数组\r\n * ========================================================================\r\n * methods isFloat32Array\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isFloat32Array = (val) => {\r\n  return _type(val) === TYPES.FLOAT32_ARRAY\r\n}\r\n\r\nexport default isFloat32Array\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Float64Array 的数组\r\n * ========================================================================\r\n * methods isFloat64Array\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isFloat64Array = (val) => {\r\n  return _type(val) === TYPES.FLOAT64_ARRAY\r\n}\r\n\r\nexport default isFloat64Array\r\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 BigInt64Array 类型。\n * ========================================================================\n * @method isBigInt64Array\n * @since 0.6.0\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 BigInt64Array 类型，返回 true，否则返回 false\n */\nconst isBigInt64Array = (val) => {\n  return _type(val) === TYPES.BIG_INT64_ARRAY\n}\n\nexport default isBigInt64Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 BigUint64Array 类型。\n * ========================================================================\n * @method isBigUint64Array\n * @since 0.6.0\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 BigUint64Array 类型，返回 true，否则返回 false\n */\nconst isBigUint64Array = (val) => {\n  return _type(val) === TYPES.BIG_UINT64_ARRAY\n}\n\nexport default isBigUint64Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 BigInt 类型。\n * ========================================================================\n * @method isBigInt\n * @since 0.6.0\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 BigInt 类型，返回 true，否则返回 false\n */\nconst isBigInt = (val) => {\n  return _type(val) === TYPES.BIG_INT\n}\n\nexport default isBigInt\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为一个基于 base64 编码的字符串。\r\n * ========================================================================\r\n * @method isBase64\r\n * @param {String} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 base64 编码的字符串返回 true，否则返回 false\r\n */\r\nconst isBase64 = (val) => {\r\n  const REGEXP_BASE64 =\r\n    /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}={2})$/gm\r\n  return isString(val) && (!val.length || REGEXP_BASE64.test(val))\r\n}\r\n\r\nexport default isBase64\r\n","import isFunction from './isFunction'\r\n\r\n/**\r\n * 检测测试函数是否为构造函数\r\n * ========================================================================\r\n * @method isConstructor\r\n * @param {Function|Object} fn - 要测试的（构造）函数\r\n * @returns {Boolean} - fn 是构造函数返回 true，否则返回 false;\r\n */\r\nconst isConstructor = (fn) => {\r\n  let instance\r\n\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  try {\r\n    instance = new fn()\r\n  } catch (err) {\r\n    /* istanbul ignore else */\r\n    if (err.message.indexOf('is not a constructor')) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return (\r\n    (instance.constructor === fn && instance instanceof fn) ||\r\n    (instance.constructor === Object && instance instanceof Object)\r\n  )\r\n}\r\n\r\nexport default isConstructor\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 DataView 类型\r\n * ========================================================================\r\n * @method isDataView\r\n * @param {*} val\r\n * @return {Boolean}\r\n */\r\nconst isDataView = (val) => {\r\n  return _type(val) === TYPES.DATA_VIEW\r\n}\r\n\r\nexport default isDataView\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 Date 类型\r\n * ========================================================================\r\n * @method isDate\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 Date 类型返回 true，否则返回 false\r\n */\r\nconst isDate = (val) => {\r\n  return (\r\n    _type(val) === TYPES.DATE &&\r\n    val.toString() !== 'Invalid Date' &&\r\n    !isNaN(val)\r\n  )\r\n}\r\n\r\nexport default isDate\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 HTML 元素节点。\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 HTML 元素节点返回 true，否则返回 false\r\n */\r\nconst isElement = (val) => {\r\n  return _type(val) === TYPES.ELEMENT\r\n}\r\n\r\nexport default isElement\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测是否为正确的 Email 邮箱地址格式\r\n * ========================================================================\r\n * @method isEmail\r\n * @param {String} val\r\n * @returns {Boolean}\r\n */\r\nconst isEmail = (val) => {\r\n  const pattern =\r\n    /^([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)$/\r\n  return isString(val) && pattern.test(val)\r\n}\r\n\r\nexport default isEmail\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为空字符串\r\n * ========================================================================\r\n * @method isEmpty\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是空字符串返回 true，否则返回 false\r\n */\r\nconst isEmpty = (val) => {\r\n  return isString(val) && val === ''\r\n}\r\n\r\nexport default isEmpty\r\n","import isArray from './isArray'\r\n\r\n/**\r\n * 检测测试数据是否为空字数组\r\n * ========================================================================\r\n * @method isEmptyArray\r\n * @since 0.5.0\r\n * @param {Array} val\r\n * @returns {Boolean}\r\n */\r\nconst isEmptyArray = (val) => {\r\n  return isArray(val) && val.length === 0\r\n}\r\n\r\nexport default isEmptyArray\r\n","import isPlainObject from './isPlainObject'\r\nimport hasOwn from './hasOwn'\r\n\r\n/**\r\n * 检测测试数据是否为空（单体）对象\r\n * ========================================================================\r\n * @method isEmptyObject\r\n * @param {Object} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是空对象返回 true，否则返回 false\r\n */\r\nconst isEmptyObject = (obj) => {\r\n  let prop\r\n\r\n  if (!isPlainObject(obj)) {\r\n    return false\r\n  }\r\n\r\n  for (prop in obj) {\r\n    /* istanbul ignore else */\r\n    if (hasOwn(obj, prop)) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport default isEmptyObject\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Error 类型\r\n * ========================================================================\r\n * @method isError\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Error 类型返回 true，否则返回 false\r\n */\r\nconst isError = (val) => {\r\n  return _type(val) === TYPES.ERROR\r\n}\r\n\r\nexport default isError\r\n","import isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为偶数\r\n * ========================================================================\r\n * @method isEven\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是偶数返回 true，否则返回 false\r\n */\r\nconst isEven = (val) => {\r\n  return isInteger(val) && val % 2 === 0\r\n}\r\n\r\nexport default isEven\r\n","import isNumber from './isNumber'\r\nimport isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据是否为整数\r\n * ========================================================================\r\n * @method isFloat\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是整数返回 true，否则返回 false\r\n */\r\nfunction isFloat(val) {\r\n  return (\r\n    isNumber(val) &&\r\n    !isNaN(val) &&\r\n    isFinite(val) &&\r\n    !isInteger(val) &&\r\n    Number(val) === val &&\r\n    val % 1 !== 0\r\n  )\r\n}\r\n\r\nexport default isFloat\r\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 DocumentFragment 文档碎片。\n * ========================================================================\n * @method isFragment\n * @since 0.6.0\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 DocumentFragment 文档碎片，返回 true，否则返回 false\n */\nconst isFragment = (val) => {\n  return _type(val) === TYPES.FRAGMENT\n}\n\nexport default isFragment\n","import isPlainObject from './isPlainObject'\r\n\r\n/**\r\n * 检测测试数据是否为空（单体）对象\r\n * ========================================================================\r\n * @method isHash\r\n * @since 0.4.0\r\n * @param obj\r\n * @returns {Boolean}\r\n */\r\nconst isHash = (obj) => {\r\n  return isPlainObject(obj)\r\n}\r\n\r\nexport default isHash\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为 16 进制编码的字符串\r\n * ========================================================================\r\n * @method isHex\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 16 进制编码的字符串返回 true，否则返回 false\r\n */\r\nconst isHex = (val) => {\r\n  const REGEXP_HEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n  return isString(val) && REGEXP_HEX.test(val)\r\n}\r\n\r\nexport default isHex\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测数据的是否为 HTMLNodeList 对象\r\n * ========================================================================\r\n * @method isHTMLCollection\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 HTMLNodeList 对象返回 true，否则返回 false\r\n */\r\nconst isHTMLCollection = (val) => {\r\n  return _type(val) === TYPES.COLLECTION\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据的数据是正无穷或者负无穷\r\n * ========================================================================\r\n * @method isInfinite\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是正无穷或者负无穷返回 true，否则返回 false\r\n */\r\nconst isInfinite = (val) => {\r\n  return isNumber(val) && (val === Infinity || val === -Infinity)\r\n}\r\n\r\nexport default isInfinite\r\n","import isString from './isString'\r\n\r\n/**\r\n * 验证是否为（v4） IP 地址\r\n * ========================================================================\r\n * @method isIPAddress\r\n * @param {String} str\r\n * @returns {Boolean}\r\n */\r\nconst isIPAddress = (str) => {\r\n  const ipV6 =\r\n    /(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]+|::(ffff(:0{1,4})?:)?((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d)|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d))/\r\n  const ipV4 =\r\n    /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/\r\n  return isString(str) && (ipV4.test(str) || ipV6.test(str))\r\n}\r\n\r\nexport default isIPAddress\r\n","import isString from './isString'\r\nimport isBlank from './isBlank'\r\n\r\n/**\r\n * 检测测试数据是否为 JSON 格式字符串数据\r\n * ========================================================================\r\n * @method isJSON\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 JSON 格式字符串数据返回 true，否则返回 false\r\n */\r\nconst isJSON = (val) => {\r\n  if (!isString(val) || isBlank(val) || !val) {\r\n    return false\r\n  }\r\n\r\n  val = val.replace(/\\\\(?:([\"\\\\/bfnrt])|(u[0-9a-fA-F]{4}))/g, '@')\r\n  val = val.replace(\r\n    /\"[\\w\\s]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?/g,\r\n    ']'\r\n  )\r\n  val = val.replace(/(?:^|:|,)(?:\\s*\\[)+/g, '')\r\n\r\n  return /^[\\],:{}\\s]*$/.test(val)\r\n}\r\n\r\nexport default isJSON\r\n","import isNumber from './isNumber'\r\n/**\r\n * 检测测试数据是否为有效 length 值\r\n * =============================================================\r\n * @method isLength\r\n * @param {Number} val\r\n * @returns {Boolean}\r\n */\r\nconst isLength = (val) => {\r\n  const MAX_SAFE_INTEGER = 9007199254740991\r\n\r\n  return isNumber(val) && val > -1 && val % 1 === 0 && val <= MAX_SAFE_INTEGER\r\n}\r\n\r\nexport default isLength\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Map 类型\r\n * ========================================================================\r\n * @method isMap\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Map 类型返回 true，否则返回 false\r\n */\r\nconst isMap = (val) => {\r\n  return _type(val) === TYPES.MAP\r\n}\r\n\r\nexport default isMap\r\n","import isFunction from './isFunction'\r\n\r\n/**\r\n * 检测测试数据是否为 JavaScript 内置函数\r\n * ========================================================================\r\n * @method isNativeFunction\r\n * @param {Function|Object} fn - 要测试的函数\r\n * @returns {Boolean} - fn 是内置函数返回 true，否则返回 false;\r\n */\r\nconst isNativeFunction = (fn) => {\r\n  return isFunction(fn) && /\\{\\s*\\[native code\\]\\s*\\}/.test('' + fn)\r\n}\r\n\r\nexport default isNativeFunction\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 null\r\n * ========================================================================\r\n * @method isNull\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 null 返回 true，否则返回 false\r\n */\r\nconst isNull = (val) => {\r\n  return _type(val) === TYPES.NULL\r\n}\r\n\r\nexport default isNull\r\n","import isNumber from './isNumber'\r\nimport isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否是一个数字（只能是 number 类型或者 '123123' 这样的数字字符串）\r\n * ========================================================================\r\n * @method isNumeric\r\n * @param {Number|String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是一个数字返回 true，否则返回false\r\n */\r\nconst isNumeric = (val) => {\r\n  return (isNumber(val) || isString(val)) && !isNaN(val - parseFloat(val))\r\n}\r\n\r\nexport default isNumeric\r\n","import isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为奇数\r\n * ========================================================================\r\n * @method isOdd\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是奇数返回 true，否则返回 false\r\n */\r\nconst isOdd = (val) => {\r\n  return isInteger(val) && val % 2 !== 0\r\n}\r\n\r\nexport default isOdd\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测是否为电话号码\r\n * ========================================================================\r\n * @method isPhoneNumber\r\n * @param {String} str\r\n * @returns {Boolean}\r\n *\r\n * @example\r\n * // 移动电话号码\r\n * isPhoneNumber(13901030304) // -> false\r\n * isPhoneNumber('1390103030a') // => false\r\n *\r\n * isPhoneNumber('+86 13901030304')\r\n * isPhoneNumber('13901030304')\r\n * isPhoneNumber('139-010-30304')\r\n * isPhoneNumber('139.010.30304')\r\n *\r\n * // 固定电话号码\r\n * isPhoneNumber('+86 84923296') // -> true\r\n * isPhoneNumber('027 84923296') // -> true\r\n * isPhoneNumber('(027) 84923296') // -> true\r\n * isPhoneNumber('(027)84923296') // -> true\r\n * isPhoneNumber('027-84923296') // -> true\r\n * isPhoneNumber('027.84923296') // -> true\r\n * isPhoneNumber('027 849-23296') // -> true\r\n * isPhoneNumber('027-849-23296') // -> true\r\n */\r\nconst isPhoneNumber = (str) => {\r\n  const pattern =\r\n    /^\\+?\\(?(\\d{2,3})?\\)?[-\\s.]?((\\d{3}[-\\s.]?\\d{4,6})|(\\d{11}))$/im\r\n  return isString(str) && pattern.test(str)\r\n}\r\n\r\nexport default isPhoneNumber\r\n","import isFunction from './isFunction'\r\n\r\n/**\r\n * 判断是否为 prototype 对象\r\n * ========================================================================\r\n * @method isPrototype\r\n * @param {Function|Object} val\r\n * @returns {Boolean}\r\n */\r\nconst isPrototype = (val) => {\r\n  const OP = Object.prototype\r\n  const Ctor = val ? val.constructor : null\r\n  const proto = (isFunction(Ctor) && Ctor.prototype) || OP\r\n\r\n  return val === proto\r\n}\r\n\r\nexport default isPrototype\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为正则表达式\r\n * ========================================================================\r\n * @method isRegExp\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是正则表达式返回 true，否则返回 false\r\n */\r\nconst isRegExp = (val) => {\r\n  return _type(val) === TYPES.REGEXP\r\n}\r\n\r\nexport default isRegExp\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Set 类型\r\n * ========================================================================\r\n * @method isSet\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Set 类型返回 true，否则返回 false\r\n */\r\nconst isSet = (val) => {\r\n  return _type(val) === TYPES.SET\r\n}\r\n\r\nexport default isSet\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Symbol 类型\r\n * ========================================================================\r\n * @method isSymbol\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Symbol 类型返回 true，否则返回 false\r\n */\r\nconst isSymbol = (val) => {\r\n  return _type(val) === TYPES.SYMBOL\r\n}\r\n\r\nexport default isSymbol\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为文本节点\r\n * ========================================================================\r\n * @method isTextNode\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是文本节点返回 true，否则返回 false\r\n */\r\nconst isTextNode = (val) => {\r\n  const type = _type(val)\r\n  return type === TYPES.TEXT\r\n}\r\n\r\nexport default isTextNode\r\n","import _type from './_type'\r\n/**\r\n * 检测测试数据是否为 TypedArray 类型\r\n * ========================================================================\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isTypedArray = (val) => {\r\n  const type = _type(val)\r\n  const isTyped =\r\n    /^(?:Float(?:32|64)|(Int|Uint)(?:8|16|32)|Uint8Clamped)Array$/i\r\n  return isTyped.test(type)\r\n}\r\n\r\nexport default isTypedArray\r\n","import isString from './isString'\r\n\r\n/**\r\n * 判断字符串是否为有效的 URL 地址\r\n * ========================================================================\r\n * @method isURL\r\n * @param {String} str - 要检测的字符串\r\n * @returns {Boolean}\r\n */\r\nconst isURL = (str) => {\r\n  let pattern = new RegExp(\r\n    '^(https?:\\\\/\\\\/)?' + // protocol\r\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\r\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\r\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\r\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\r\n      '(\\\\#[-a-z\\\\d_]*)?$', // hash\r\n    'i'\r\n  ) // fragment locator\r\n\r\n  return isString(str) && !!pattern.test(str)\r\n}\r\n\r\nexport default isURL\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为有效的数据\r\n *\r\n * @method isValue\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是有效的数据返回 true，否则返回 false\r\n */\r\nconst isValue = (val) => {\r\n  const type = _type(val)\r\n\r\n  switch (type) {\r\n    case TYPES.NUMBER:\r\n      return isFinite(val)\r\n    case TYPES.NULL:\r\n    case TYPES.UNDEFINED:\r\n      return false\r\n    default:\r\n      return !!type\r\n  }\r\n}\r\n\r\nexport default isValue\r\n","import hasOwn from './hasOwn'\r\nimport isObject from './isObject'\r\n\r\n/**\r\n * 判断是否未 VNode 对象\r\n * =============================================================\r\n * @param {Object} node\r\n * @returns {Boolean}\r\n */\r\nconst isVNode = (node) => {\r\n  return node !== null && isObject(node) && hasOwn(node, 'componentOptions')\r\n}\r\n\r\nexport default isVNode\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 WeakMap 类型\r\n * ========================================================================\r\n * @method isWeakMap\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 WeakMap 类型返回 true，否则返回 false\r\n */\r\nconst isWeakMap = (val) => {\r\n  return _type(val) === TYPES.WEAK_MAP\r\n}\r\n\r\nexport default isWeakMap\r\n","import _type from './_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 WeakSet 类型\r\n * ========================================================================\r\n * @method isWeakSet\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 WeakSet 类型返回 true，否则返回 false\r\n */\r\nconst isWeakSet = (val) => {\r\n  return _type(val) === TYPES.WEAK_SET\r\n}\r\n\r\nexport default isWeakSet\r\n","/**\r\n * 检测是否为 XML 文档\r\n * ========================================================================\r\n * @method isXML\r\n * @param {*} val\r\n * @returns {Boolean}\r\n */\r\nconst isXML = (val) => {\r\n  const documentElement = val && (val.ownerDocument || val).documentElement\r\n  return documentElement ? documentElement.nodeName !== 'HTML' : false\r\n}\r\n\r\nexport default isXML\r\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","tagName","nodeType","isArray","Array","isArrayLike","isFunction","isObject","isObjectLike","isString","obj","isBlank","test","isUndefined","hasOwn","prop","hasOwnProperty","call","constructor","isPlainObject","proto","Ctor","isNumber","isInteger","isNaN","Number","is","isArrayLikeObject","isArguments","isArrayBuffer","isInt8Array","isUint8Array","isUint8ClampedArray","isInt16Array","isUint16Array","isInt32Array","isUint32Array","isFloat32Array","isFloat64Array","isBigInt64Array","isBigUint64Array","isBigInt","isBase64","length","isBoolean","isConstructor","fn","instance","err","message","indexOf","isDataView","isDate","isElement","isEmail","isEmpty","isEmptyArray","isEmptyObject","isError","isEven","isFloat","isFinite","isFragment","isHash","isHex","isHTMLCollection","isInfinite","Infinity","isIPAddress","str","isJSON","replace","isLength","isMap","isNativeFunction","isNull","isNumeric","parseFloat","isOdd","isPhoneNumber","isPrototype","OP","isRegExp","isSet","isSymbol","isTextNode","isTypedArray","isURL","pattern","RegExp","isValue","isVNode","node","isWeakMap","isWeakSet","isXML","documentElement","ownerDocument","nodeName"],"mappings":"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"}