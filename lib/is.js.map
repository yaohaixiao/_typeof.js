{"version":3,"file":"is.js","sources":["../enum/types.js","../enum/objects.js","../utils/_type.js","../isNumber.js","../isInteger.js","../isInfinite.js","../utils/typeOfNumber.js","../isFloat.js","../isString.js","../isBlank.js","../isBase64.js","../isFunction.js","../isObject.js","../isEmptyArray.js","../isArray.js","../isObjectLike.js","../utils/hasOwn.js","../isUndefined.js","../isEmptyObject.js","../isPlainObject.js","../isEmptyArguments.js","../isArguments.js","../isEmpty.js","../isNull.js","../isHTMLCollection.js","../isBuffer.js","../isTypedArray.js","../enum/tags.js","../utils/_isTime.js","../utils/_isDate.js","../utils/typeOfString.js","../isUUID.js","../isChinese.js","../isEmail.js","../isIPAddress.js","../isHex.js","../isHTML.js","../utils/trim.js","../isSVG.js","../isJSON.js","../isTime.js","../isConstructor.js","../isNativeFunction.js","../utils/typeOfObject.js","../isVNode.js","../isXML.js","../isPrototype.js","../is.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\r\nconst TYPES = {\r\n  /* ===== Primitive data types ===== */\r\n  BIG_INT: 'bigint',\r\n  BOOLEAN: 'boolean',\r\n  NULL: 'null',\r\n  NUMBER: 'number',\r\n  UNDEFINED: 'undefined',\r\n  STRING: 'string',\r\n  SYMBOL: 'symbol',\r\n  /* ===== Collections ===== */\r\n  SET: 'set',\r\n  WEAK_SET: 'weakset',\r\n  MAP: 'map',\r\n  WEAK_MAP: 'weakmap',\r\n  /* ===== Array ===== */\r\n  ARRAY: 'array',\r\n  ARGUMENTS: 'arguments',\r\n  /* ===== Typed ===== */\r\n  DATA_VIEW: 'dataview',\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  INT8_ARRAY: 'int8array',\r\n  UNIT8_ARRAY: 'uint8array',\r\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\r\n  INT16_ARRAY: 'int16array',\r\n  UNIT16_ARRAY: 'uint16array',\r\n  INT32_ARRAY: 'int32array',\r\n  UNIT32_ARRAY: 'uint32array',\r\n  FLOAT32_ARRAY: 'float32array',\r\n  FLOAT64_ARRAY: 'float64array',\r\n  BIG_INT64_ARRAY: 'bigint64array',\r\n  BIG_UINT64_ARRAY: 'biguint64array',\r\n  /* ===== Object ===== */\r\n  OBJECT: 'object',\r\n  COLLECTION: 'collection',\r\n  DATE: 'date',\r\n  ELEMENT: 'element',\r\n  ERROR: 'error',\r\n  FRAGMENT: 'fragment',\r\n  FUNCTION: 'function',\r\n  PROMISE: 'promise',\r\n  REGEXP: 'regexp',\r\n  TEXT: 'text'\r\n}\r\n\r\nexport default TYPES\r\n","import TYPES from './types'\r\n\r\n// Object.prototype.toString() 输出的类型名称枚举值\r\nconst OBJECTS = {\r\n  /* ===== Primitive data types ===== */\r\n  '[object Null]': TYPES.NULL,\r\n  /* ===== Collections ===== */\r\n  '[object Set]': TYPES.SET,\r\n  '[object WeakSet]': TYPES.WEAK_SET,\r\n  '[object Map]': TYPES.MAP,\r\n  '[object WeakMap]': TYPES.WEAK_MAP,\r\n  /* ===== Array ===== */\r\n  '[object Array]': TYPES.ARRAY,\r\n  '[object Arguments]': TYPES.ARGUMENTS,\r\n  /* ===== Typed ===== */\r\n  '[object DataView]': TYPES.DATA_VIEW,\r\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\r\n  '[object Int8Array]': TYPES.INT8_ARRAY,\r\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\r\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\r\n  '[object Int16Array]': TYPES.INT16_ARRAY,\r\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\r\n  '[object Int32Array]': TYPES.INT32_ARRAY,\r\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\r\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\r\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\r\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\r\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\r\n  /* ===== Object ===== */\r\n  '[object Object]': TYPES.OBJECT,\r\n  '[object Boolean]': TYPES.OBJECT,\r\n  '[object String]': TYPES.OBJECT,\r\n  '[object Number]': TYPES.OBJECT,\r\n  '[object Date]': TYPES.DATE,\r\n  '[object Error]': TYPES.ERROR,\r\n  '[object DocumentFragment]': TYPES.FRAGMENT,\r\n  '[object Function]': TYPES.FUNCTION,\r\n  '[object NodeList]': TYPES.COLLECTION,\r\n  '[object Promise]': TYPES.PROMISE,\r\n  '[object RegExp]': TYPES.REGEXP,\r\n  '[object Text]': TYPES.TEXT\r\n}\r\n\r\nexport default OBJECTS\r\n","import TYPES from '../enum/types'\r\nimport OBJECTS from '../enum/objects'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String} - 返回检测数据类型的字符串\r\n */\r\nconst _type = (val) => {\r\n  const type = Object.prototype.toString.apply(val)\r\n  const _typeof = typeof val\r\n  let name\r\n\r\n  // HTMLElement\r\n  if (val?.tagName && val.nodeType === 1) {\r\n    name = TYPES.ELEMENT\r\n  } else {\r\n    /* ===== 原始值类型（Primitive data types） ===== */\r\n    switch (_typeof) {\r\n      case 'bigint':\r\n        name = TYPES.BIG_INT\r\n        break\r\n      case 'string':\r\n        name = TYPES.STRING\r\n        break\r\n      case 'number':\r\n        name = TYPES.NUMBER\r\n        break\r\n      case 'boolean':\r\n        name = TYPES.BOOLEAN\r\n        break\r\n      case 'undefined':\r\n        name = TYPES.UNDEFINED\r\n        break\r\n      case 'symbol':\r\n        name = TYPES.SYMBOL\r\n        break\r\n      // 对象（引用）类型的数据\r\n      default:\r\n        name = OBJECTS[type]\r\n        break\r\n    }\r\n  }\r\n\r\n  return name || type\r\n}\r\n\r\nexport default _type\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Number 类型\r\n * ========================================================================\r\n * @method isNumber\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Number 类型，返回 true，否则返回 false\r\n */\r\nconst isNumber = (val) => {\r\n  return _type(val) === TYPES.NUMBER\r\n}\r\n\r\nexport default isNumber\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据是否为整数\r\n * ========================================================================\r\n * @method isInteger\r\n * @category Lang\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是整数，返回 true，否则返回 false\r\n */\r\nconst isInteger = (val) => {\r\n  return isNumber(val) && !isNaN(val) && Number(val) === val && val % 1 === 0\r\n}\r\n\r\nexport default isInteger\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据的数据是正无穷或者负无穷\r\n * ========================================================================\r\n * @method isInfinite\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是正无穷或者负无穷，返回 true，否则返回 false\r\n */\r\nconst isInfinite = (val) => {\r\n  return isNumber(val) && (val === Infinity || val === -Infinity)\r\n}\r\n\r\nexport default isInfinite\r\n","import isInteger from '../isInteger'\r\nimport isFloat from '../isFloat'\r\nimport isInfinite from '../isInfinite'\r\n\r\n/**\r\n * （私有方法）获取确切的数值类型\r\n * ========================================================================\r\n * @method typeOfNumber\r\n * @private\r\n * @param {Number} val - 要检测的数值\r\n * @returns {String} - 返回数值类型：integer、float、infinite\r\n */\r\nconst typeOfNumber = (val) => {\r\n  let name = 'number'\r\n\r\n  if (isInteger(val)) {\r\n    name = 'integer'\r\n  } else if (isFloat(val)) {\r\n    name = 'float'\r\n  } else if (isInfinite(val)) {\r\n    name = 'infinite'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default typeOfNumber\r\n","import isNumber from './isNumber'\r\nimport isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据是否为整数\r\n * ========================================================================\r\n * @method isFloat\r\n * @since 0.2.0\r\n * @category Number\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是整数，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isFloat(.1) // -> true\r\n * isFloat(1.01) // -> true\r\n * isFloat(Number(\"3.4556645445E7\")) // -> true\r\n * isFloat(Number(\"3.4556645445E10\")) // -> false\r\n * isFloat(2.0) // -> false\r\n * isFloat(0xffffff) // -> false\r\n * isFloat(NaN) // -> false\r\n * isFloat(Infinity) // -> false\r\n */\r\nfunction isFloat(val) {\r\n  return (\r\n    isNumber(val) &&\r\n    !isNaN(val) &&\r\n    isFinite(val) &&\r\n    !isInteger(val) &&\r\n    Number(val) === val &&\r\n    val % 1 !== 0\r\n  )\r\n}\r\n\r\nexport default isFloat\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为字符串\r\n * ========================================================================\r\n * @method isString\r\n * @category Lang\r\n * @param {*} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是字符串，返回 true，否则返回 false\r\n */\r\nconst isString = (obj) => {\r\n  return _type(obj) === TYPES.STRING\r\n}\r\n\r\nexport default isString\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否只包空格\r\n * ========================================================================\r\n * @method isBlank\r\n * @since 0.2.0\r\n * @category String\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 只包含空格，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isBlank('  ') // -> true\r\n * isBlank(new String()) // -> false\r\n * isBlank('') // -> true\r\n */\r\nfunction isBlank(val) {\r\n  if (!isString(val)) {\r\n    return false\r\n  }\r\n\r\n  return /^\\s*$/.test(val)\r\n}\r\n\r\nexport default isBlank\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为一个基于 base64 编码的字符串。\r\n * ========================================================================\r\n * @method isBase64\r\n * @since 0.2.0\r\n * @category String\r\n * @param {String} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 base64 编码的字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isBase64('Z29vZA==') // -> true\r\n * isBase64('aXNCYXNlNjQ=2') // -> false\r\n */\r\nconst isBase64 = (val) => {\r\n  const REGEXP_BASE64 =\r\n    /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}={2})$/gm\r\n  return isString(val) && (!val.length || REGEXP_BASE64.test(val))\r\n}\r\n\r\nexport default isBase64\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Function 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const blank = () => {}\r\n * const fn = new Function()\r\n *\r\n * function empty(){}\r\n *\r\n * isFunction(empty) // -> true\r\n * isFunction(blank) // -> true\r\n * isFunction(fn) // -> true\r\n * isFunction(parseInt) // -> true\r\n * isFunction(Array) // -> true\r\n * isFunction(Boolean) // -> true\r\n * isFunction(Date) // -> true\r\n * isFunction(Number) // -> true\r\n * isFunction(Object) // -> true\r\n * isFunction(RegExp) // -> true\r\n * isFunction(String) // -> true\r\n *\r\n * isFunction(Math) // -> false\r\n * isFunction(console) // -> false\r\n */\r\nconst isFunction = (val) => {\r\n  return _type(val) === TYPES.FUNCTION\r\n}\r\n\r\nexport default isFunction\r\n","import isFunction from './isFunction'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为对象\r\n * ========================================================================\r\n * @method isObject\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为对象，返回 true，否则返回 false\r\n */\r\nconst isObject = (val) => {\r\n  const type = typeof val\r\n\r\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\r\n}\r\n\r\nexport default isObject\r\n","import isArray from './isArray'\r\n\r\n/**\r\n * 检测测试数据是否为空字数组\r\n * ========================================================================\r\n * @method isEmptyArray\r\n * @since 0.6.0\r\n * @category Array\r\n * @param {Array} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是空数组，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isEmptyArray(new Int8Array([]) // -> false\r\n *\r\n * isEmptyArray([]) // -> true\r\n *\r\n * isEmptyArray(new Array) // -> true\r\n *\r\n * isEmptyArray([1]) // -> false\r\n */\r\nconst isEmptyArray = (val) => {\r\n  return isArray(val) && val.length === 0\r\n}\r\n\r\nexport default isEmptyArray\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @since 0.2.0\r\n * @category Array\r\n * @param {Array} val - 要检测的数据\r\n * @returns {Boolean} - 'val' 是 Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // True\r\n * isArray([]) // -> true\r\n * isArray(new Array()) // -> true\r\n * isArray('type.js'.split('')) // -> true\r\n *\r\n * // False\r\n * // 虽然  arguments 对象看起来也像数组，但是它也不是数组\r\n * isArray(args) // -> false\r\n * // 虽然 HTMLNodeList 的看起来像数组，但它并不是数组\r\n * isArray(document.getElementsByTagName('li')) // -> false\r\n * isArray(LooksLike) // -> false\r\n * isArray(new Int8Array()) // -> false\r\n */\r\nconst isArray = (val) => {\r\n  return Array.isArray ? Array.isArray(val) : _type(val) === TYPES.ARRAY\r\n}\r\n\r\nexport default isArray\r\n","import isObject from './isObject'\r\n\r\n/**\r\n * 检测测试数据是否为类似 Object 类型\r\n * ========================================================================\r\n * @method isObjectLike\r\n * @param {Object} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是类似 Object 类型，返回 true，否则返回 false\r\n */\r\nconst isObjectLike = (val) => {\r\n  return isObject(val) && val !== null\r\n}\r\n\r\nexport default isObjectLike\r\n","import isUndefined from '../isUndefined'\r\n\r\n/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n\r\n  if (hasOwnProperty) {\r\n    // 不建议直接实用对象从原型链继承的 hasOwnProperty() 方法\r\n    // 所以采用直接调用 Object.prototype.hasOwnProperty() 方法\r\n    return hasOwnProperty.call(obj, prop)\r\n  }\r\n\r\n  return (\r\n    // 从对象构造函数的原型链继承的同名属性不算 obj 自身的属性\r\n    !isUndefined(obj[prop]) && obj.constructor.prototype[prop] !== obj[prop]\r\n  )\r\n}\r\n\r\nexport default hasOwn\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否 undefined（未定义）\r\n * ========================================================================\r\n * @method isUndefined\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 undefined（未定义），返回 true，否则返回 false\r\n */\r\nconst isUndefined = (val) => {\r\n  return _type(val) === TYPES.UNDEFINED\r\n}\r\n\r\nexport default isUndefined\r\n","import isPlainObject from './isPlainObject'\r\nimport hasOwn from './utils/hasOwn'\r\n\r\n/**\r\n * 检测测试数据是否为空（单体）对象\r\n * ========================================================================\r\n * @method isEmptyObject\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {Object} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是空对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * function Person(name,age){\r\n *    this.name = name;\r\n *    this.age = age;\r\n * }\r\n *\r\n * isEmptyObject({}) // -> true\r\n * isEmptyObject([]) // true\r\n * isEmptyObject(Person) // true\r\n * isEmptyObject(new Object()) // true\r\n * isEmptyObject(new Boolean()) // true\r\n * isEmptyObject(new Array()) // true\r\n * isEmptyObject(new Date('2017-12-11')) // true\r\n * isEmptyObject(new RegExp('\\s+','ig')) // true\r\n * isEmptyObject(new String()) // true\r\n *\r\n * isEmptyObject(new Function()) // false\r\n * isEmptyObject(['']) // false\r\n * isEmptyObject(null) // false\r\n * isEmptyObject({name:'type.js'}) // -> false\r\n * isEmptyObject(new Person('yaohaixiao',30)) // false\r\n */\r\nconst isEmptyObject = (obj) => {\r\n  let prop\r\n\r\n  if (!isPlainObject(obj)) {\r\n    return false\r\n  }\r\n\r\n  for (prop in obj) {\r\n    /* istanbul ignore else */\r\n    if (hasOwn(obj, prop)) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport default isEmptyObject\r\n","import isObjectLike from './isObjectLike'\r\n\r\n/**\r\n * 检测测试数据是否为普通对象\r\n * ========================================================================\r\n * @method isPlainObject\r\n * @param {Object} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是普通对象，返回 true，否则返回 false\r\n */\r\nconst isPlainObject = (val) => {\r\n  const getPrototypeOf = Object.getPrototypeOf\r\n  let proto\r\n\r\n  // Detect obvious negatives\r\n  if (!isObjectLike(val)) {\r\n    return false\r\n  }\r\n\r\n  proto = val.prototype\r\n\r\n  // JavaScript 对象分为两种：普通对象和函数对象\r\n  // 普通对象：原型是 __proto__，没有 prototype 原型（属性）\r\n  // 函数对象：原型是 prototype ，prototype 只存在于函数对象上\r\n  if (!proto) {\r\n    return true\r\n  }\r\n\r\n  proto = val\r\n\r\n  while (getPrototypeOf(proto) !== null) {\r\n    proto = getPrototypeOf(proto)\r\n  }\r\n\r\n  return getPrototypeOf(val) === proto\r\n}\r\n\r\nexport default isPlainObject\r\n","import isArguments from './isArguments'\r\n\r\n/**\r\n * 检测测试 arguments 对象长度为 0\r\n * ========================================================================\r\n * @method isEmptyArguments\r\n * @since 2.6.0\r\n * @category Array\r\n * @param {Object} val\r\n * @returns {Boolean}\r\n * @example\r\n *\r\n * let args\r\n * const fn = function () {arg = arguments}\r\n *\r\n * fn()\r\n *\r\n * isEmptyArguments(args) // -> true\r\n *\r\n * fn(1)\r\n *\r\n * isEmptyArguments(args) // -> false\r\n */\r\nconst isEmptyArguments = (val) => {\r\n  return isArguments(val) && val.length === 0\r\n}\r\n\r\nexport default isEmptyArguments\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\nimport isObjectLike from './isObjectLike'\r\n\r\n/**\r\n * 检测测试数据是否为 arguments 对象\r\n * ========================================================================\r\n * @method isArguments\r\n * @since 0.2.0\r\n * @category Array\r\n * @param {Object} val - 要检测的数据\r\n * @return {Boolean} ‘val’ 是 Arguments 对象，返回 true，否则返回 false;\r\n * @example\r\n *\r\n * const argsLike = { '0': 3, '1': 4, length: 2 }\r\n * const $items = document.querySelectorAll('.item')\r\n * let args\r\n *\r\n * function sum(a, b){\r\n *   args = arguments\r\n *\r\n *   return a + b\r\n * }\r\n *\r\n * sum(3, 5)\r\n *\r\n * isArguments(argsLike) // -> false\r\n * isArguments([]) // -> false\r\n * isArguments(items) // -> false\r\n *\r\n * is(args) // -> 'arguments'\r\n * isArguments(args) // -> true\r\n */\r\nconst isArguments = (val) => {\r\n  return isObjectLike(val) && _type(val) === TYPES.ARGUMENTS\r\n}\r\n\r\nexport default isArguments\r\n","import isString from './isString'\r\nimport isNull from './isNull'\r\nimport isBuffer from './isBuffer'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isTypedArray from './isTypedArray'\r\nimport isEmptyArray from './isEmptyArray'\r\nimport isEmptyObject from './isEmptyObject'\r\nimport isEmptyArguments from './isEmptyArguments'\r\n\r\n/**\r\n * 检测测试数据是否为空字符串、数组、对象或者空的 arguments 参数\r\n * ========================================================================\r\n * @method isEmpty\r\n * @since 0.2.0\r\n * @category String\r\n * @param {String|Array|Object|Buffer|HTMLCollection|null} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是空字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isEmpty(null);\r\n *\r\n * // 字符串\r\n * isEmpty('') // -> true\r\n * isEmpty(String()) // -> true\r\n * isEmpty(' ') // -> false\r\n *\r\n * // 数组\r\n * isEmpty([]) // -> true\r\n * isEmpty([1]) // -> false\r\n *\r\n * // 对象\r\n * isEmpty(new String()) // -> true\r\n * isEmpty({}) // -> true\r\n * isEmpty({a: 1}) // -> false\r\n *\r\n * // Prototype 对象\r\n * let args\r\n * const fn = function () {arg = arguments}\r\n *\r\n * fn()\r\n *\r\n * isEmpty(fn.prototype) // -> false\r\n *\r\n * // arguments 参数\r\n * isEmpty(args) // -> true\r\n *\r\n * fn(1)\r\n *\r\n * isEmpty(args) // -> false\r\n *\r\n * // buffer\r\n * left buffer = Buffer.alloc(0)\r\n *\r\n * isEmpty(buffer) => true\r\n *\r\n * buffer = Buffer.alloc(10)\r\n *\r\n * isEmpty(buffer) => false\r\n */\r\nconst isEmpty = (val) => {\r\n  return (\r\n    isNull(val) ||\r\n    (isString(val) && val === '') ||\r\n    ((isHTMLCollection(val) || isBuffer(val) || isTypedArray(val)) &&\r\n      !val.length) ||\r\n    isEmptyArguments(val) ||\r\n    isEmptyObject(val) ||\r\n    isEmptyArray(val)\r\n  )\r\n}\r\n\r\nexport default isEmpty\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 null\r\n * ========================================================================\r\n * @method isNull\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 null，返回 true，否则返回 false\r\n */\r\nconst isNull = (val) => {\r\n  return _type(val) === TYPES.NULL\r\n}\r\n\r\nexport default isNull\r\n","import _type from './utils/_type'\r\nimport isObject from './isObject'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测数据的是否为 HTMLNodeList 对象\r\n * ========================================================================\r\n * @method isHTMLCollection\r\n * @since 0.2.0\r\n * @category DOM\r\n * @param {HTMLCollection} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 HTMLNodeList 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $text = document.createTextNode('text')\r\n * const $items = document.querySelectorAll('.item')\r\n * const $fragment = document.createDocumentFragment()\r\n *\r\n * isHTMLCollection($list) // -> false\r\n *\r\n * isHTMLCollection($div) // -> false\r\n *\r\n * isHTMLCollection($text) // -> false\r\n *\r\n * isHTMLCollection($items) // -> true\r\n *\r\n * isHTMLCollection($items) // -> false\r\n */\r\nconst isHTMLCollection = (val) => {\r\n  return !!(isObject(val) && _type(val) === TYPES.COLLECTION)\r\n}\r\n\r\nexport default isHTMLCollection\r\n","/**\r\n * 验证数据是否为 Buffer 类型\r\n * ========================================================================\r\n * @method isBuffer\r\n * @since 1.6.0\r\n * @category Object\r\n * @param {Buffer} val - 待检测的数据\r\n * @returns {Boolean} 'val' 是 Buffer 类型返回 true，否则返回 false\r\n * @example\r\n *\r\n * const buffer = Buffer.alloc(15)\r\n *\r\n * isBuffer(new ArrayBuffer(8)) // -> false\r\n * isBuffer(new Uint8Array(2)) // -> false\r\n *\r\n * isBuffer(buffer) // -> true\r\n */\r\nconst isBuffer = (val) => {\r\n  // Node.js 环境检测 `global`\r\n  const Global =\r\n    typeof global === 'object' &&\r\n    global !== null &&\r\n    global.Object === Object &&\r\n    global\r\n\r\n  // 检测 `globalThis`\r\n  const GlobalThis =\r\n    typeof globalThis === 'object' &&\r\n    globalThis !== null &&\r\n    globalThis.Object === Object &&\r\n    globalThis\r\n\r\n  // 检测 `self`\r\n  const Self =\r\n    typeof self === 'object' && self !== null && self.Object === Object && self\r\n\r\n  // 应用之前检测的 `global object` 的引用\r\n  const _Global = GlobalThis || Global || Self || Function('return this')()\r\n\r\n  // 检测 `exports`\r\n  const Exports =\r\n    typeof exports === 'object' &&\r\n    exports !== null &&\r\n    !exports.nodeType &&\r\n    exports\r\n\r\n  // 检测 `module`\r\n  const Module =\r\n    Exports &&\r\n    typeof module === 'object' &&\r\n    module !== null &&\r\n    !module.nodeType &&\r\n    module\r\n\r\n  // 检测 `module.exports`\r\n  const ModuleExports = Module && Module.exports === Exports\r\n\r\n  // 获取 Buffer 对象的引用\r\n  const Buffer = ModuleExports ? _Global.Buffer : undefined\r\n\r\n  // 获取 isBuffer() 方法\r\n  const detectBuffer = Buffer ? Buffer.isBuffer : () => false\r\n\r\n  return detectBuffer(val)\r\n}\r\n\r\nexport default isBuffer\r\n","import _type from './utils/_type'\r\n/**\r\n * 检测测试数据是否为 TypedArray 类型\r\n * ========================================================================\r\n * @method isTypedArray\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 type arrays 类型，返回 true，否则返回 false\r\n */\r\nconst isTypedArray = (val) => {\r\n  const type = _type(val)\r\n  const isTyped =\r\n    /^(?:Float(?:32|64)|(Int|Uint)(?:8|16|32)|Uint8Clamped|Big(Int|Uint)64)Array$/i\r\n  return isTyped.test(type)\r\n}\r\n\r\nexport default isTypedArray\r\n","// HTML 合法的标签\r\nconst TAGS = [\r\n  'a',\r\n  'abbr',\r\n  'address',\r\n  'area',\r\n  'article',\r\n  'aside',\r\n  'audio',\r\n  'b',\r\n  'base',\r\n  'bdi',\r\n  'bdo',\r\n  'blockquote',\r\n  'body',\r\n  'br',\r\n  'button',\r\n  'canvas',\r\n  'caption',\r\n  'cite',\r\n  'code',\r\n  'col',\r\n  'colgroup',\r\n  'data',\r\n  'datalist',\r\n  'dd',\r\n  'del',\r\n  'details',\r\n  'dfn',\r\n  'dialog',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'em',\r\n  'embed',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'head',\r\n  'header',\r\n  'hgroup',\r\n  'hr',\r\n  'html',\r\n  'i',\r\n  'iframe',\r\n  'img',\r\n  'input',\r\n  'ins',\r\n  'kbd',\r\n  'label',\r\n  'legend',\r\n  'li',\r\n  'link',\r\n  'main',\r\n  'map',\r\n  'mark',\r\n  'math',\r\n  'menu',\r\n  'menuitem',\r\n  'meta',\r\n  'meter',\r\n  'nav',\r\n  'noscript',\r\n  'object',\r\n  'ol',\r\n  'optgroup',\r\n  'option',\r\n  'output',\r\n  'p',\r\n  'param',\r\n  'picture',\r\n  'pre',\r\n  'progress',\r\n  'q',\r\n  'rb',\r\n  'rp',\r\n  'rt',\r\n  'rtc',\r\n  'ruby',\r\n  's',\r\n  'samp',\r\n  'script',\r\n  'search',\r\n  'section',\r\n  'select',\r\n  'slot',\r\n  'small',\r\n  'source',\r\n  'span',\r\n  'strong',\r\n  'style',\r\n  'sub',\r\n  'summary',\r\n  'sup',\r\n  'svg',\r\n  'table',\r\n  'tbody',\r\n  'td',\r\n  'template',\r\n  'textarea',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'time',\r\n  'title',\r\n  'tr',\r\n  'track',\r\n  'u',\r\n  'ul',\r\n  'var',\r\n  'video',\r\n  'wbr'\r\n]\r\n\r\nexport default TAGS\r\n","import isString from '../isString'\r\n\r\n/**\r\n * 检测测试数据是否为有效的时间（字符串）\r\n * ========================================================================\r\n * @method _isTime\r\n * @private\r\n * @param {String} str - 待检测数据（字符串）\r\n * @returns {Boolean}\r\n */\r\nconst _isTime = (str) => {\r\n  const pattern12Hours = /^(0?[1-9]|1[0-2]):[0-5]\\d(\\s(am|pm|AM|PM))?$/\r\n  const pattern24Hours = /^(0?[1-9]|2[0-3]):([0-5]\\d){1,2}$/\r\n\r\n  return isString(str) && (pattern12Hours.test(str) || pattern24Hours.test(str))\r\n}\r\n\r\nexport default _isTime\r\n","import isString from '../isString'\r\n\r\n/**\r\n * 检测测试数据是否为有效的日期（字符串）\r\n * ========================================================================\r\n * @method _isDate\r\n * @private\r\n * @param {String} str - 待检测数据（字符串）\r\n * @returns {Boolean}\r\n */\r\nconst _isDate = (str) => {\r\n  return isString(str) && !isNaN(Date.parse(str))\r\n}\r\n\r\nexport default _isDate\r\n","import isBlank from '../isBlank'\r\nimport isBase64 from '../isBase64'\r\nimport isChinese from '../isChinese'\r\nimport isEmail from '../isEmail'\r\nimport isEmpty from '../isEmpty'\r\nimport isUUID from '../isUUID'\r\nimport isIPAddress from '../isIPAddress'\r\nimport isHex from '../isHex'\r\nimport isHTML from '../isHTML'\r\nimport isSVG from '../isSVG'\r\nimport isJSON from '../isJSON'\r\nimport isTime from '../isTime'\r\n\r\n/**\r\n * （私有方法）获取确切的字符串类型\r\n * ========================================================================\r\n * @method typeOfString\r\n * @private\r\n * @param {String} val - 要检测的字符串\r\n * @returns {String} 返回字符串类型：blank、chinese、email、empty... 等等\r\n */\r\nconst typeOfString = (val) => {\r\n  let name = 'string'\r\n\r\n  if (isEmpty(val)) {\r\n    name = 'empty'\r\n  } else if (isBlank(val)) {\r\n    name = 'blank'\r\n  } else if (isUUID(val)) {\r\n    name = 'guid'\r\n  } else if (isBase64(val)) {\r\n    name = 'base64'\r\n  } else if (isChinese(val)) {\r\n    name = 'chinese'\r\n  } else if (isEmail(val)) {\r\n    name = 'email'\r\n  } else if (isIPAddress(val)) {\r\n    name = 'IP address'\r\n  } else if (isHex(val)) {\r\n    name = 'hex'\r\n  } else if (isHTML(val)) {\r\n    if (isSVG(val)) {\r\n      name = 'svg'\r\n    } else {\r\n      name = 'html'\r\n    }\r\n  } else if (isJSON(val)) {\r\n    name = 'json'\r\n  } else if (isTime(val)) {\r\n    name = 'time'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default typeOfString\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为合法的 UUID 字符串\r\n * ========================================================================\r\n * @method isUUID\r\n * @since 2.1.0\r\n * @see https://stackoverflow.com/questions/7905929/how-to-test-valid-uuid-guid\r\n * @param {String} str - 要检测的数据\r\n * @returns {Boolean} 'str' 为合法的 UUID 字符串，返回 true，否则返回 false\r\n */\r\nconst isUUID = (str) => {\r\n  const pattern =\r\n    /^{?([0-9a-fA-F]{8})-?(([0-9a-fA-F]{4}-?){3})([0-9a-fA-F]{12})}?$/i\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  return pattern.test(str)\r\n}\r\n\r\nexport default isUUID\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测字符串是否为中文字符\r\n * ========================================================================\r\n * Wiki 介绍中文字符包含以下内容：\r\n *\r\n * 1. 中文汉字\r\n * 2. 象形文字扩展 A-H\r\n * 3. 兼容象形文字符\r\n * 4. 兼容表意文字增补字符\r\n * 5. 中文标点符号\r\n * 6. 兼容标点符号\r\n *\r\n * 其中：\r\n *\r\n * 兼容象形文字符：[0xf900, 0xfaff],（https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs）和\r\n * 兼容表意文字增补字符：[0x2f800, 0x2fa1f]（https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs_Supplement）\r\n *\r\n * 只是看上去像汉字，因此在 isChinese() 方法中也没有纳入到汉字字符\r\n * ========================================================================\r\n * @method isChinese\r\n * @since 1.2.0\r\n * @category String\r\n * @param {String} str - （必须）检测字符串\r\n * @param {Boolean} [includePunctuation] - （可选）是否包含标点符号：默认值：true\r\n * @returns {boolean} - ‘val’ 是中文字符，返回 true，否则返回 false;\r\n * @example\r\n *\r\n * let chinese\r\n *\r\n * // 非字符串\r\n * isChinese(null) // -> false\r\n * isChinese(chinese) // -> false\r\n * isChinese({}) // -> false\r\n * isChinese([]) // -> false\r\n * isChinese(Symbol('symbol')) // -> false\r\n *\r\n * // Ascii 字符\r\n * isChinese(12) // -> false\r\n * isChinese('chinese') // -> false\r\n * isChinese('+=*\\/') // -> false\r\n *\r\n * // 汉字字符\r\n * isChinese('汉字字符：尅靈') // -> true\r\n * isChinese('扩展字符：㐥𠁜𪝹𫞺𫡡𭀔𭍓') // -> true\r\n *\r\n * // 标点符号\r\n * isChinese('标点符号：。，、；：×·—…（）『』【】《》？！‘’“”～') // -> true\r\n * isChinese('兼容标点符号：︰︱︲︳︴︵︶︷︸︹︺︻︼︽︾︿﹀﹁﹂﹃﹄﹅﹆﹇﹈﹉﹊﹋﹌﹍﹎﹏') // -> true\r\n *\r\n * // 不包含标点符号，则以下检测无法通过\r\n * isChinese('标点符号：。，、；：×·—…（）『』【】《》？！‘’“”～', false) // -> false\r\n */\r\nconst isChinese = (str, includePunctuation = true) => {\r\n  // 转换成正则表达式\r\n  const toRegExp = (range) => {\r\n    const pattern = range\r\n      .map((range) => {\r\n        const rangeStart = range[0]\r\n        const rangeEnd = range[1]\r\n        const hexStart = rangeStart.toString(16)\r\n        const hexEnd = rangeEnd.toString(16)\r\n\r\n        if (rangeStart === rangeEnd) {\r\n          return `\\\\u{${hexStart}}`\r\n        }\r\n        return `[\\\\u{${hexStart}}-\\\\u{${hexEnd}}]`\r\n      })\r\n      .join('|')\r\n\r\n    return new RegExp(`^(?:${pattern})+$`, 'u')\r\n  }\r\n  // 文字\r\n  // https://en.wikipedia.org/wiki/CJK_Unified_Ideographs\r\n  const chineseIdeographs = [\r\n    // 中文汉字\r\n    [0x4e00, 0x9fff],\r\n\r\n    // 象形文字扩展 A - H\r\n    [0x3400, 0x4dbf],\r\n    [0x20000, 0x2a6df],\r\n    [0x2a700, 0x2b73f],\r\n    [0x2b740, 0x2b81f],\r\n    [0x2b820, 0x2ceaf],\r\n    [0x2ceb0, 0x2ebef],\r\n    [0x30000, 0x3134f],\r\n    [0x31350, 0x323af]\r\n  ]\r\n  // 标点符号\r\n  const chinesePunctuations = [\r\n    // ，\r\n    [0xff0c, 0xff0c],\r\n    // 。\r\n    [0x3002, 0x3002],\r\n    // ·\r\n    [0x00b7, 0x00b7],\r\n    // ×\r\n    [0x00d7, 0x00d7],\r\n    // —\r\n    [0x2014, 0x2014],\r\n    // ‘\r\n    [0x2018, 0x2018],\r\n    // ’\r\n    [0x2019, 0x2019],\r\n    // “\r\n    [0x201c, 0x201c],\r\n    // ”\r\n    [0x201d, 0x201d],\r\n    // …\r\n    [0x2026, 0x2026],\r\n    // 、\r\n    [0x3001, 0x3001],\r\n    // 《\r\n    [0x300a, 0x300a],\r\n    // 》\r\n    [0x300b, 0x300b],\r\n    // 『\r\n    [0x300e, 0x300e],\r\n    // 』\r\n    [0x300f, 0x300f],\r\n    // 【\r\n    [0x3010, 0x3010],\r\n    // 】\r\n    [0x3011, 0x3011],\r\n    // ！\r\n    [0xff01, 0xff01],\r\n    // （\r\n    [0xff08, 0xff08],\r\n    // ）\r\n    [0xff09, 0xff09],\r\n    // ：\r\n    [0xff1a, 0xff1a],\r\n    // ；\r\n    [0xff1b, 0xff1b],\r\n    // ？\r\n    [0xff1f, 0xff1f],\r\n    // ～\r\n    [0xff5e, 0xff5e],\r\n    // 兼容性标点符号\r\n    // https://en.wikipedia.org/wiki/CJK_Compatibility_Forms\r\n    [0xfe30, 0xfe4f]\r\n  ]\r\n  const asciiChars = /\\w+/\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  if (asciiChars.test(str)) {\r\n    return false\r\n  }\r\n\r\n  const pattern = includePunctuation\r\n    ? toRegExp(chineseIdeographs.concat(chinesePunctuations))\r\n    : toRegExp(chineseIdeographs)\r\n\r\n  return pattern.test(str)\r\n}\r\n\r\nexport default isChinese\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测是否为正确的 Email 邮箱地址格式\r\n * ========================================================================\r\n * @method isEmail\r\n * @since 0.2.0\r\n * @category String\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Email 邮箱地址格式，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isEmail('robert@gmail.com') // => true\r\n * isEmail('yaohaixiao@gmail.c') // => true\r\n * isEmail('haixiao-yao@gmail.com') // => true\r\n * isEmail('haixiao_yao@gmail.com') // => true\r\n * isEmail('haixiao&yao@gmail.com') // => true\r\n * isEmail('haixiao~yao@gmail.com') // => true\r\n * isEmail('haixiao+yao@gmail.com') // => true\r\n * isEmail('haixiao^yao@gmail.com') // => true\r\n * isEmail('haixiao%yao@gmail.com') // => true\r\n * isEmail('haixiao$yao@gmail.com') // => true\r\n * isEmail('haixiao.yao@gmail.com') // => true\r\n * isEmail('haixiao/yao@gmail.com') // => true\r\n * isEmail('haixiao#yao@gmail.com') // => true\r\n * isEmail('yao{haixiao@gmail.com') // => true\r\n * isEmail('yao|haixiao@gmail.com') // => true\r\n * isEmail('yao}haixiao@gmail.com') // => true\r\n *\r\n * isEmail('robert#gmail.com') // => false\r\n * isEmail('yao\\haixiao@gmail.com') // => false\r\n * isEmail('yao[haixiao@gmail.com') // => false\r\n */\r\nconst isEmail = (val) => {\r\n  const pattern =\r\n    /^([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)$/\r\n  return isString(val) && pattern.test(val)\r\n}\r\n\r\nexport default isEmail\r\n","import isString from './isString'\r\n\r\n/**\r\n * 验证是否为（v4 or v6） IP 地址\r\n * ========================================================================\r\n * @method isIPAddress\r\n * @category Lang\r\n * @param {String} str - 待检测的数据（字符串）\r\n * @returns {Boolean} 'val' 是 IP 地址，返回 true，否则返回 false\r\n */\r\nconst isIPAddress = (str) => {\r\n  const ipV6 =\r\n    /(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]+|::(ffff(:0{1,4})?:)?((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d)|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d))/\r\n  const ipV4 =\r\n    /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/\r\n  return isString(str) && (ipV4.test(str) || ipV6.test(str))\r\n}\r\n\r\nexport default isIPAddress\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为 16 进制编码的字符串\r\n * ========================================================================\r\n * @method isHex\r\n * @since 0.2.0\r\n * @category String\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 16 进制编码的字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isHex('#ffffff') // -> true\r\n * isHex('f3f3f3') // -> true\r\n * isHex('#h1f1f1') // -> false\r\n * isHex('h1f1x1') // -> false\r\n */\r\nconst isHex = (val) => {\r\n  const REGEXP_HEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n  return isString(val) && REGEXP_HEX.test(val)\r\n}\r\n\r\nexport default isHex\r\n","import isString from './isString'\r\nimport trim from './utils/trim'\r\nimport TAGS from './enum/tags'\r\n\r\n/**\r\n * 检测测试数据是否为合法的 HTML 代码\r\n * ========================================================================\r\n * @method isHTML\r\n * @since 0.5.0\r\n * @category String\r\n * @see https://github.com/sindresorhus/html-tags\r\n * @see https://github.com/sindresorhus/is-html\r\n * @param {String} str - 要检测的数据\r\n * @returns {Boolean} 'val' 为合法的 HTML 代码，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // 包含 doctype 标签：\r\n * isHTML('<!doctype html>') // -> true\r\n * isHTML('\\n\\n<!doctype html><html>') // -> true\r\n *\r\n * // 包含：<html>，<body> 或者 <x-*> 标签：\r\n * isHTML('<html>') // -> true\r\n * isHTML('<html></html>') // -> true\r\n * isHTML('<html lang=\"en\"></html>') // -> true\r\n * isHTML('<html><body></html>') // -> true\r\n * isHTML('<html><body class=\"no-js\"></html>') // -> true\r\n * isHTML('<x-unicorn>') // -> true\r\n *\r\n * // 包含任何合法的 HTML 标签：\r\n * isHTML('<p>foo</p>') // -> true\r\n * isHTML('<a href=\"#\">foo</a>') // -> true\r\n * isHTML('<br />') // -> true\r\n *\r\n * // 无法匹配 XML 标签：\r\n * isHTML('<attribute>address</attribute>') // -> false\r\n * isHTML('<address>Wuhan City</address>') // -> false\r\n * isHTML('<age>20</age>') // -> false\r\n * isHTML('<gender>mail</gender>') // -> false\r\n * isHTML('<career>programmer</career>') // -> false\r\n */\r\nconst isHTML = (str) => {\r\n  let html\r\n  let basic\r\n  let full\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  // 为了提高性能，我们将其限制在合理的长度内。\r\n  html = trim(str).slice(0, 1000)\r\n  basic = /\\s*<!doctype html>|<html\\b[^>]*>|<body\\b[^>]*>|<x-[^>]+>/i\r\n  full = new RegExp(TAGS.map((tag) => `<${tag}\\\\b[^>]*>`).join('|'), 'i')\r\n\r\n  return basic.test(html) || full.test(html)\r\n}\r\n\r\nexport default isHTML\r\n","const trim = (str) => {\r\n  /* istanbul ignore else */\r\n  if (str.trim) {\r\n    return str.trim()\r\n  }\r\n\r\n  return str.replace(/^\\s+|\\s+$/g, '')\r\n}\r\n\r\nexport default trim\r\n","import isString from './isString'\r\n\r\nconst isSVG = (str) => {\r\n  const declaration = '(?:<\\\\?xml[^>]*>\\\\s*)?'\r\n  const doctype =\r\n    '(?:<\\\\!doctype svg[^>]*\\\\s*(?:\\\\[?(?:\\\\s*<![^>]*>\\\\s*)*\\\\]?)*[^>]*>\\\\s*)?'\r\n  const content = '<svg[^>]*>[^]*<\\\\/svg>\\\\s*$'\r\n  const svg = `^\\\\s*${declaration}${doctype}${content}\\\\s*$`\r\n  const pattern = new RegExp(svg, 'i')\r\n\r\n  return isString(str) && pattern.test(str)\r\n}\r\n\r\nexport default isSVG\r\n","import isString from './isString'\r\nimport isBlank from './isBlank'\r\n\r\n/**\r\n * 检测测试数据是否为 JSON 格式字符串数据\r\n * ========================================================================\r\n * @method isJSON\r\n * @param {String} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 JSON 格式字符串，返回 true，否则返回 false\r\n */\r\nconst isJSON = (val) => {\r\n  if (!isString(val) || isBlank(val) || !val) {\r\n    return false\r\n  }\r\n\r\n  val = val.replace(/\\\\(?:([\"\\\\/bfnrt])|(u[0-9a-fA-F]{4}))/g, '@')\r\n  val = val.replace(\r\n    /\"[\\w\\s]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?/g,\r\n    ']'\r\n  )\r\n  val = val.replace(/(?:^|:|,)(?:\\s*\\[)+/g, '')\r\n\r\n  return /^[\\],:{}\\s]*$/.test(val)\r\n}\r\n\r\nexport default isJSON\r\n","import _isTime from './utils/_isTime'\r\nimport _isDate from './utils/_isDate'\r\n\r\n/**\r\n * 检测测试数据是否为有效的时间（字符串）\r\n * ========================================================================\r\n * @method isTime\r\n * @since 1.4.0\r\n * @param {String} str - （必须）待测试的字符串\r\n * @param {String} [type] - 测试的时间类型：\r\n *                          time - 时间；\r\n *                          date - 日期；\r\n *                          不传 - 时间或者日期皆可\r\n * @returns {Boolean} 'val' 是有效的时间（字符串），返回 true，否则返回 false\r\n */\r\nconst isTime = (str, type) => {\r\n  switch (type) {\r\n    case 'time':\r\n      return _isTime(str)\r\n    case 'date':\r\n      return _isDate(str)\r\n    default:\r\n      return _isTime(str) || _isDate(str)\r\n  }\r\n}\r\n\r\nexport default isTime\r\n","import isFunction from './isFunction'\r\nimport isNativeFunction from './isNativeFunction'\r\n\r\n/**\r\n * 检测测试函数是否为构造函数\r\n * ========================================================================\r\n * @method isConstructor\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {Function|Object} fn - 要测试的（构造）函数\r\n * @returns {Boolean} - fn 是构造函数，返回 true，否则返回 false;\r\n * @example\r\n *\r\n * const fn = function(){};\r\n * const ff = class {};\r\n * const callback = () => {}\r\n *\r\n * isConstructor(fn) // -> true\r\n * isConstructor(ff) // -> true\r\n * isConstructor(callback) // -> false\r\n * isConstructor(console.log) // -> false\r\n *\r\n * isConstructor(Math) // -> false\r\n * isConstructor(Boolean) // -> true\r\n * isConstructor(Array) // -> true\r\n * isConstructor(Function) // -> true\r\n * isConstructor(Date) // -> true\r\n * isConstructor(RegExp) // -> true\r\n * isConstructor(Object) // -> true\r\n * isConstructor(Promise) // -> true\r\n */\r\nconst isConstructor = (fn) => {\r\n  let proto = null\r\n  let constructor = null\r\n  let instance\r\n\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  proto = fn.prototype\r\n\r\n  if (!proto) {\r\n    return false\r\n  }\r\n\r\n  constructor = fn.constructor\r\n\r\n  if (\r\n    isNativeFunction(fn) &&\r\n    (constructor === Function || constructor === fn)\r\n  ) {\r\n    return true\r\n  }\r\n\r\n  // 判断 fn 是否为 Promise 构造函数\r\n  instance = new fn()\r\n\r\n  // 判断 constructor\r\n  return (\r\n    (instance.constructor === fn && instance instanceof fn) ||\r\n    (instance.constructor === Object && instance instanceof Object)\r\n  )\r\n}\r\n\r\nexport default isConstructor\r\n","import isFunction from './isFunction'\r\n\r\n/**\r\n * 检测测试数据是否为 JavaScript 内置函数\r\n * ========================================================================\r\n * @method isNativeFunction\r\n * @param {Function|Object} fn - 要测试的函数\r\n * @returns {Boolean} - fn 是内置函数，返回 true，否则返回 false;\r\n */\r\nconst isNativeFunction = (fn) => {\r\n  return isFunction(fn) && /\\{\\s*\\[native code\\]\\s*\\}/.test('' + fn)\r\n}\r\n\r\nexport default isNativeFunction\r\n","import isPrototype from '../isPrototype'\r\nimport isVNode from '../isVNode'\r\nimport isXML from '../isXML'\r\n\r\n/**\r\n * （私有方法）获取确切的对象类型\r\n * ========================================================================\r\n * @method _getExactTypeOfString\r\n * @private\r\n * @param {String} val - 要检测的字符串\r\n * @returns {String} 返回对象类型：prototype、vnode、xml\r\n */\r\nconst typeOfObject = (val) => {\r\n  let name = 'object'\r\n\r\n  if (isXML(val)) {\r\n    name = 'xml'\r\n  } else if (isVNode(val)) {\r\n    name = 'vnode'\r\n  } else if (isPrototype(val)) {\r\n    name = 'prototype'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default typeOfObject\r\n","import hasOwn from './utils/hasOwn'\r\nimport isObject from './isObject'\r\n\r\n/**\r\n * 判断是否未 VNode 对象\r\n * =============================================================\r\n * @method isVNode\r\n * @param {Object} node - 要检测的数据\r\n * @returns {Boolean} 'val' 是 VNode 类型，返回 true，否则返回 false\r\n */\r\nconst isVNode = (node) => {\r\n  return node !== null && isObject(node) && hasOwn(node, 'componentOptions')\r\n}\r\n\r\nexport default isVNode\r\n","/**\r\n * 检测是否为 XML 文档\r\n * ========================================================================\r\n * @method isXML\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 XML 文档，返回 true，否则返回 false\r\n */\r\nconst isXML = (val) => {\r\n  const documentElement = val && (val.ownerDocument || val).documentElement\r\n  return documentElement ? documentElement.nodeName !== 'HTML' : false\r\n}\r\n\r\nexport default isXML\r\n","import isConstructor from './isConstructor'\r\n\r\n/**\r\n * 判断是否为 prototype 对象\r\n * ========================================================================\r\n * @method isPrototype\r\n * @param {Function|Object} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 prototype 对象，返回 true，否则返回 false\r\n */\r\nconst isPrototype = (val) => {\r\n  const OP = Object.prototype\r\n  const Ctor = val ? val.constructor : null\r\n  const proto = (isConstructor(Ctor) && Ctor.prototype) || OP\r\n\r\n  return val === proto\r\n}\r\n\r\nexport default isPrototype\r\n","import _type from './utils/_type'\r\nimport typeOfNumber from './utils/typeOfNumber'\r\nimport typeOfString from './utils/typeOfString'\r\nimport typeOfObject from './utils/typeOfObject'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method is\r\n * @since 0.2.0\r\n * @category Base\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String} 返回确切的数据类型名称\r\n * @example\r\n *\r\n * // 基础值类型\r\n * is('js') // -> string\r\n * is(' ') // -> blank\r\n * is('Z29vZA==') // -> base64\r\n * is('中国梦') // -> chinese\r\n * is('type.js@gmail.com') // -> email\r\n * is('') // -> empty\r\n * is('3C8021B0-423D-475D-BECF-63ED5ED34563') // -> guid\r\n * is('3C8021B0423D475DBECF63ED5ED34563') // -> guid\r\n * is('#ffffff') // -> hex\r\n * is('<h2>中国梦</h2>') // -> html\r\n * isIPAddress('126.11.15.255') // -> IP address\r\n * is('{\"prop\":\"JSON\"}') // -> json\r\n * is('11:23 am') // -> time\r\n * is('Jul 08 2023') // -> time\r\n * is(2023) // -> integer\r\n * is(3.0) // -> integer\r\n * is(3.01) // -> float\r\n * is(Infinity) // -> infinite\r\n * is(true) // -> boolean\r\n * is(null) // -> null\r\n * is(Example) // -> undefined\r\n * is(Symbol()) // -> symbol\r\n * is(BigInt(42)) // -> bigint\r\n *\r\n * // Set/WeakSet/Map/WeakMap\r\n * is(new Set()) // -> set\r\n * is(new WeakSet()) // -> weakset\r\n * is(new Map()) // -> map\r\n * is(new WeakMap()) // -> weakmap\r\n *\r\n * // Object 对象相关\r\n * is({}) // -> object\r\n * is(new Object()) // -> object\r\n * is(Object.prototype) // -> prototype\r\n * is(XML) // -> xml\r\n * is(Object.create(null)) // -> object\r\n * is(new String()) // -> object\r\n * is(new Number()) // -> object\r\n * is(new Boolean()) // -> object\r\n * is(new Error()) // -> error\r\n * is(new Date()) // -> data\r\n * is(new RegExp('/s/')) // -> regexp\r\n * is(/\\s+/ig) // -> regexp\r\n * is(() => {}) // -> function\r\n * is(args) // -> arguments\r\n * is(dv) // -> dataview\r\n * is(document.querySelector('#list')) // -> element\r\n * is(document.querySelectorAll('.item')) // -> coolection\r\n * is(document.createTextNode('text')) // -> text\r\n * is(document.createDocumentFragment()) // -> fragment\r\n *\r\n * // Array 相关\r\n * is([]) // -> array\r\n * is(new ArrayBuffer(8)) // -> arraybubber\r\n * is(new Int8Array([])) // -> int8array\r\n * is(new Int16Array([])) // -> int16array\r\n * is(new Int32Array([])) // -> int32array\r\n * is(new Uint8Array([])) // -> uint8array\r\n * is(new Uint8ClampedArray([])) // -> uint8clampedarray\r\n * is(new Uint16Array([])) // -> uint16array\r\n * is(new Uint32Array([])) // -> uint32array\r\n * is(new Float32Array([])) // -> float32array\r\n * is(new Float64Array([])) // -> float64array\r\n * is(new BigInt64Array(64)) // -> bigint64array\r\n * is(new BigUint64Array(64)) // -> biguint64array\r\n */\r\nconst is = (val) => {\r\n  const type = _type(val)\r\n  let name\r\n\r\n  switch (type) {\r\n    case 'number':\r\n      name = typeOfNumber(val)\r\n      break\r\n    case 'string':\r\n      name = typeOfString(val)\r\n      break\r\n    case 'object':\r\n      name = typeOfObject(val)\r\n      break\r\n    default:\r\n      name = type\r\n      break\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default is\r\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","isNumber","isInteger","isNaN","Number","typeOfNumber","isFinite","isFloat","Infinity","isInfinite","isString","obj","isBlank","test","isFunction","isObject","isEmptyArray","Array","isArray","length","isObjectLike","hasOwn","prop","hasOwnProperty","call","constructor","isEmptyObject","getPrototypeOf","proto","isPlainObject","isEmptyArguments","isArguments","isEmpty","isNull","isHTMLCollection","Global","global","GlobalThis","globalThis","Self","self","_Global","Function","Exports","exports","Module","module","Buffer","undefined","isBuffer","isTypedArray","TAGS","_isTime","str","_isDate","Date","parse","typeOfString","isBase64","includePunctuation","toRegExp","range","pattern","map","rangeStart","rangeEnd","hexStart","hexEnd","join","RegExp","chineseIdeographs","concat","isChinese","isEmail","isIPAddress","isHex","html","basic","full","trim","replace","slice","tag","isHTML","isSVG","isJSON","isTime","isConstructor","fn","instance","isNativeFunction","typeOfObject","node","documentElement","ownerDocument","nodeName","isXML","OP","Ctor","isPrototype"],"mappings":"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AAXC,QACI,OAAXA,QACAA,OAAO3C,SAAWA,QAClB2C,OAGIC,EACkB,iBAAfC,YACQ,OAAfA,YACAA,WAAW7C,SAAWA,QACtB6C,WAGIC,EACY,iBAATC,MAA8B,OAATA,MAAiBA,KAAK/C,SAAWA,QAAU+C,KAGnEC,EAAUJ,GAAcF,GAAUI,GAAQG,SAAS,cAATA,GAG1CC,EACe,iBAAZC,SACK,OAAZA,UACCA,QAAQ5C,UACT4C,QAGIC,EACJF,GACkB,iBAAXG,QACI,OAAXA,SACCA,OAAO9C,UACR8C,OAMIC,EAHgBF,GAAUA,EAAOD,UAAYD,EAGpBF,EAAQM,YAASC,EAKhD,OAFqBD,EAASA,EAAOE,SAAW,KAAM,GAElC1D,EAAG,EHAM0D,CAAS1D,IIrDnB,CAACA,IACpB,MAAMC,EAAOF,EAAMC,GAGnB,MADE,gFACasB,KAAKrB,EAAI,EJiDsB0D,CAAa3D,MACtDA,EAAI4B,QACPW,EAAiBvC,IACjBmC,EAAcnC,IACdyB,EAAazB,GKlEX4D,EAAO,CACX,IACA,OACA,UACA,OACA,UACA,QACA,QACA,IACA,OACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,KACA,KACA,KACA,QACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,SACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,OACA,MACA,OACA,OACA,OACA,WACA,OACA,QACA,MACA,WACA,SACA,KACA,WACA,SACA,SACA,IACA,QACA,UACA,MACA,WACA,IACA,KACA,KACA,KACA,MACA,OACA,IACA,OACA,SACA,SACA,UACA,SACA,OACA,QACA,SACA,OACA,SACA,QACA,MACA,UACA,MACA,MACA,QACA,QACA,KACA,WACA,WACA,QACA,KACA,QACA,OACA,QACA,KACA,QACA,IACA,KACA,MACA,QACA,OC7GIC,EAAWC,GAIR3C,EAAS2C,KAHO,+CAGiBx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"}