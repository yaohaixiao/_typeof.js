{"version":3,"file":"isEmptyObject.js","sources":["../enum/types.js","../enum/objects.js","../utils/_type.js","../isObject.js","../isFunction.js","../isPlainObject.js","../isObjectLike.js","../utils/hasOwn.js","../isUndefined.js","../isEmptyObject.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\r\nconst TYPES = {\r\n  /* ===== Primitive data types ===== */\r\n  BIG_INT: 'bigint',\r\n  BOOLEAN: 'boolean',\r\n  NULL: 'null',\r\n  NUMBER: 'number',\r\n  UNDEFINED: 'undefined',\r\n  STRING: 'string',\r\n  SYMBOL: 'symbol',\r\n  /* ===== Collections ===== */\r\n  SET: 'set',\r\n  WEAK_SET: 'weakset',\r\n  MAP: 'map',\r\n  WEAK_MAP: 'weakmap',\r\n  /* ===== Array ===== */\r\n  ARRAY: 'array',\r\n  ARGUMENTS: 'arguments',\r\n  /* ===== Typed ===== */\r\n  DATA_VIEW: 'dataview',\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  INT8_ARRAY: 'int8array',\r\n  UNIT8_ARRAY: 'uint8array',\r\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\r\n  INT16_ARRAY: 'int16array',\r\n  UNIT16_ARRAY: 'uint16array',\r\n  INT32_ARRAY: 'int32array',\r\n  UNIT32_ARRAY: 'uint32array',\r\n  FLOAT32_ARRAY: 'float32array',\r\n  FLOAT64_ARRAY: 'float64array',\r\n  BIG_INT64_ARRAY: 'bigint64array',\r\n  BIG_UINT64_ARRAY: 'biguint64array',\r\n  /* ===== Object ===== */\r\n  OBJECT: 'object',\r\n  COLLECTION: 'collection',\r\n  DATE: 'date',\r\n  ELEMENT: 'element',\r\n  ERROR: 'error',\r\n  FRAGMENT: 'fragment',\r\n  FUNCTION: 'function',\r\n  PROMISE: 'promise',\r\n  REGEXP: 'regexp',\r\n  TEXT: 'text'\r\n}\r\n\r\nexport default TYPES\r\n","import TYPES from './types'\r\n\r\n// Object.prototype.toString() 输出的类型名称枚举值\r\nconst OBJECTS = {\r\n  /* ===== Primitive data types ===== */\r\n  '[object Null]': TYPES.NULL,\r\n  /* ===== Collections ===== */\r\n  '[object Set]': TYPES.SET,\r\n  '[object WeakSet]': TYPES.WEAK_SET,\r\n  '[object Map]': TYPES.MAP,\r\n  '[object WeakMap]': TYPES.WEAK_MAP,\r\n  /* ===== Array ===== */\r\n  '[object Array]': TYPES.ARRAY,\r\n  '[object Arguments]': TYPES.ARGUMENTS,\r\n  /* ===== Typed ===== */\r\n  '[object DataView]': TYPES.DATA_VIEW,\r\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\r\n  '[object Int8Array]': TYPES.INT8_ARRAY,\r\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\r\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\r\n  '[object Int16Array]': TYPES.INT16_ARRAY,\r\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\r\n  '[object Int32Array]': TYPES.INT32_ARRAY,\r\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\r\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\r\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\r\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\r\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\r\n  /* ===== Object ===== */\r\n  '[object Object]': TYPES.OBJECT,\r\n  '[object Boolean]': TYPES.OBJECT,\r\n  '[object String]': TYPES.OBJECT,\r\n  '[object Number]': TYPES.OBJECT,\r\n  '[object Date]': TYPES.DATE,\r\n  '[object Error]': TYPES.ERROR,\r\n  '[object DocumentFragment]': TYPES.FRAGMENT,\r\n  '[object Function]': TYPES.FUNCTION,\r\n  '[object NodeList]': TYPES.COLLECTION,\r\n  '[object Promise]': TYPES.PROMISE,\r\n  '[object RegExp]': TYPES.REGEXP,\r\n  '[object Text]': TYPES.TEXT\r\n}\r\n\r\nexport default OBJECTS\r\n","import TYPES from '../enum/types'\r\nimport OBJECTS from '../enum/objects'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String}\r\n */\r\nconst _type = (val) => {\r\n  const type = Object.prototype.toString.apply(val)\r\n  const _typeof = typeof val\r\n  let name\r\n\r\n  // HTMLElement\r\n  if (val?.tagName && val.nodeType === 1) {\r\n    name = TYPES.ELEMENT\r\n  } else {\r\n    /* ===== 原始值类型（Primitive data types） ===== */\r\n    switch (_typeof) {\r\n      case 'bigint':\r\n        name = TYPES.BIG_INT\r\n        break\r\n      case 'string':\r\n        name = TYPES.STRING\r\n        break\r\n      case 'number':\r\n        name = TYPES.NUMBER\r\n        break\r\n      case 'boolean':\r\n        name = TYPES.BOOLEAN\r\n        break\r\n      case 'undefined':\r\n        name = TYPES.UNDEFINED\r\n        break\r\n      case 'symbol':\r\n        name = TYPES.SYMBOL\r\n        break\r\n      // 对象（引用）类型的数据\r\n      default:\r\n        name = OBJECTS[type]\r\n        break\r\n    }\r\n  }\r\n\r\n  return name || type\r\n}\r\n\r\nexport default _type\r\n","import isFunction from './isFunction'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为对象\r\n * ========================================================================\r\n * @method isObject\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为对象，返回 true，否则返回 false\r\n */\r\nconst isObject = (val) => {\r\n  const type = typeof val\r\n\r\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\r\n}\r\n\r\nexport default isObject\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @category Lang\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Function 类型，返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  const type = _type(val)\r\n  return type === TYPES.FUNCTION\r\n}\r\n\r\nexport default isFunction\r\n","import isObjectLike from './isObjectLike'\r\n\r\n/**\r\n * 检测测试数据是否为普通对象\r\n * ========================================================================\r\n * @method isPlainObject\r\n * @param {Object} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是普通对象，返回 true，否则返回 false\r\n */\r\nconst isPlainObject = (val) => {\r\n  const getPrototypeOf = Object.getPrototypeOf\r\n  let proto\r\n\r\n  // Detect obvious negatives\r\n  if (!isObjectLike(val)) {\r\n    return false\r\n  }\r\n\r\n  proto = val.prototype\r\n\r\n  // JavaScript 对象分为两种：普通对象和函数对象\r\n  // 普通对象：原型是 __proto__，没有 prototype 原型（属性）\r\n  // 函数对象：原型是 prototype ，prototype 只存在于函数对象上\r\n  if (!proto) {\r\n    return true\r\n  }\r\n\r\n  proto = val\r\n\r\n  while (getPrototypeOf(proto) !== null) {\r\n    proto = getPrototypeOf(proto)\r\n  }\r\n\r\n  return getPrototypeOf(val) === proto\r\n}\r\n\r\nexport default isPlainObject\r\n","import isObject from './isObject'\r\n\r\n/**\r\n * 检测测试数据是否为类似 Object 类型\r\n * ========================================================================\r\n * @method isObjectLike\r\n * @param {Object} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是类似 Object 类型，返回 true，否则返回 false\r\n */\r\nconst isObjectLike = (val) => {\r\n  return isObject(val) && val !== null\r\n}\r\n\r\nexport default isObjectLike\r\n","import isUndefined from '../isUndefined'\r\n\r\n/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n\r\n  if (hasOwnProperty) {\r\n    // 不建议直接实用对象从原型链继承的 hasOwnProperty() 方法\r\n    // 所以采用直接调用 Object.prototype.hasOwnProperty() 方法\r\n    return hasOwnProperty.call(obj, prop)\r\n  }\r\n\r\n  return (\r\n    // 从对象构造函数的原型链继承的同名属性不算 obj 自身的属性\r\n    !isUndefined(obj[prop]) && obj.constructor.prototype[prop] !== obj[prop]\r\n  )\r\n}\r\n\r\nexport default hasOwn\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否 undefined（未定义）\r\n * ========================================================================\r\n * @method isUndefined\r\n * @category Lang\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 undefined（未定义），返回 true，否则返回 false\r\n */\r\nconst isUndefined = (val) => {\r\n  return _type(val) === TYPES.UNDEFINED\r\n}\r\n\r\nexport default isUndefined\r\n","import isPlainObject from './isPlainObject'\r\nimport hasOwn from './utils/hasOwn'\r\n\r\n/**\r\n * 检测测试数据是否为空（单体）对象\r\n * ========================================================================\r\n * @method isEmptyObject\r\n * @param {Object} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是空对象，返回 true，否则返回 false\r\n */\r\nconst isEmptyObject = (obj) => {\r\n  let prop\r\n\r\n  if (!isPlainObject(obj)) {\r\n    return false\r\n  }\r\n\r\n  for (prop in obj) {\r\n    /* istanbul ignore else */\r\n    if (hasOwn(obj, prop)) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport default isEmptyObject\r\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","isObject","isFunction","isPlainObject","getPrototypeOf","proto","isObjectLike","hasOwn","obj","prop","hasOwnProperty","call","constructor"],"mappings":"8OACA,MAAMA,EAEK,SAFLA,EAGK,UAHLA,EAKI,SALJA,EAMO,YANPA,EAOI,SAPJA,EAQI,SARJA,EAgCI,SAhCJA,EAmCK,UAnCLA,EAsCM,WCpCNC,EAAU,CAEd,gBDAM,OCEN,eDIK,MCHL,mBDIU,UCHV,eDIK,MCHL,mBDIU,UCFV,iBDIO,QCHP,qBDIW,YCFX,oBDIW,WCHX,uBDIc,cCHd,qBDIY,YCHZ,sBDIa,aCHb,6BDIqB,oBCHrB,sBDIa,aCHb,uBDIc,cCHd,sBDIa,aCHb,uBDIc,cCHd,wBDIe,eCHf,wBDIe,eCHf,yBDIiB,gBCHjB,0BDIkB,iBCFlB,kBAAmBD,EACnB,mBAAoBA,EACpB,kBAAmBA,EACnB,kBAAmBA,EACnB,gBDEM,OCDN,iBDGO,QCFP,4BDGU,WCFV,oBAAqBA,EACrB,oBDHY,aCIZ,mBDES,UCDT,kBDEQ,SCDR,gBDEM,QEhCFE,EAASC,IACb,MAAMC,EAAOC,OAAOC,UAAUC,SAASC,MAAML,GACvCM,SAAiBN,EACvB,IAAIO,EAGJ,GAAIP,GAAKQ,SAA4B,IAAjBR,EAAIS,SACtBF,EAAOV,OAGP,OAAQS,GACN,IAAK,SACHC,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,UACHU,EAAOV,EACP,MACF,IAAK,YACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MAEF,QACEU,EAAOT,EAAQG,GAKrB,OAAOM,GAAQN,GCnCXS,EAAYV,MAGNA,UAFUA,IAEOH,ICHV,CAACG,GACLD,EAAMC,KACHH,EDC2Bc,CAAWX,IELlDY,EAAiBZ,IACrB,MAAMa,EAAiBX,OAAOW,eAC9B,IAAIC,EAGJ,ICLmB,CAACd,GACbU,EAASV,IAAgB,OAARA,EDInBe,CAAaf,GAChB,OAAO,EAQT,GALAc,EAAQd,EAAIG,WAKPW,EACH,OAAO,EAKT,IAFAA,EAAQd,EAEyB,OAA1Ba,EAAeC,IACpBA,EAAQD,EAAeC,GAGzB,OAAOD,EAAeb,KAASc,GEvB3BE,EAAS,CAACC,EAAKC,KACnB,MAAMC,EAAiBjB,OAAOC,UAAUgB,eAExC,OAAIA,EAGKA,EAAeC,KAAKH,EAAKC,KCLflB,EDUJiB,EAAIC,GCTZnB,EAAMC,KAASH,GDSOoB,EAAII,YAAYlB,UAAUe,KAAUD,EAAIC,ICVnD,IAAClB,CDWlB,SEZoBiB,IACrB,IAAIC,EAEJ,IAAKN,EAAcK,GACjB,OAAO,EAGT,IAAKC,KAAQD,EAEX,GAAID,EAAOC,EAAKC,GACd,OAAO,EAIX,OAAO"}