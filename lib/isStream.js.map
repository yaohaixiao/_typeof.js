{"version":3,"file":"isStream.js","sources":["../isStream.js"],"sourcesContent":["/**\r\n * 检测测试数据是否为 Stream 类型\r\n * ========================================================================\r\n * @method isStream\r\n * @since 2.7.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @param {Object} [options={}] - 这是一个解构赋值的参数。它是一个对象，默认值为空对象 {}。\r\n * 对象中有一个属性 checkOpen，其默认值为 true。checkOpen 用于控制是否检查流的打开\r\n * 状态（即可读或可写状态）。\r\n * @return {Boolean} 'val' 是 Stream 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // 测试流对象\r\n * const validStream = {\r\n *   writable: true,\r\n *   pipe: () => {}\r\n * }\r\n *\r\n * isStream(validStream) // -> true\r\n *\r\n * // 测试非流对象\r\n * const nonStream = {\r\n *   notAStreamProperty: 'value'\r\n * }\r\n *\r\n * isStream(nonStream) // -> false\r\n *\r\n * // 测试 null\r\n * isStream(null) // -> false\r\n *\r\n * // 测试 checkOpen 为 false 的情况\r\n * const obj = {\r\n *   pipe: () => {}\r\n * }\r\n *\r\n * isStream(obj, { checkOpen: false }) // -> true\r\n */\r\nconst isStream = (val, { checkOpen = true } = {}) => {\r\n  return !!(\r\n    val !== null &&\r\n    typeof val === 'object' &&\r\n    (val.writable ||\r\n      val.readable ||\r\n      !checkOpen ||\r\n      (val.writable === undefined && val.readable === undefined)) &&\r\n    typeof val.pipe === 'function'\r\n  )\r\n}\r\n\r\nexport default isStream\r\n"],"names":["val","checkOpen","writable","readable","undefined","pipe"],"mappings":"+OAsCiB,CAACA,GAAOC,aAAY,GAAS,CAAA,MAElC,OAARD,GACe,iBAARA,KACNA,EAAIE,UACHF,EAAIG,WACHF,QACiBG,IAAjBJ,EAAIE,eAA2CE,IAAjBJ,EAAIG,WACjB,mBAAbH,EAAIK"}