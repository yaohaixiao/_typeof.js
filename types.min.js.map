{"version":3,"file":"types.min.js","sources":["esm/enum.js","esm/_type.js","esm/isArrayLike.js","esm/isObjectLike.js","esm/isInt8Array.js","esm/isString.js","esm/isBlank.js","esm/isBoolean.js","esm/isFunction.js","esm/isUndefined.js","esm/hasOwn.js","esm/isNumber.js","esm/isInteger.js","esm/isHex.js","esm/isObject.js","esm/types.js","esm/is.js","esm/isArray.js","esm/isArrayLikeObject.js","esm/isArgumants.js","esm/isArrayBuffer.js","esm/isUint8Array.js","esm/isUint8ClampedArray.js","esm/isInt16Array.js","esm/isUint16Array.js","esm/isInt32Array.js","esm/isUint32Array.js","esm/isFloat32Array.js","esm/isFloat64Array.js","esm/isBase64.js","esm/isConstructor.js","esm/isDataView.js","esm/isDate.js","esm/isElement.js","esm/isEmail.js","esm/isEmpty.js","esm/isEmptyObject.js","esm/isError.js","esm/isEven.js","esm/isFloat.js","esm/isHTMLCollection.js","esm/isInfinite.js","esm/isIPAddress.js","esm/isJSON.js","esm/isLength.js","esm/isMap.js","esm/isNativeFunction.js","esm/isNull.js","esm/isNumeric.js","esm/isOdd.js","esm/isPhoneNumber.js","esm/isPlainObject.js","esm/isPrototype.js","esm/isRegExp.js","esm/isSet.js","esm/isSymbol.js","esm/isTextNode.js","esm/isTypedArray.js","esm/isURL.js","esm/isValue.js","esm/isVNode.js","esm/isWeakMap.js","esm/isWeakSet.js","esm/isXML.js"],"sourcesContent":["export const TYPES = {\r\n  BOOLEAN: ' boolean',\r\n  NULL: ' null',\r\n  UNDEFINED: ' undefined',\r\n  NUMBER: ' number',\r\n  STRING: ' string',\r\n  OBJECT: ' object',\r\n  ARRAY: ' array',\r\n  ARRAY_BUFFER: ' arraybuffer',\r\n  DATA_VIEW: ' dataview',\r\n  DATE: ' date',\r\n  ERROR: ' error',\r\n  ARGUMENTS: ' arguments',\r\n  COLLECTION: ' collection',\r\n  FUNCTION: ' function',\r\n  ELEMENT: ' element',\r\n  TEXT: ' text',\r\n  WHITESPACE: ' whitespace',\r\n  REGEXP: ' regexp',\r\n  SYMBOL: ' symbol',\r\n  SET: ' set',\r\n  WEAK_SET: ' weakset',\r\n  MAP: ' map',\r\n  WEAK_MAP: ' weakmap',\r\n  INT8_ARRAY: ' int8array',\r\n  UNIT8_ARRAY: ' uint8array',\r\n  UNIT8_CLAMPED_ARRAY: ' uint8clampedarray',\r\n  INT16_ARRAY: ' int16array',\r\n  UNIT16_ARRAY: ' uint16array',\r\n  INT32_ARRAY: ' int32array',\r\n  UNIT32_ARRAY: ' uint32array',\r\n  FLOAT32_ARRAY: ' float32array',\r\n  FLOAT64_ARRAY: ' float64array'\r\n}\r\n\r\nexport const OBJECTS = {\r\n  ARRAY: ' [object Array]',\r\n  ARRAY_BUFFER: ' [object ArrayBuffer]',\r\n  INT8_ARRAY: ' [object Int8Array]',\r\n  UNIT8_ARRAY: ' [object Uint8Array]',\r\n  UNIT8_CLAMPED_ARRAY: ' [object Uint8ClampedArray]',\r\n  INT16_ARRAY: ' [object Int16Array]',\r\n  UNIT16_ARRAY: ' [object Uint16Array]',\r\n  INT32_ARRAY: ' [object Int32Array]',\r\n  UNIT32_ARRAY: ' [object Uint32Array]',\r\n  FLOAT32_ARRAY: ' [object Float32Array]',\r\n  FLOAT64_ARRAY: ' [object Float64Array]',\r\n  DATA_VIEW: ' [object DataView]',\r\n  DATE: ' [object Date]',\r\n  ERROR: ' [object Error]',\r\n  FUNCTION: ' [object Function]',\r\n  REGEXP: ' [object RegExp]',\r\n  SET: ' [object Set]',\r\n  WEAK_SET: ' [object WeakSet]',\r\n  MAP: ' [object Map]',\r\n  WEAK_MAP: ' [object WeakMap]',\r\n  SYMBOL: ' [object Symbol]'\r\n}\r\n","import {TYPES, OBJECTS} from './enum'\n\n/**\n * 检测数据类型，返回检测数据类型的字符串\n * ========================================================================\n * @method _type\n * @param {*} val - 要检测的任意值\n * @returns {String}\n */\nconst _type = (val) => {\n  const type = Object.prototype.toString.apply(val)\n\n  /* ===== 原始值类型（Primitive data types） ===== */\n  if (typeof val === TYPES.BOOLEAN) {\n    // 检查是否为 Boolean 类型\n    return TYPES.BOOLEAN\n  } else if (val === null) {\n    // 检测是否为 null\n    return TYPES.NULL\n  } else if (typeof val === TYPES.NUMBER && isFinite(val)) {\n    // 检测是否为 Number 类型\n    return TYPES.NUMBER\n  } else if (typeof val === TYPES.UNDEFINED) {\n    // 检测是否为 Undefined\n    return TYPES.UNDEFINED\n  } else if (typeof val === TYPES.STRING) {\n    // 检测是否为 String 类型\n    return TYPES.STRING\n    /* ===== ES6 ( Map, WeakMap, Set, WeakSet, Symbol ) ===== */\n  } else if (type === OBJECTS.SET) {\n    // 检测是否为 Set 类型\n    return TYPES.SET\n  } else if (type === OBJECTS.WEAK_SET) {\n    // 检测是否为 WeakSet 类型\n    return TYPES.WEAK_SET\n  } else if (type === OBJECTS.MAP) {\n    // 检测是否为 Map 类型\n    return TYPES.MAP\n  } else if (type === OBJECTS.WEAK_MAP) {\n    // 检测是否为 WeakMap 类型\n    return TYPES.WEAK_MAP\n  } else if (type === OBJECTS.SYMBOL) {\n    // 检测是否为 Symbol 类型\n    return TYPES.SYMBOL\n    /* ===== 引用类型（Reference data types） ===== */\n  } else if (type === OBJECTS.ARRAY) {\n    // 检测是否为 Array 类型\n    return TYPES.ARRAY\n  } else if (type === OBJECTS.ARRAY_BUFFER) {\n    // 检测是否为 ArrayBuffer 类型\n    return TYPES.ARRAY_BUFFER\n  } else if (type === OBJECTS.DATA_VIEW) {\n    // 检测是否为 DataView 类型\n    return TYPES.DATA_VIEW\n  } else if (type === OBJECTS.DATE) {\n    // 检测是否为 Date 类型\n    return TYPES.DATE\n  } else if (type === OBJECTS.ERROR) {\n    // 检测是否为 Error 类型\n    return TYPES.ERROR\n  } else if ((typeof val === TYPES.FUNCTION) || type === OBJECTS.FUNCTION) {\n    // 检测是否为 Function 类型\n    return TYPES.FUNCTION\n  } else if (type === OBJECTS.REGEXP) {\n    // 检测是否为 RegExp 类型\n    return TYPES.REGEXP\n    /* ===== ES2017 Arrays ===== */\n    // Int - 整数\n    // Uint - 无符号整数\n    // Float - IEEE754 浮点数\n  } else if (type === OBJECTS.INT8_ARRAY) {\n    return TYPES.INT8_ARRAY\n  } else if (type === OBJECTS.UNIT8_ARRAY) {\n    return TYPES.UNIT8_ARRAY\n  } else if (type === OBJECTS.UNIT8_CLAMPED_ARRAY) {\n    return TYPES.UNIT8_CLAMPED_ARRAY\n  } else if (type === OBJECTS.INT16_ARRAY) {\n    return TYPES.INT16_ARRAY\n  } else if (type === OBJECTS.UNIT16_ARRAY) {\n    return TYPES.UNIT16_ARRAY\n  } else if (type === OBJECTS.INT32_ARRAY) {\n    return TYPES.INT32_ARRAY\n  } else if (type === OBJECTS.UNIT32_ARRAY) {\n    return TYPES.UNIT32_ARRAY\n  } else if (type === OBJECTS.FLOAT32_ARRAY) {\n    return TYPES.FLOAT32_ARRAY\n  } else if (type === OBJECTS.FLOAT64_ARRAY) {\n    return TYPES.FLOAT64_ARRAY\n    /* ===== 其它类型（Others） ===== */\n    // 检测是否为一个 DOM\n  } else if (val.nodeName) {\n    // 检测是否为 Element 节点\n    if (val.nodeType === 1) {\n      return TYPES.ELEMENT\n    } else if (val.nodeType === 3) {\n      // 检测是否为 Text 节点\n      return (/\\S/).test(val.nodeValue) ? TYPES.TEXT : TYPES.WHITESPACE\n    }\n  } else if (typeof val === TYPES.OBJECT && typeof val.length === TYPES.NUMBER && val.length > 0) {\n    // 检测是否为 Arguments 类型\n    if ('callee' in val) {\n      return TYPES.ARGUMENTS\n    } else if ('item' in val) {\n      // 检测是否为 NodeList 类型\n      return TYPES.COLLECTION\n    }\n  }\n\n  // 其它标准的数据类型\n  return typeof val\n}\n\nexport default _type\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为类似数组（array、arguments 对象或者\r\n * HTMLNodeList 对象）类型。\r\n * ========================================================================\r\n * @method isArrayLike\r\n * @param {*} val - 要检测是的数据\r\n * @returns {boolean} 'val' 是 array、arguments 或者 HTMLNodeList 类型返回 true，否则返回 false\r\n */\r\nconst isArrayLike = ( val ) => {\r\n  const type = _type( val );\r\n\r\n  return type === TYPES.ARRAY || type === TYPES.ARGUMENTS || type === TYPES.COLLECTION;\r\n}\r\n\r\nexport default isArrayLike\r\n","/**\n * 检测测试数据是否为类似 Object 类型\n * ========================================================================\n * @method isObjectLike\n * @param val\n * @returns {boolean}\n */\nconst isObjectLike = (val) => {\n  return typeof val === 'object' && val !== null\n}\n\nexport default isObjectLike\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\nconst isInt8Array = (val) => {\r\n  return _type(val) === TYPES.INT8_ARRAY\r\n}\r\n\r\nexport default isInt8Array\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为字符串\r\n *\r\n * @method isString\r\n * @param {*} obj - 要检测的数据\r\n * @returns {boolean} 'val' 是字符串返回 true，否则返回 false\r\n */\r\nconst isString = (obj) => {\r\n  return _type(obj) === TYPES.STRING\r\n}\r\n\r\nexport default isString\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否只包空格\r\n * ========================================================================\r\n * @method isBlank\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 只包含空格返回 true，否则返回 false\r\n */\r\nfunction isBlank(val) {\r\n  if (!isString(val)) {\r\n    return false\r\n  }\r\n\r\n  return /^\\s*$/.test(val)\r\n}\r\n\r\nexport default isBlank\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 Boolean 类型\r\n * ========================================================================\r\n * @method isBoolean\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 Boolean 类型则返回 true，否则返回 false\r\n */\r\nconst isBoolean = ( val ) => {\r\n  return _type( val ) === TYPES.BOOLEAN;\r\n}\r\n\r\nexport default isBoolean\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  const type = _type(val)\r\n  return type === TYPES.FUNCTION\r\n}\r\n\r\nexport default isFunction\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否 undefined（未定义）\r\n * ========================================================================\r\n * @method isUndefined\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 undefined（未定义）返回 true，否则返回 false\r\n */\r\nconst isUndefined = (val) => {\r\n  return _type(val) === TYPES.UNDEFINED\r\n}\r\n\r\nexport default isUndefined\r\n","import isUndefined from './isUndefined'\n\n/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  if ( Object.prototype.hasOwnProperty ) {\n    return obj && obj.hasOwnProperty && obj.hasOwnProperty( prop );\n  } else {\n    return !isUndefined( obj[ prop ] ) && obj.constructor.prototype[ prop ] !== obj[ prop ];\n  }\n}\n\nexport default hasOwn\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 Number 类型\r\n * ========================================================================\r\n * @method isNumber\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 Number 类型返回 true，否则返回 false\r\n */\r\nconst isNumber = (val) => {\r\n  return _type(val) === TYPES.NUMBER\r\n}\r\n\r\nexport default isNumber\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据是否为整数\r\n * ========================================================================\r\n * @method isInteger\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是整数返回 true，否则返回 false\r\n */\r\nconst isInteger = (val) => {\r\n  return isNumber(val) && !isNaN(val) && Number(val) === val && val % 1 === 0\r\n}\r\n\r\nexport default isInteger\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为 16 进制编码的字符串\r\n * ========================================================================\r\n * @method isHex\r\n * @param val - 要检测的数据\r\n * @returns {boolean} 'val' 是 16 进制编码的字符串返回 true，否则返回 false\r\n */\r\nconst isHex = (val) => {\r\n  const REGEXP_HEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n  return isString(val) && REGEXP_HEX.test(val)\r\n}\r\n\r\nexport default isHex\r\n","import _type from './_type'\r\nimport isFunction from './isFunction'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为对象\r\n * ========================================================================\r\n * @method isObject\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 为对象返回 true，否则返回 false\r\n */\r\nconst isObject = ( val ) => {\r\n  const type = _type( val );\r\n\r\n  return (val && (type === TYPES.OBJECT || (type === TYPES.FUNCTION || isFunction( val )))) || false;\r\n}\r\n\r\nexport default isObject\r\n","import is from './is'\nimport isArray from './isArray'\nimport isArrayLike from './isArrayLike'\nimport isArrayLikeObject from './isArrayLikeObject'\nimport isArguments from './isArgumants'\nimport isArrayBuffer from './isArrayBuffer'\nimport isInt8Array from './isInt8Array'\nimport isUint8Array from './isUint8Array'\nimport isUint8ClampedArray from './isUint8ClampedArray'\nimport isInt16Array from './isInt16Array'\nimport isUint16Array from './isUint16Array'\nimport isInt32Array from './isInt32Array'\nimport isUint32Array from './isUint32Array'\nimport isFloat32Array from './isFloat32Array'\nimport isFloat64Array from './isFloat64Array'\nimport isBase64 from './isBase64'\nimport isBlank from './isBlank'\nimport isBoolean from './isBoolean'\nimport isConstructor from './isConstructor'\nimport isDataView from './isDataView'\nimport isDate from './isDate'\nimport isElement from './isElement'\nimport isEmail from './isEmail'\nimport isEmpty from './isEmpty'\nimport isEmptyObject from './isEmptyObject'\nimport isError from './isError'\nimport isEven from './isEven'\nimport isFloat from './isFloat'\nimport isFunction from './isFunction'\nimport isHex from './isHex'\nimport isHTMLCollection from './isHTMLCollection'\nimport isInfinite from './isInfinite'\nimport isInteger from './isInteger'\nimport isIPAddress from './isIPAddress'\nimport isJSON from './isJSON'\nimport isLength from './isLength'\nimport isMap from './isMap'\nimport isNativeFunction from './isNativeFunction'\nimport isNull from './isNull'\nimport isNumber from './isNumber'\nimport isNumeric from './isNumeric'\nimport isObject from './isObject'\nimport isObjectLike from './isObjectLike'\nimport isOdd from './isOdd'\nimport isPhoneNumber from './isPhoneNumber'\nimport isPlainObject from './isPlainObject'\nimport isPrototype from './isPrototype'\nimport isRegExp from './isRegExp'\nimport isSet from './isSet'\nimport isString from './isString'\nimport isSymbol from './isSymbol'\nimport isTextNode from './isTextNode'\nimport isTypedArray from './isTypedArray'\nimport isUndefined from './isUndefined'\nimport isURL from './isURL'\nimport isValue from './isValue'\nimport isVNode from './isVNode'\nimport isWeakMap from './isWeakMap'\nimport isWeakSet from './isWeakSet'\nimport isXML from './isXML'\n\nconst Types = {\n  is,\n  isArray,\n  isArrayLike,\n  isArrayLikeObject,\n  isArguments,\n  isArrayBuffer,\n  isInt8Array,\n  isUint8Array,\n  isUint8ClampedArray,\n  isInt16Array,\n  isUint16Array,\n  isInt32Array,\n  isUint32Array,\n  isFloat32Array,\n  isFloat64Array,\n  isBase64,\n  isBlank,\n  isBoolean,\n  isConstructor,\n  isDataView,\n  isDate,\n  isElement,\n  isEmail,\n  isEmpty,\n  isEmptyObject,\n  isError,\n  isEven,\n  isFloat,\n  isFunction,\n  isHex,\n  isHTMLCollection,\n  isInfinite,\n  isInteger,\n  isIPAddress,\n  isJSON,\n  isLength,\n  isMap,\n  isNativeFunction,\n  isNull,\n  isNumber,\n  isNumeric,\n  isObject,\n  isObjectLike,\n  isOdd,\n  isPhoneNumber,\n  isPlainObject,\n  isPrototype,\n  isRegExp,\n  isSet,\n  isString,\n  isSymbol,\n  isTextNode,\n  isTypedArray,\n  isUndefined,\n  isURL,\n  isValue,\n  isVNode,\n  isWeakMap,\n  isWeakSet,\n  isXML\n}\n\nexport default Types\n","import _type from './_type'\r\n\r\nconst is = (val) => {\r\n  return _type(val)\r\n}\r\n\r\nexport default is\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 Array 则返回 true，否则返回 false\r\n */\r\nconst isArray = ( val ) => {\r\n  return Array.isArray ? Array.isArray( val ) : _type( val ) === TYPES.ARRAY;\r\n}\r\n\r\nexport default isArray\r\n","import isArrayLike from './isArrayLike'\nimport isObjectLike from './isObjectLike'\n\n/**\n * 检测测试数据是否为 ArrayLike 的对象数据\n * ========================================================================\n * @param val\n * @returns {boolean}\n */\nconst isArrayLikeObject = (val) => {\n  return isObjectLike(val) && isArrayLike(val)\n}\n\nexport default isArrayLikeObject\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 arguments 对象\r\n * ========================================================================\r\n * @method isArguments\r\n * @param {*} val\r\n * @return {boolean}\r\n */\r\nfunction isArguments ( val ) {\r\n  return _type( val ) === TYPES.ARGUMENTS;\r\n}\r\n\r\nexport default isArguments\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 ArrayBuffer 类型\r\n * ========================================================================\r\n * @method isArrayBuffer\r\n * @param {*} val\r\n * @return {boolean}\r\n */\r\nfunction isArrayBuffer ( val ) {\r\n  return _type( val ) === TYPES.ARRAY_BUFFER;\r\n}\r\n\r\nexport default isArrayBuffer\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\nconst isUint8Array = (val) => {\r\n  return _type(val) === TYPES.UNIT8_ARRAY\r\n}\r\n\r\nexport default isUint8Array\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\nconst isUint8ClampedArray = (val) => {\r\n  return _type(val) === TYPES.UNIT8_CLAMPED_ARRAY\r\n}\r\n\r\nexport default isUint8ClampedArray\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\nconst isInt16Array = ( val ) => {\r\n  return _type( val ) === TYPES.INT16_ARRAY;\r\n}\r\n\r\nexport default isInt16Array\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\nconst isUint16Array = (val) => {\r\n  return _type(val) === TYPES.UNIT16_ARRAY\r\n}\r\n\r\nexport default isUint16Array\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\nconst isInt32Array = (val) => {\r\n  return _type(val) === TYPES.INT32_ARRAY\r\n}\r\n\r\nexport default isInt32Array\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\nconst isUint32Array = (val) => {\r\n  return _type(val) === TYPES.UNIT32_ARRAY\r\n}\r\n\r\nexport default isUint32Array\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\nconst isFloat32Array = ( val ) => {\r\n  return _type( val ) === TYPES.FLOAT32_ARRAY;\r\n}\r\n\r\nexport default isFloat32Array\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\nconst isFloat64Array = ( val ) => {\r\n  return _type( val ) === TYPES.FLOAT64_ARRAY;\r\n}\r\n\r\nexport default isFloat64Array\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为一个基于 base64 编码的字符串。\r\n * ========================================================================\r\n * @method isBase64\r\n * @param {*} val - 要检测的数据\r\n * @return {boolean} 'val' 是 base64 编码的字符串返回 true，否则返回 false\r\n */\r\nconst isBase64 = (val) => {\r\n  const REGEXP_BASE64 = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/\r\n  return isString(val) && (!val.length || REGEXP_BASE64.test(val))\r\n}\r\n\r\nexport default isBase64\r\n","import isFunction from './isFunction'\r\n\r\n/**\r\n * 检测测试函数是否为构造函数\r\n * ========================================================================\r\n * @method isConstructor\r\n * @param {function} fn - 要测试的（构造）函数\r\n * @returns {boolean} - fn 是构造函数返回 true，否则返回 false;\r\n */\r\nconst isConstructor = (fn) => {\r\n  let instance\r\n\r\n  if (!isFunction) {\r\n    return false\r\n  }\r\n\r\n  try {\r\n    instance = new fn()\r\n  } catch (err) {\r\n    if (err.message.indexOf('is not a constructor')) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return (instance.constructor === fn && instance instanceof fn) || (instance.constructor === Object && instance instanceof Object)\r\n}\r\n\r\nexport default isConstructor\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 DataView 类型\r\n * ========================================================================\r\n * @method isDataView\r\n * @param {*} val\r\n * @return {boolean}\r\n */\r\nconst isDataView = (val) => {\r\n  return _type(val) === TYPES.DATA_VIEW\r\n}\r\n\r\nexport default isDataView\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 Date 类型\r\n * ========================================================================\r\n * @method isDate\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 为 Date 类型返回 true，否则返回 false\r\n */\r\nconst isDate = (val) => {\r\n  return _type(val) === TYPES.DATE && val.toString() !== 'Invalid Date' && !isNaN(val)\r\n}\r\n\r\nexport default isDate\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 HTML 元素节点。\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 为 HTML 元素节点返回 true，否则返回 false\r\n */\r\nconst isElement = (val) => {\r\n  return _type(val) === TYPES.ELEMENT\r\n}\r\n\r\nexport default isElement\r\n","/**\n * 检测是否为正确的 Email 邮箱地址格式\n * ========================================================================\n * @method isEmail\n * @param val\n * @returns {boolean}\n */\nconst isEmail = (val) => {\n  const pattern =\n    /^(([^<>()[]\\\\.,;:\\s@\"]+(\\.[^<>()[]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.、d{1,3}])|(([a-zA-Z\\-\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+\\.)+[a-zA-Z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}))$/\n  return pattern.test(val)\n}\n\nexport default isEmail\n","/**\r\n * 检测测试数据是否为空字符串\r\n *\r\n * @method isEmpty\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是空字符串返回 true，否则返回 false\r\n */\r\nconst isEmpty = (val) => {\r\n  return val === ''\r\n}\r\n\r\nexport default isEmpty\r\n","import hasOwn from './hasOwn'\r\n\r\n/**\r\n * 检测测试数据是否为空（单体）对象\r\n * ========================================================================\r\n * @method isEmptyObject\r\n * @param {Object|*} obj - 要检测的数据\r\n * @returns {boolean} 'val' 是空对象返回 true，否则返回 false\r\n */\r\nconst isEmptyObject = (obj) => {\r\n  let prop\r\n\r\n  for (prop in obj) {\r\n    if (hasOwn(obj, prop)) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport default isEmptyObject\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 Error 类型\r\n * ========================================================================\r\n * @method isError\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 Error 类型返回 true，否则返回 false\r\n */\r\nconst isError = (val) => {\r\n  return _type(val) === TYPES.ERROR\r\n}\r\n\r\nexport default isError\r\n","import isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为偶数\r\n * ========================================================================\r\n * @method isEven\r\n * @param val - 要检测的数据\r\n * @returns {boolean} 'val' 是偶数返回 true，否则返回 false\r\n */\r\nconst isEven = (val) => {\r\n  return isInteger(val) && val % 2 === 0\r\n}\r\n\r\nexport default isEven\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据是否为整数\r\n * ========================================================================\r\n * @method isFloat\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是整数返回 true，否则返回 false\r\n */\r\nfunction isFloat ( val ) {\r\n  return isNumber( val ) && !isNaN( val ) && Number( val ) === val && val % 1 !== 0;\r\n}\r\n\r\nexport default isFloat\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测数据的是否为 HTMLNodeList 对象\r\n * ========================================================================\r\n * @method isHTMLCollection\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 HTMLNodeList 对象返回 true，否则返回 false\r\n */\r\nconst isHTMLCollection = (val) => {\r\n  return _type(val) === TYPES.COLLECTION\r\n}\r\n\r\nexport default isHTMLCollection\r\n","/**\r\n * 检测测试数据的数据是正无穷或者负无穷\r\n * ========================================================================\r\n * @method isInfinite\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是正无穷或者负无穷返回 true，否则返回 false\r\n */\r\nconst isInfinite = (val) => {\r\n  return val === Infinity || val === -Infinity\r\n}\r\n\r\nexport default isInfinite\r\n","/**\n * 验证是否为（v4） IP 地址\n * ========================================================================\n * @method isIPAddress\n * @param str\n * @returns {boolean}\n */\nconst isIPAddress = (str) => {\n  const patternV6 = /(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]+|::(ffff(:0{1,4})?:)?((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\\.){3}(25[0-5]|(2[0-4]|1?[0-9])?[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\\.){3}(25[0-5]|(2[0-4]|1?[0-9])?[0-9]))/\n  const patternV4 = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n  return patternV4.test(str) || patternV6.test(str)\n}\n\nexport default isIPAddress\n","import isString from './isString'\r\nimport isBlank from './isBlank'\r\n\r\n/**\r\n * 检测测试数据是否为 JSON 格式字符串数据\r\n * ========================================================================\r\n * @method isJSON\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 JSON 格式字符串数据返回 true，否则返回 false\r\n */\r\nconst isJSON = (val) => {\r\n  if (!isString(val) || isBlank(val) || !val) {\r\n    return false\r\n  }\r\n\r\n  val = val.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\r\n  val = val.replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\r\n  val = val.replace(/(?:^|:|,)(?:\\s*\\[)+/g, '')\r\n\r\n  return (/^[\\],:{}\\s]*$/).test(val)\r\n}\r\n\r\nexport default isJSON\r\n","import isNumber from './isNumber'\n/**\n * 检测测试数据是否为有效 length 值\n * =============================================================\n * @method isLength\n * @param val\n * @returns {boolean}\n */\nconst isLength = (val) => {\n  const MAX_SAFE_INTEGER = 9007199254740991\n\n  return isNumber(val) && val > -1 && val % 1 === 0 && val <= MAX_SAFE_INTEGER\n}\n\nexport default isLength\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 Map 类型\r\n * ========================================================================\r\n * @method isMap\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 Map 类型返回 true，否则返回 false\r\n */\r\nconst isMap = (val) => {\r\n  return _type(val) === TYPES.MAP\r\n}\r\n\r\nexport default isMap\r\n","import isFunction from './isFunction'\r\n\r\n/**\r\n * 检测测试数据是否为构造函数\r\n * ========================================================================\r\n * @method isNativeFunction\r\n * @param {function} fn - 要测试的函数\r\n * @returns {boolean} - fn 是内置函数返回 true，否则返回 false;\r\n */\r\nconst isNativeFunction = (fn) => {\r\n  return isFunction(fn) && (/\\{\\s*\\[native code\\]\\s*\\}/).test('' + fn)\r\n}\r\n\r\nexport default isNativeFunction\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 null\r\n * ========================================================================\r\n * @method isNull\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 为 null 返回 true，否则返回 false\r\n */\r\nconst isNull = (val) => {\r\n  return _type(val) === TYPES.NULL\r\n}\r\n\r\nexport default isNull\r\n","import _type from './_type'\nimport { TYPES } from './enum'\n\n/**\n * 检测测试数据是否是一个数字（只能是 number 类型或者 '123123' 这样的数字字符串）\n * ========================================================================\n * @method isNumeric\n * @param {*} val - 要检测的数据\n * @returns {boolean} 'val' 是一个数字返回 true，否则返回false\n */\nconst isNumeric = (val) => {\n  const type = _type(val)\n\n  return (type === TYPES.NUMBER || type === TYPES.STRING) &&\n    !isNaN(val - parseFloat(val))\n}\n\nexport default isNumeric\n","import isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为奇数\r\n * ========================================================================\r\n * @method isOdd\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是奇数返回 true，否则返回 false\r\n */\r\nconst isOdd = (val) => {\r\n  return isInteger(val) && val % 2 !== 0\r\n}\r\n\r\nexport default isOdd\r\n","/**\n * 检测是否为电话号码\n * ========================================================================\n * @method isPhoneNumber\n * @param {String} str\n * @returns {Boolean}\n *\n * @example\n * isPhoneNumber('(123) 456-7890')\n * isPhoneNumber('(123)456-7890')\n * isPhoneNumber('139-456-7890')\n * isPhoneNumber('139.456.7890')\n * isPhoneNumber('1304567890')\n * isPhoneNumber('+31636363634')\n * isPhoneNumber('075-63546725')\n */\nconst isPhoneNumber = (str) => {\n  const pattern = /^\\+?\\(?\\d{3}\\)?[-\\s.]?\\d{3}[-\\s.]?\\d{4,6}$/im\n  return pattern.test(str)\n}\n\nexport default isPhoneNumber\n","import isObject from './isObject'\nimport hasOwn from './hasOwn'\nimport { TYPES } from './enum'\n\n/**\n * 检测测试数据是否为普通对象\n * ========================================================================\n * @method isPlainObject\n * @param {*} val - 要检测的数据\n * @returns {boolean} 'val' 是普通对象返回 true，否则返回 false\n */\nconst isPlainObject = (val) => {\n  const toString = Object.prototype.toString\n  let proto\n  let Ctor\n\n  // Detect obvious negatives\n  if (!val || !isObject(val)) {\n    return false\n  }\n\n  proto = val.prototype\n\n  if (!proto) {\n    return true\n  }\n\n  Ctor = hasOwn(proto, 'constructor') && proto.constructor\n\n  return typeof Ctor === TYPES.FUNCTION && toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\n}\n\nexport default isPlainObject\n","import isFunction from './isFunction'\n\n/**\n * 判断是否为 prototype 对象\n * ========================================================================\n * @method isPrototype\n * @param val\n * @returns {boolean}\n */\nconst isPrototype = (val) => {\n  const OP = Object.prototype\n  const Ctor = val && val.constructor\n  const proto = (isFunction(Ctor) && Ctor.prototype) || OP\n\n  return val === proto\n}\n\nexport default isPrototype\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为正则表达式\r\n * ========================================================================\r\n * @method isRegExp\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是正则表达式返回 true，否则返回 false\r\n */\r\nconst isRegExp = (val) => {\r\n  return _type(val) === TYPES.REGEXP\r\n}\r\n\r\nexport default isRegExp\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 Set 类型\r\n * ========================================================================\r\n * @method isSet\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 Set 类型返回 true，否则返回 false\r\n */\r\nconst isSet = (val) => {\r\n  return _type(val) === TYPES.SET\r\n}\r\n\r\nexport default isSet\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 Symbol 类型\r\n * ========================================================================\r\n * @method isSymbol\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 Symbol 类型返回 true，否则返回 false\r\n */\r\nconst isSymbol = (val) => {\r\n  return _type(val) === TYPES.SYMBOL\r\n}\r\n\r\nexport default isSymbol\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为文本节点\r\n * ========================================================================\r\n * @method isTextNode\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是文本节点返回 true，否则返回 false\r\n */\r\nconst isTextNode = (val) => {\r\n  const type = _type(val)\r\n  return type === TYPES.TEXT || type === TYPES.WHITESPACE\r\n}\r\n\r\nexport default isTextNode\r\n","import _type from './_type'\nimport isObjectLike from './isObjectLike'\n\n/**\n * 检测测试数据是否为 TypedArray 类型\n * ========================================================================\n * @param val\n * @returns {boolean}\n */\nconst isTypedArray = (val) => {\n  const isTyped =\n    /^\\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\\]$/\n  return isObjectLike(val) && isTyped.test(_type(val))\n}\n\nexport default isTypedArray\n\n","/**\n * 判断字符串是否为有效的 URL 地址\n * ========================================================================\n * @method isURL\n * @param {String} str - 要检测的字符串\n * @returns {boolean}\n */\nconst isURL = (str) => {\n  let pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n    '(\\\\#[-a-z\\\\d_]*)?$', 'i') // fragment locator\n\n  return !!pattern.test(str)\n}\n\nexport default isURL\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为有效的数据\r\n *\r\n * @method isValue\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是有效的数据返回 true，否则返回 false\r\n */\r\nconst isValue = (val) => {\r\n  const type = _type(val)\r\n\r\n  switch (type) {\r\n    case TYPES.NUMBER:\r\n      return isFinite(val)\r\n\r\n    case TYPES.NULL:\r\n    case TYPES.UNDEFINED:\r\n      return false\r\n\r\n    default:\r\n      return !!type\r\n  }\r\n}\r\n\r\nexport default isValue\r\n","import hasOwn from './hasOwn'\n\n/**\n * 判断是否未 VNode 对象\n * =============================================================\n * @param node\n * @returns {boolean}\n */\nconst isVNode = (node) => {\n  return (\n    node !== null &&\n    typeof node === 'object' &&\n    hasOwn(node, 'componentOptions')\n  )\n}\n\nexport default isVNode\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 WeakMap 类型\r\n * ========================================================================\r\n * @method isWeakMap\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 WeakMap 类型返回 true，否则返回 false\r\n */\r\nconst isWeakMap = (val) => {\r\n  return _type(val) === TYPES.WEAK_MAP\r\n}\r\n\r\nexport default isWeakMap\r\n","import _type from './_type'\r\nimport { TYPES } from './enum'\r\n\r\n/**\r\n * 检测测试数据是否为 WeakSet 类型\r\n * ========================================================================\r\n * @method isWeakSet\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是 WeakSet 类型返回 true，否则返回 false\r\n */\r\nconst isWeakSet = (val) => {\r\n  return _type(val) === TYPES.WEAK_SET\r\n}\r\n\r\nexport default isWeakSet\r\n","/**\r\n * 检测是否为 XML 文档\r\n * ========================================================================\r\n * @method isXML\r\n * @param {*} val\r\n * @returns {boolean}\r\n */\r\nconst isXML = (val) => {\r\n  const documentElement = val && (val.ownerDocument || val).documentElement\r\n  return documentElement ? documentElement.nodeName !== 'HTML' : false\r\n}\r\n\r\nexport default isXML\r\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","isFinite","nodeName","nodeType","test","nodeValue","length","isArrayLike","isObjectLike","isString","obj","isBlank","isFunction","isUndefined","hasOwn","prop","hasOwnProperty","constructor","isNumber","isInteger","isNaN","Number","isObject","is","isArray","Array","isArrayLikeObject","isArguments","isArrayBuffer","isInt8Array","isUint8Array","isUint8ClampedArray","isInt16Array","isUint16Array","isInt32Array","isUint32Array","isFloat32Array","isFloat64Array","isBase64","isBoolean","isConstructor","fn","instance","err","message","indexOf","isDataView","isDate","isElement","isEmail","isEmpty","isEmptyObject","isError","isEven","isFloat","isHex","isHTMLCollection","isInfinite","Infinity","isIPAddress","str","isJSON","replace","isLength","isMap","isNativeFunction","isNull","isNumeric","parseFloat","isOdd","isPhoneNumber","isPlainObject","proto","Ctor","call","isPrototype","OP","isRegExp","isSet","isSymbol","isTextNode","WHITESPACE","isTypedArray","isURL","RegExp","isValue","isVNode","node","isWeakMap","isWeakSet","isXML","documentElement","ownerDocument"],"mappings":"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"}