{"version":3,"file":"types.min.js","sources":["enum/types.js","enum/objects.js","_type.js","isArray.js","isArrayLike.js","isFunction.js","isObject.js","isObjectLike.js","isInt8Array.js","isString.js","isBlank.js","isBoolean.js","isNativeFunction.js","isUndefined.js","hasOwn.js","isPlainObject.js","isNumber.js","isInteger.js","types.js","is.js","isArrayLikeObject.js","isArguments.js","isArrayBuffer.js","isUint8Array.js","isUint8ClampedArray.js","isInt16Array.js","isUint16Array.js","isInt32Array.js","isUint32Array.js","isFloat32Array.js","isFloat64Array.js","isBigInt64Array.js","isBigUint64Array.js","isBigInt.js","isBase64.js","isConstructor.js","isDataView.js","isDate.js","isElement.js","isEmail.js","isEmpty.js","isEmptyArray.js","isEmptyObject.js","isError.js","isEven.js","isFloat.js","isFragment.js","isGuid.js","isHash.js","isHex.js","isHTMLCollection.js","isInfinite.js","isIPAddress.js","isJSON.js","isLength.js","isMap.js","isNull.js","isNumeric.js","isOdd.js","isChinese.js","isPhoneNumber.js","isPromise.js","isPrototype.js","isRegExp.js","isSet.js","isSymbol.js","isTextNode.js","isTypedArray.js","isURL.js","isValue.js","isVNode.js","isWeakMap.js","isWeakSet.js","isXML.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\nconst TYPES = {\n  BOOLEAN: 'boolean',\n  BIG_INT: 'bigint',\n  NULL: 'null',\n  UNDEFINED: 'undefined',\n  NUMBER: 'number',\n  STRING: 'string',\n  OBJECT: 'object',\n  ARRAY: 'array',\n  ARRAY_BUFFER: 'arraybuffer',\n  DATA_VIEW: 'dataview',\n  DATE: 'date',\n  ERROR: 'error',\n  PROMISE: 'promise',\n  ARGUMENTS: 'arguments',\n  FUNCTION: 'function',\n  ELEMENT: 'element',\n  FRAGMENT: 'fragment',\n  COLLECTION: 'collection',\n  TEXT: 'text',\n  REGEXP: 'regexp',\n  SYMBOL: 'symbol',\n  SET: 'set',\n  WEAK_SET: 'weakset',\n  MAP: 'map',\n  WEAK_MAP: 'weakmap',\n  INT8_ARRAY: 'int8array',\n  UNIT8_ARRAY: 'uint8array',\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\n  INT16_ARRAY: 'int16array',\n  UNIT16_ARRAY: 'uint16array',\n  INT32_ARRAY: 'int32array',\n  UNIT32_ARRAY: 'uint32array',\n  FLOAT32_ARRAY: 'float32array',\n  FLOAT64_ARRAY: 'float64array',\n  BIG_INT64_ARRAY: 'bigint64array',\n  BIG_UINT64_ARRAY: 'biguint64array'\n}\n\nexport default TYPES\n","// Object.prototype.toString() 输出的类型名称枚举值\nconst OBJECTS = {\n  BIG_INT: '[object BigInt]',\n  BIG_INT64_ARRAY: '[object BigInt64Array]',\n  BIG_UINT64_ARRAY: '[object BigUint64Array]',\n  STRING: '[object String]',\n  NUMBER: '[object Number]',\n  BOOLEAN: '[object Boolean]',\n  NULL: '[object Null]',\n  UNDEFINED: '[object Undefined]',\n  OBJECT: '[object Object]',\n  PROMISE: '[object Promise]',\n  ARGUMENTS: '[object Arguments]',\n  ARRAY: '[object Array]',\n  ARRAY_BUFFER: '[object ArrayBuffer]',\n  INT8_ARRAY: '[object Int8Array]',\n  UNIT8_ARRAY: '[object Uint8Array]',\n  UNIT8_CLAMPED_ARRAY: '[object Uint8ClampedArray]',\n  INT16_ARRAY: '[object Int16Array]',\n  UNIT16_ARRAY: '[object Uint16Array]',\n  INT32_ARRAY: '[object Int32Array]',\n  UNIT32_ARRAY: '[object Uint32Array]',\n  FLOAT32_ARRAY: '[object Float32Array]',\n  FLOAT64_ARRAY: '[object Float64Array]',\n  DATA_VIEW: '[object DataView]',\n  DATE: '[object Date]',\n  ERROR: '[object Error]',\n  FUNCTION: '[object Function]',\n  REGEXP: '[object RegExp]',\n  SET: '[object Set]',\n  WEAK_SET: '[object WeakSet]',\n  MAP: '[object Map]',\n  WEAK_MAP: '[object WeakMap]',\n  SYMBOL: '[object Symbol]',\n  NODE_LIST: '[object NodeList]',\n  FRAGMENT: '[object DocumentFragment]',\n  TEXT_NODE: '[object Text]'\n}\n\nexport default OBJECTS\n","import TYPES from './enum/types'\nimport OBJECTS from './enum/objects'\n\n/**\n * 检测数据类型，返回检测数据类型的字符串\n * ========================================================================\n * @method _type\n * @param {*} val - 要检测的任意值\n * @returns {String}\n */\nconst _type = (val) => {\n  const type = Object.prototype.toString.apply(val)\n  const _typeof = typeof val\n\n  switch (type) {\n    /* ===== 原始值类型（Primitive data types） ===== */\n    case OBJECTS.STRING:\n      if (_typeof === 'string') {\n        // 检测是否为 String 类型\n        return TYPES.STRING\n      }\n      return TYPES.OBJECT\n    case OBJECTS.BIG_INT:\n      return TYPES.BIG_INT\n    case OBJECTS.NUMBER:\n      // 检测是否为 Number 类型\n      if (_typeof === 'number') {\n        return TYPES.NUMBER\n      }\n      return TYPES.OBJECT\n    case OBJECTS.BOOLEAN:\n      if (typeof val === 'boolean') {\n        // 检查是否为 Boolean 类型\n        return TYPES.BOOLEAN\n      }\n      return TYPES.OBJECT\n    case OBJECTS.NULL:\n      // 检测是否为 null\n      return TYPES.NULL\n    case OBJECTS.UNDEFINED:\n      // 检测是否为 Undefined\n      return TYPES.UNDEFINED\n    case OBJECTS.SYMBOL:\n      // 检测是否为 Symbol 类型\n      return TYPES.SYMBOL\n    /* ===== ES6 对象 ( Map, WeakMap, Set, WeakSet ) ===== */\n    case OBJECTS.SET:\n      // 检测是否为 Set 类型\n      return TYPES.SET\n    case OBJECTS.WEAK_SET:\n      // 检测是否为 WeakSet 类型\n      return TYPES.WEAK_SET\n    case OBJECTS.MAP:\n      // 检测是否为 Map 类型\n      return TYPES.MAP\n    case OBJECTS.WEAK_MAP:\n      // 检测是否为 WeakMap 类型\n      return TYPES.WEAK_MAP\n    /* ===== 引用类型（Reference data types） ===== */\n    case OBJECTS.FUNCTION:\n      // 检测是否为 Function 类型\n      return TYPES.FUNCTION\n    case OBJECTS.ARRAY:\n      // 检测是否为 Array 类型\n      return TYPES.ARRAY\n    case OBJECTS.ARRAY_BUFFER:\n      // 检测是否为 ArrayBuffer 类型\n      return TYPES.ARRAY_BUFFER\n    case OBJECTS.DATA_VIEW:\n      // 检测是否为 DataView 类型\n      return TYPES.DATA_VIEW\n    case OBJECTS.DATE:\n      // 检测是否为 Date 类型\n      return TYPES.DATE\n    case OBJECTS.ERROR:\n      // 检测是否为 Error 类型\n      return TYPES.ERROR\n    case OBJECTS.REGEXP:\n      // 检测是否为 RegExp 类型\n      return TYPES.REGEXP\n    /* ===== ES2017 Typed Arrays ===== */\n    // Int - 整数\n    // Uint - 无符号整数\n    // Float - IEEE754 浮点数 )\n    case OBJECTS.BIG_INT64_ARRAY:\n      return TYPES.BIG_INT64_ARRAY\n    case OBJECTS.BIG_UINT64_ARRAY:\n      return TYPES.BIG_UINT64_ARRAY\n    case OBJECTS.INT8_ARRAY:\n      return TYPES.INT8_ARRAY\n    case OBJECTS.INT16_ARRAY:\n      return TYPES.INT16_ARRAY\n    case OBJECTS.INT32_ARRAY:\n      return TYPES.INT32_ARRAY\n    case OBJECTS.UNIT8_ARRAY:\n      return TYPES.UNIT8_ARRAY\n    case OBJECTS.UNIT8_CLAMPED_ARRAY:\n      return TYPES.UNIT8_CLAMPED_ARRAY\n    case OBJECTS.UNIT16_ARRAY:\n      return TYPES.UNIT16_ARRAY\n    case OBJECTS.UNIT32_ARRAY:\n      return TYPES.UNIT32_ARRAY\n    case OBJECTS.FLOAT32_ARRAY:\n      return TYPES.FLOAT32_ARRAY\n    case OBJECTS.FLOAT64_ARRAY:\n      return TYPES.FLOAT64_ARRAY\n    /* ===== 其它类型（Others） ===== */\n    case OBJECTS.PROMISE:\n      // 检测是否为 Promise 对象\n      return TYPES.PROMISE\n    case OBJECTS.ARGUMENTS:\n      // 检测是否为 arguments 对象\n      return TYPES.ARGUMENTS\n    case OBJECTS.NODE_LIST:\n      // 检测是否为 NodeList 类型\n      return TYPES.COLLECTION\n    case OBJECTS.TEXT_NODE:\n      // 检测是否为 Text 节点\n      return TYPES.TEXT\n    case OBJECTS.FRAGMENT:\n      // 检测是否为 DocumentFragment 文档碎片\n      return TYPES.FRAGMENT\n    case OBJECTS.OBJECT:\n      return TYPES.OBJECT\n    default:\n      if (val.tagName && val.nodeType === 1) {\n        return TYPES.ELEMENT\n      }\n      return type\n  }\n}\n\nexport default _type\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Array 类型\n * ========================================================================\n * @method isArray\n * @param {*} val - 要检测的数据\n * @returns {Boolean} - 'val' 是 Array 则返回 true，否则返回 false\n */\nconst isArray = (val) => {\n  return Array.isArray ? Array.isArray(val) : _type(val) === TYPES.ARRAY\n}\n\nexport default isArray\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为类似数组（array、arguments 对象或者\n * HTMLNodeList 对象）类型。\n * ========================================================================\n * @method isArrayLike\n * @param {*} val - 要检测是的数据\n * @returns {Boolean} 'val' 是 array、arguments 或者 HTMLNodeList 类型返回 true，否则返回 false\n */\nconst isArrayLike = (val) => {\n  const type = _type(val)\n\n  return (\n    type === TYPES.ARRAY ||\n    type === TYPES.ARGUMENTS ||\n    type === TYPES.COLLECTION\n  )\n}\n\nexport default isArrayLike\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {Boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  const type = _type(val)\n  return type === TYPES.FUNCTION\n}\n\nexport default isFunction\n","import isFunction from './isFunction'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为对象\n * ========================================================================\n * @method isObject\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为对象返回 true，否则返回 false\n */\nconst isObject = (val) => {\n  const type = typeof val\n\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\n}\n\nexport default isObject\n","import isObject from './isObject'\n\n/**\n * 检测测试数据是否为类似 Object 类型\n * ========================================================================\n * @method isObjectLike\n * @param {Object} val\n * @returns {Boolean}\n */\nconst isObjectLike = (val) => {\n  return isObject(val) && val !== null\n}\n\nexport default isObjectLike\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Int8Array 的数组\n * ========================================================================\n * methods isInt8Array\n * @param {*} val\n * @returns {Boolean}\n */\nconst isInt8Array = (val) => {\n  return _type(val) === TYPES.INT8_ARRAY\n}\n\nexport default isInt8Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为字符串\n *\n * @method isString\n * @param {*} obj - 要检测的数据\n * @returns {Boolean} 'val' 是字符串返回 true，否则返回 false\n */\nconst isString = (obj) => {\n  return _type(obj) === TYPES.STRING\n}\n\nexport default isString\n","import isString from './isString'\n\n/**\n * 检测测试数据是否只包空格\n * ========================================================================\n * @method isBlank\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 只包含空格返回 true，否则返回 false\n */\nfunction isBlank(val) {\n  if (!isString(val)) {\n    return false\n  }\n\n  return /^\\s*$/.test(val)\n}\n\nexport default isBlank\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Boolean 类型\n * ========================================================================\n * @method isBoolean\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Boolean 类型则返回 true，否则返回 false\n */\nconst isBoolean = (val) => {\n  return _type(val) === TYPES.BOOLEAN\n}\n\nexport default isBoolean\n","import isFunction from './isFunction'\n\n/**\n * 检测测试数据是否为 JavaScript 内置函数\n * ========================================================================\n * @method isNativeFunction\n * @param {Function|Object} fn - 要测试的函数\n * @returns {Boolean} - fn 是内置函数返回 true，否则返回 false;\n */\nconst isNativeFunction = (fn) => {\n  return isFunction(fn) && /\\{\\s*\\[native code\\]\\s*\\}/.test('' + fn)\n}\n\nexport default isNativeFunction\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否 undefined（未定义）\n * ========================================================================\n * @method isUndefined\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 undefined（未定义）返回 true，否则返回 false\n */\nconst isUndefined = (val) => {\n  return _type(val) === TYPES.UNDEFINED\n}\n\nexport default isUndefined\n","import isUndefined from './isUndefined'\n\n/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n\n  if (hasOwnProperty) {\n    // 不建议直接实用对象从原型链继承的 hasOwnProperty() 方法\n    // 所以采用直接调用 Object.prototype.hasOwnProperty() 方法\n    return hasOwnProperty.call(obj, prop)\n  }\n\n  return (\n    // 从对象构造函数的原型链继承的同名属性不算 obj 自身的属性\n    !isUndefined(obj[prop]) && obj.constructor.prototype[prop] !== obj[prop]\n  )\n}\n\nexport default hasOwn\n","import isObject from './isObject'\nimport hasOwn from './hasOwn'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为普通对象\n * ========================================================================\n * @method isPlainObject\n * @param {Object} val - 要检测的数据\n * @returns {Boolean} 'val' 是普通对象返回 true，否则返回 false\n */\nconst isPlainObject = (val) => {\n  const toString = Object.prototype.toString\n  let proto\n  let Ctor\n\n  // Detect obvious negatives\n  if (!isObject(val)) {\n    return false\n  }\n\n  proto = val.prototype\n\n  if (!proto) {\n    return true\n  }\n\n  Ctor = hasOwn(proto, 'constructor') && proto.constructor\n\n  return (\n    typeof Ctor === TYPES.FUNCTION &&\n    toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\n  )\n}\n\nexport default isPlainObject\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Number 类型\n * ========================================================================\n * @method isNumber\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Number 类型返回 true，否则返回 false\n */\nconst isNumber = (val) => {\n  return _type(val) === TYPES.NUMBER\n}\n\nexport default isNumber\n","import isNumber from './isNumber'\n\n/**\n * 检测测试数据是否为整数\n * ========================================================================\n * @method isInteger\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是整数返回 true，否则返回 false\n */\nconst isInteger = (val) => {\n  return isNumber(val) && !isNaN(val) && Number(val) === val && val % 1 === 0\n}\n\nexport default isInteger\n","import is from './is'\nimport isArray from './isArray'\nimport isArrayLike from './isArrayLike'\nimport isArrayLikeObject from './isArrayLikeObject'\nimport isArguments from './isArguments'\nimport isArrayBuffer from './isArrayBuffer'\nimport isInt8Array from './isInt8Array'\nimport isUint8Array from './isUint8Array'\nimport isUint8ClampedArray from './isUint8ClampedArray'\nimport isInt16Array from './isInt16Array'\nimport isUint16Array from './isUint16Array'\nimport isInt32Array from './isInt32Array'\nimport isUint32Array from './isUint32Array'\nimport isFloat32Array from './isFloat32Array'\nimport isFloat64Array from './isFloat64Array'\nimport isBigInt64Array from './isBigInt64Array'\nimport isBigUint64Array from './isBigUint64Array'\nimport isBigInt from './isBigInt'\nimport isBase64 from './isBase64'\nimport isBlank from './isBlank'\nimport isBoolean from './isBoolean'\nimport isConstructor from './isConstructor'\nimport isDataView from './isDataView'\nimport isDate from './isDate'\nimport isElement from './isElement'\nimport isEmail from './isEmail'\nimport isEmpty from './isEmpty'\nimport isEmptyArray from './isEmptyArray'\nimport isEmptyObject from './isEmptyObject'\nimport isError from './isError'\nimport isEven from './isEven'\nimport isFloat from './isFloat'\nimport isFragment from './isFragment'\nimport isFunction from './isFunction'\nimport isGuid from './isGuid'\nimport isHash from './isHash'\nimport isHex from './isHex'\nimport isHTMLCollection from './isHTMLCollection'\nimport isInfinite from './isInfinite'\nimport isInteger from './isInteger'\nimport isIPAddress from './isIPAddress'\nimport isJSON from './isJSON'\nimport isLength from './isLength'\nimport isMap from './isMap'\nimport isNativeFunction from './isNativeFunction'\nimport isNull from './isNull'\nimport isNumber from './isNumber'\nimport isNumeric from './isNumeric'\nimport isObject from './isObject'\nimport isObjectLike from './isObjectLike'\nimport isOdd from './isOdd'\nimport isChinese from './isChinese'\nimport isPhoneNumber from './isPhoneNumber'\nimport isPlainObject from './isPlainObject'\nimport isPromise from './isPromise'\nimport isPrototype from './isPrototype'\nimport isRegExp from './isRegExp'\nimport isSet from './isSet'\nimport isString from './isString'\nimport isSymbol from './isSymbol'\nimport isTextNode from './isTextNode'\nimport isTypedArray from './isTypedArray'\nimport isUndefined from './isUndefined'\nimport isURL from './isURL'\nimport isValue from './isValue'\nimport isVNode from './isVNode'\nimport isWeakMap from './isWeakMap'\nimport isWeakSet from './isWeakSet'\nimport isXML from './isXML'\n\nconst Types = {\n  is,\n  isArray,\n  isArrayLike,\n  isArrayLikeObject,\n  isArguments,\n  isArrayBuffer,\n  isInt8Array,\n  isUint8Array,\n  isUint8ClampedArray,\n  isInt16Array,\n  isUint16Array,\n  isInt32Array,\n  isUint32Array,\n  isFloat32Array,\n  isFloat64Array,\n  isBigInt64Array,\n  isBigUint64Array,\n  isBigInt,\n  isBase64,\n  isBlank,\n  isBoolean,\n  isConstructor,\n  isDataView,\n  isDate,\n  isElement,\n  isEmail,\n  isEmpty,\n  isEmptyArray,\n  isEmptyObject,\n  isError,\n  isEven,\n  isFloat,\n  isFragment,\n  isFunction,\n  isGuid,\n  isHash,\n  isHex,\n  isHTMLCollection,\n  isInfinite,\n  isInteger,\n  isIPAddress,\n  isJSON,\n  isLength,\n  isMap,\n  isNativeFunction,\n  isNull,\n  isNumber,\n  isNumeric,\n  isObject,\n  isObjectLike,\n  isOdd,\n  isChinese,\n  isPhoneNumber,\n  isPlainObject,\n  isPromise,\n  isPrototype,\n  isRegExp,\n  isSet,\n  isString,\n  isSymbol,\n  isTextNode,\n  isTypedArray,\n  isUndefined,\n  isURL,\n  isValue,\n  isVNode,\n  isWeakMap,\n  isWeakSet,\n  isXML\n}\n\nexport default Types\n","import _type from './_type'\n\n/**\n * 检测数据类型，返回检测数据类型的字符串\n * ========================================================================\n * @method is\n * @param {*} val - 要检测的任意值\n * @see _type\n * @returns {String}\n */\nconst is = (val) => {\n  return _type(val)\n}\n\nexport default is\n","import isArrayLike from './isArrayLike'\nimport isObjectLike from './isObjectLike'\n\n/**\n * 检测测试数据是否为 ArrayLike 的对象数据\n * ========================================================================\n * @param {Object|Array} val\n * @returns {Boolean}\n */\nconst isArrayLikeObject = (val) => {\n  return isObjectLike(val) && isArrayLike(val)\n}\n\nexport default isArrayLikeObject\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 arguments 对象\n * ========================================================================\n * @method isArguments\n * @param {*} val\n * @return {Boolean}\n */\nfunction isArguments(val) {\n  return _type(val) === TYPES.ARGUMENTS\n}\n\nexport default isArguments\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 ArrayBuffer 类型\n * ========================================================================\n * @method isArrayBuffer\n * @param {*} val\n * @return {Boolean}\n */\nfunction isArrayBuffer(val) {\n  return _type(val) === TYPES.ARRAY_BUFFER\n}\n\nexport default isArrayBuffer\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Uint8Array 的数组\n * ========================================================================\n * methods isUint8Array\n * @param {*} val\n * @returns {Boolean}\n */\nconst isUint8Array = (val) => {\n  return _type(val) === TYPES.UNIT8_ARRAY\n}\n\nexport default isUint8Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Uint8ClampedArray 的数组\n * ========================================================================\n * methods isUint8ClampedArray\n * @param {*} val\n * @returns {Boolean}\n */\nconst isUint8ClampedArray = (val) => {\n  return _type(val) === TYPES.UNIT8_CLAMPED_ARRAY\n}\n\nexport default isUint8ClampedArray\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Int16Array 的数组\n * ========================================================================\n * methods isInt16Array\n * @param {*} val\n * @returns {Boolean}\n */\nconst isInt16Array = (val) => {\n  return _type(val) === TYPES.INT16_ARRAY\n}\n\nexport default isInt16Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Uint16Array 的数组\n * ========================================================================\n * methods isUint16Array\n * @param {*} val\n * @returns {Boolean}\n */\nconst isUint16Array = (val) => {\n  return _type(val) === TYPES.UNIT16_ARRAY\n}\n\nexport default isUint16Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Int32Array 的数组\n * ========================================================================\n * methods isInt32Array\n * @param {*} val\n * @returns {Boolean}\n */\nconst isInt32Array = (val) => {\n  return _type(val) === TYPES.INT32_ARRAY\n}\n\nexport default isInt32Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Uint32Array 的数组\n * ========================================================================\n * methods isUint32Array\n * @param {*} val\n * @returns {Boolean}\n */\nconst isUint32Array = (val) => {\n  return _type(val) === TYPES.UNIT32_ARRAY\n}\n\nexport default isUint32Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Float32Array 的数组\n * ========================================================================\n * methods isFloat32Array\n * @param {*} val\n * @returns {Boolean}\n */\nconst isFloat32Array = (val) => {\n  return _type(val) === TYPES.FLOAT32_ARRAY\n}\n\nexport default isFloat32Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Float64Array 的数组\n * ========================================================================\n * methods isFloat64Array\n * @param {*} val\n * @returns {Boolean}\n */\nconst isFloat64Array = (val) => {\n  return _type(val) === TYPES.FLOAT64_ARRAY\n}\n\nexport default isFloat64Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 BigInt64Array 类型。\n * ========================================================================\n * @method isBigInt64Array\n * @since 0.6.0\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 BigInt64Array 类型，返回 true，否则返回 false\n */\nconst isBigInt64Array = (val) => {\n  return _type(val) === TYPES.BIG_INT64_ARRAY\n}\n\nexport default isBigInt64Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 BigUint64Array 类型。\n * ========================================================================\n * @method isBigUint64Array\n * @since 0.6.0\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 BigUint64Array 类型，返回 true，否则返回 false\n */\nconst isBigUint64Array = (val) => {\n  return _type(val) === TYPES.BIG_UINT64_ARRAY\n}\n\nexport default isBigUint64Array\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 BigInt 类型。\n * ========================================================================\n * @method isBigInt\n * @since 0.6.0\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 BigInt 类型，返回 true，否则返回 false\n */\nconst isBigInt = (val) => {\n  return _type(val) === TYPES.BIG_INT\n}\n\nexport default isBigInt\n","import isString from './isString'\n\n/**\n * 检测测试数据是否为一个基于 base64 编码的字符串。\n * ========================================================================\n * @method isBase64\n * @param {String} val - 要检测的数据\n * @return {Boolean} 'val' 是 base64 编码的字符串返回 true，否则返回 false\n */\nconst isBase64 = (val) => {\n  const REGEXP_BASE64 =\n    /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}={2})$/gm\n  return isString(val) && (!val.length || REGEXP_BASE64.test(val))\n}\n\nexport default isBase64\n","import isFunction from './isFunction'\nimport isNativeFunction from './isNativeFunction'\n\n/**\n * 检测测试函数是否为构造函数\n * ========================================================================\n * @method isConstructor\n * @param {Function|Object} fn - 要测试的（构造）函数\n * @returns {Boolean} - fn 是构造函数返回 true，否则返回 false;\n */\nconst isConstructor = (fn) => {\n  const proto = fn.prototype\n  let instance\n\n  if (!isFunction(fn)) {\n    return false\n  }\n\n  try {\n    if (isNativeFunction(fn) && proto?.then) {\n      instance = new fn((resolve, reject) => {})\n    } else {\n      instance = new fn()\n    }\n  } catch (err) {\n    /* istanbul ignore else */\n    if (err.message.indexOf('is not a constructor')) {\n      return false\n    }\n  }\n\n  return (\n    (instance.constructor === fn && instance instanceof fn) ||\n    (instance.constructor === Object && instance instanceof Object)\n  )\n}\n\nexport default isConstructor\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 DataView 类型\n * ========================================================================\n * @method isDataView\n * @param {*} val\n * @return {Boolean}\n */\nconst isDataView = (val) => {\n  return _type(val) === TYPES.DATA_VIEW\n}\n\nexport default isDataView\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 Date 类型\n * ========================================================================\n * @method isDate\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 Date 类型返回 true，否则返回 false\n */\nconst isDate = (val) => {\n  return (\n    _type(val) === TYPES.DATE &&\n    val.toString() !== 'Invalid Date' &&\n    !isNaN(val)\n  )\n}\n\nexport default isDate\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 HTML 元素节点。\n * ========================================================================\n * @method isElement\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 HTML 元素节点返回 true，否则返回 false\n */\nconst isElement = (val) => {\n  return _type(val) === TYPES.ELEMENT\n}\n\nexport default isElement\n","import isString from './isString'\n\n/**\n * 检测是否为正确的 Email 邮箱地址格式\n * ========================================================================\n * @method isEmail\n * @param {String} val\n * @returns {Boolean}\n */\nconst isEmail = (val) => {\n  const pattern =\n    /^([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)$/\n  return isString(val) && pattern.test(val)\n}\n\nexport default isEmail\n","import isString from './isString'\n\n/**\n * 检测测试数据是否为空字符串\n * ========================================================================\n * @method isEmpty\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 是空字符串返回 true，否则返回 false\n */\nconst isEmpty = (val) => {\n  return isString(val) && val === ''\n}\n\nexport default isEmpty\n","import isArray from './isArray'\n\n/**\n * 检测测试数据是否为空字数组\n * ========================================================================\n * @method isEmptyArray\n * @since 0.5.0\n * @param {Array} val\n * @returns {Boolean}\n */\nconst isEmptyArray = (val) => {\n  return isArray(val) && val.length === 0\n}\n\nexport default isEmptyArray\n","import isPlainObject from './isPlainObject'\nimport hasOwn from './hasOwn'\n\n/**\n * 检测测试数据是否为空（单体）对象\n * ========================================================================\n * @method isEmptyObject\n * @param {Object} obj - 要检测的数据\n * @returns {Boolean} 'val' 是空对象返回 true，否则返回 false\n */\nconst isEmptyObject = (obj) => {\n  let prop\n\n  if (!isPlainObject(obj)) {\n    return false\n  }\n\n  for (prop in obj) {\n    /* istanbul ignore else */\n    if (hasOwn(obj, prop)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport default isEmptyObject\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Error 类型\n * ========================================================================\n * @method isError\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Error 类型返回 true，否则返回 false\n */\nconst isError = (val) => {\n  return _type(val) === TYPES.ERROR\n}\n\nexport default isError\n","import isInteger from './isInteger'\n\n/**\n * 检测测试数据的数据类型是否为偶数\n * ========================================================================\n * @method isEven\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是偶数返回 true，否则返回 false\n */\nconst isEven = (val) => {\n  return isInteger(val) && val % 2 === 0\n}\n\nexport default isEven\n","import isNumber from './isNumber'\nimport isInteger from './isInteger'\n\n/**\n * 检测测试数据是否为整数\n * ========================================================================\n * @method isFloat\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是整数返回 true，否则返回 false\n */\nfunction isFloat(val) {\n  return (\n    isNumber(val) &&\n    !isNaN(val) &&\n    isFinite(val) &&\n    !isInteger(val) &&\n    Number(val) === val &&\n    val % 1 !== 0\n  )\n}\n\nexport default isFloat\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据的数据类型是否为 DocumentFragment 文档碎片。\n * ========================================================================\n * @method isFragment\n * @since 0.6.0\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 DocumentFragment 文档碎片，返回 true，否则返回 false\n */\nconst isFragment = (val) => {\n  return _type(val) === TYPES.FRAGMENT\n}\n\nexport default isFragment\n","import isString from './isString'\n\nconst isGuid = (str) => {\n  const pattern =\n    /^{?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}}?$/gi\n  let guid\n\n  if (!isString(str)) {\n    return false\n  }\n\n  guid = str.replace(/^(?:[{}])$/i, '')\n\n  return pattern.test(guid)\n}\n\nexport default isGuid\n","import isPlainObject from './isPlainObject'\n\n/**\n * 检测测试数据是否为空（单体）对象\n * ========================================================================\n * @method isHash\n * @since 0.4.0\n * @param obj\n * @returns {Boolean}\n */\nconst isHash = (obj) => {\n  return isPlainObject(obj)\n}\n\nexport default isHash\n","import isString from './isString'\n\n/**\n * 检测测试数据是否为 16 进制编码的字符串\n * ========================================================================\n * @method isHex\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 是 16 进制编码的字符串返回 true，否则返回 false\n */\nconst isHex = (val) => {\n  const REGEXP_HEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n  return isString(val) && REGEXP_HEX.test(val)\n}\n\nexport default isHex\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测数据的是否为 HTMLNodeList 对象\n * ========================================================================\n * @method isHTMLCollection\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 HTMLNodeList 对象返回 true，否则返回 false\n */\nconst isHTMLCollection = (val) => {\n  return _type(val) === TYPES.COLLECTION\n}\n\nexport default isHTMLCollection\n","import isNumber from './isNumber'\n\n/**\n * 检测测试数据的数据是正无穷或者负无穷\n * ========================================================================\n * @method isInfinite\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是正无穷或者负无穷返回 true，否则返回 false\n */\nconst isInfinite = (val) => {\n  return isNumber(val) && (val === Infinity || val === -Infinity)\n}\n\nexport default isInfinite\n","import isString from './isString'\n\n/**\n * 验证是否为（v4） IP 地址\n * ========================================================================\n * @method isIPAddress\n * @param {String} str\n * @returns {Boolean}\n */\nconst isIPAddress = (str) => {\n  const ipV6 =\n    /(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]+|::(ffff(:0{1,4})?:)?((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d)|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d))/\n  const ipV4 =\n    /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/\n  return isString(str) && (ipV4.test(str) || ipV6.test(str))\n}\n\nexport default isIPAddress\n","import isString from './isString'\nimport isBlank from './isBlank'\n\n/**\n * 检测测试数据是否为 JSON 格式字符串数据\n * ========================================================================\n * @method isJSON\n * @param {String} val - 要检测的数据\n * @returns {Boolean} 'val' 是 JSON 格式字符串数据返回 true，否则返回 false\n */\nconst isJSON = (val) => {\n  if (!isString(val) || isBlank(val) || !val) {\n    return false\n  }\n\n  val = val.replace(/\\\\(?:([\"\\\\/bfnrt])|(u[0-9a-fA-F]{4}))/g, '@')\n  val = val.replace(\n    /\"[\\w\\s]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?/g,\n    ']'\n  )\n  val = val.replace(/(?:^|:|,)(?:\\s*\\[)+/g, '')\n\n  return /^[\\],:{}\\s]*$/.test(val)\n}\n\nexport default isJSON\n","import isNumber from './isNumber'\n/**\n * 检测测试数据是否为有效 length 值\n * =============================================================\n * @method isLength\n * @param {Number} val\n * @returns {Boolean}\n */\nconst isLength = (val) => {\n  const MAX_SAFE_INTEGER = 9007199254740991\n\n  return isNumber(val) && val > -1 && val % 1 === 0 && val <= MAX_SAFE_INTEGER\n}\n\nexport default isLength\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Map 类型\n * ========================================================================\n * @method isMap\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Map 类型返回 true，否则返回 false\n */\nconst isMap = (val) => {\n  return _type(val) === TYPES.MAP\n}\n\nexport default isMap\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 null\n * ========================================================================\n * @method isNull\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 为 null 返回 true，否则返回 false\n */\nconst isNull = (val) => {\n  return _type(val) === TYPES.NULL\n}\n\nexport default isNull\n","import isNumber from './isNumber'\nimport isString from './isString'\n\n/**\n * 检测测试数据是否是一个数字（只能是 number 类型或者 '123123' 这样的数字字符串）\n * ========================================================================\n * @method isNumeric\n * @param {Number|String} val - 要检测的数据\n * @returns {Boolean} 'val' 是一个数字返回 true，否则返回false\n */\nconst isNumeric = (val) => {\n  return (isNumber(val) || isString(val)) && !isNaN(val - parseFloat(val))\n}\n\nexport default isNumeric\n","import isInteger from './isInteger'\n\n/**\n * 检测测试数据的数据类型是否为奇数\n * ========================================================================\n * @method isOdd\n * @param {Number} val - 要检测的数据\n * @returns {Boolean} 'val' 是奇数返回 true，否则返回 false\n */\nconst isOdd = (val) => {\n  return isInteger(val) && val % 2 !== 0\n}\n\nexport default isOdd\n","import isString from './isString'\n\n/**\n * 检测字符串是否为中文字符\n * ========================================================================\n * Wiki 介绍中文字符包含以下内容：\n *\n * 1. 中文汉字\n * 2. 象形文字扩展 A-H\n * 3. 兼容象形文字符\n * 4. 兼容表意文字增补字符\n * 5. 中文标点符号\n * 6. 兼容标点符号\n *\n * 其中：\n *\n * 兼容象形文字符：[0xf900, 0xfaff],（https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs）和\n * 兼容表意文字增补字符：[0x2f800, 0x2fa1f]（https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs_Supplement）\n *\n * 只是看上去像汉字，因此在 isChinese() 方法中也没有纳入到汉字字符\n * ========================================================================\n * @method isChinese\n * @param {String} str - （必须）检测字符串\n * @param {Boolean} [includePunctuation] - （可选）是否包含标点符号：默认值：true\n * @returns {boolean}\n */\nconst isChinese = (str, includePunctuation = true) => {\n  // 转换成正则表达式\n  const toRegExp = (range) => {\n    const pattern = range\n      .map((range) => {\n        const rangeStart = range[0]\n        const rangeEnd = range[1]\n        const hexStart = rangeStart.toString(16)\n        const hexEnd = rangeEnd.toString(16)\n\n        if (rangeStart === rangeEnd) {\n          return `\\\\u{${hexStart}}`\n        }\n        return `[\\\\u{${hexStart}}-\\\\u{${hexEnd}}]`\n      })\n      .join('|')\n\n    return new RegExp(`^(?:${pattern})+$`, 'u')\n  }\n  // 文字\n  // https://en.wikipedia.org/wiki/CJK_Unified_Ideographs\n  const chineseIdeographs = [\n    // 中文汉字\n    [0x4e00, 0x9fff],\n\n    // 象形文字扩展 A - H\n    [0x3400, 0x4dbf],\n    [0x20000, 0x2a6df],\n    [0x2a700, 0x2b73f],\n    [0x2b740, 0x2b81f],\n    [0x2b820, 0x2ceaf],\n    [0x2ceb0, 0x2ebef],\n    [0x30000, 0x3134f],\n    [0x31350, 0x323af]\n  ]\n  // 标点符号\n  const chinesePunctuations = [\n    // ，\n    [0xff0c, 0xff0c],\n    // 。\n    [0x3002, 0x3002],\n    // ·\n    [0x00b7, 0x00b7],\n    // ×\n    [0x00d7, 0x00d7],\n    // —\n    [0x2014, 0x2014],\n    // ‘\n    [0x2018, 0x2018],\n    // ’\n    [0x2019, 0x2019],\n    // “\n    [0x201c, 0x201c],\n    // ”\n    [0x201d, 0x201d],\n    // …\n    [0x2026, 0x2026],\n    // 、\n    [0x3001, 0x3001],\n    // 《\n    [0x300a, 0x300a],\n    // 》\n    [0x300b, 0x300b],\n    // 『\n    [0x300e, 0x300e],\n    // 』\n    [0x300f, 0x300f],\n    // 【\n    [0x3010, 0x3010],\n    // 】\n    [0x3011, 0x3011],\n    // ！\n    [0xff01, 0xff01],\n    // （\n    [0xff08, 0xff08],\n    // ）\n    [0xff09, 0xff09],\n    // ：\n    [0xff1a, 0xff1a],\n    // ；\n    [0xff1b, 0xff1b],\n    // ？\n    [0xff1f, 0xff1f],\n    // ～\n    [0xff5e, 0xff5e],\n    // 兼容性标点符号\n    // https://en.wikipedia.org/wiki/CJK_Compatibility_Forms\n    [0xfe30, 0xfe4f]\n  ]\n  const asciiChars = /\\w+/\n\n  if (!isString(str)) {\n    return false\n  }\n\n  if (asciiChars.test(str)) {\n    return false\n  }\n\n  const pattern = includePunctuation\n    ? toRegExp(chineseIdeographs.concat(chinesePunctuations))\n    : toRegExp(chineseIdeographs)\n\n  return pattern.test(str)\n}\n\nexport default isChinese\n","import isString from './isString'\n\n/**\n * 检测是否为电话号码\n * ========================================================================\n * @method isPhoneNumber\n * @param {String} str\n * @returns {Boolean}\n *\n * @example\n * // 移动电话号码\n * isPhoneNumber(13901030304) // -> false\n * isPhoneNumber('1390103030a') // => false\n *\n * isPhoneNumber('+86 13901030304')\n * isPhoneNumber('13901030304')\n * isPhoneNumber('139-010-30304')\n * isPhoneNumber('139.010.30304')\n *\n * // 固定电话号码\n * isPhoneNumber('+86 84923296') // -> true\n * isPhoneNumber('027 84923296') // -> true\n * isPhoneNumber('(027) 84923296') // -> true\n * isPhoneNumber('(027)84923296') // -> true\n * isPhoneNumber('027-84923296') // -> true\n * isPhoneNumber('027.84923296') // -> true\n * isPhoneNumber('027 849-23296') // -> true\n * isPhoneNumber('027-849-23296') // -> true\n */\nconst isPhoneNumber = (str) => {\n  const pattern =\n    /^\\+?\\(?(\\d{2,3})?\\)?[-\\s.]?((\\d{3}[-\\s.]?\\d{4,6})|(\\d{11}))$/im\n  return isString(str) && pattern.test(str)\n}\n\nexport default isPhoneNumber\n","import _type from './_type'\nimport isObject from './isObject'\nimport TYPES from './enum/types'\n\n/**\n * 检测数据是否为 Promise 对象\n * ========================================================================\n * @param {Object} val - 测试数据\n * @returns {Boolean}\n */\nconst isPromise = (val) => {\n  return isObject(val) && _type(val) === TYPES.PROMISE\n}\n\nexport default isPromise\n","import isFunction from './isFunction'\n\n/**\n * 判断是否为 prototype 对象\n * ========================================================================\n * @method isPrototype\n * @param {Function|Object} val\n * @returns {Boolean}\n */\nconst isPrototype = (val) => {\n  const OP = Object.prototype\n  const Ctor = val ? val.constructor : null\n  const proto = (isFunction(Ctor) && Ctor.prototype) || OP\n\n  return val === proto\n}\n\nexport default isPrototype\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为正则表达式\n * ========================================================================\n * @method isRegExp\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是正则表达式返回 true，否则返回 false\n */\nconst isRegExp = (val) => {\n  return _type(val) === TYPES.REGEXP\n}\n\nexport default isRegExp\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Set 类型\n * ========================================================================\n * @method isSet\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Set 类型返回 true，否则返回 false\n */\nconst isSet = (val) => {\n  return _type(val) === TYPES.SET\n}\n\nexport default isSet\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 Symbol 类型\n * ========================================================================\n * @method isSymbol\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 Symbol 类型返回 true，否则返回 false\n */\nconst isSymbol = (val) => {\n  return _type(val) === TYPES.SYMBOL\n}\n\nexport default isSymbol\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为文本节点\n * ========================================================================\n * @method isTextNode\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是文本节点返回 true，否则返回 false\n */\nconst isTextNode = (val) => {\n  const type = _type(val)\n  return type === TYPES.TEXT\n}\n\nexport default isTextNode\n","import _type from './_type'\n/**\n * 检测测试数据是否为 TypedArray 类型\n * ========================================================================\n * @param {*} val\n * @returns {Boolean}\n */\nconst isTypedArray = (val) => {\n  const type = _type(val)\n  const isTyped =\n    /^(?:Float(?:32|64)|(Int|Uint)(?:8|16|32)|Uint8Clamped|Big(Int|Uint)64)Array$/i\n  return isTyped.test(type)\n}\n\nexport default isTypedArray\n","import isString from './isString'\n\n/**\n * 判断字符串是否为有效的 URL 地址\n * ========================================================================\n * @method isURL\n * @param {String} str - 要检测的字符串\n * @returns {Boolean}\n */\nconst isURL = (str) => {\n  let pattern = new RegExp(\n    '^(https?:\\\\/\\\\/)?' + // protocol\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n      '(\\\\#[-a-z\\\\d_]*)?$', // hash\n    'i'\n  ) // fragment locator\n\n  return isString(str) && !!pattern.test(str)\n}\n\nexport default isURL\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为有效的数据\n *\n * @method isValue\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是有效的数据返回 true，否则返回 false\n */\nconst isValue = (val) => {\n  const type = _type(val)\n\n  switch (type) {\n    case TYPES.NUMBER:\n      return isFinite(val)\n    case TYPES.NULL:\n    case TYPES.UNDEFINED:\n      return false\n    default:\n      return !!type\n  }\n}\n\nexport default isValue\n","import hasOwn from './hasOwn'\nimport isObject from './isObject'\n\n/**\n * 判断是否未 VNode 对象\n * =============================================================\n * @param {Object} node\n * @returns {Boolean}\n */\nconst isVNode = (node) => {\n  return node !== null && isObject(node) && hasOwn(node, 'componentOptions')\n}\n\nexport default isVNode\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 WeakMap 类型\n * ========================================================================\n * @method isWeakMap\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 WeakMap 类型返回 true，否则返回 false\n */\nconst isWeakMap = (val) => {\n  return _type(val) === TYPES.WEAK_MAP\n}\n\nexport default isWeakMap\n","import _type from './_type'\nimport TYPES from './enum/types'\n\n/**\n * 检测测试数据是否为 WeakSet 类型\n * ========================================================================\n * @method isWeakSet\n * @param {*} val - 要检测的数据\n * @returns {Boolean} 'val' 是 WeakSet 类型返回 true，否则返回 false\n */\nconst isWeakSet = (val) => {\n  return _type(val) === TYPES.WEAK_SET\n}\n\nexport default isWeakSet\n","/**\n * 检测是否为 XML 文档\n * ========================================================================\n * @method isXML\n * @param {*} val\n * @returns {Boolean}\n */\nconst isXML = (val) => {\n  const documentElement = val && (val.ownerDocument || val).documentElement\n  return documentElement ? documentElement.nodeName !== 'HTML' : false\n}\n\nexport default isXML\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","tagName","nodeType","isArray","Array","isArrayLike","isFunction","isObject","isObjectLike","isString","obj","isBlank","test","isNativeFunction","fn","isUndefined","hasOwn","prop","hasOwnProperty","call","constructor","isPlainObject","proto","Ctor","isNumber","isInteger","isNaN","Number","is","isArrayLikeObject","isArguments","isArrayBuffer","isInt8Array","isUint8Array","isUint8ClampedArray","isInt16Array","isUint16Array","isInt32Array","isUint32Array","isFloat32Array","isFloat64Array","isBigInt64Array","isBigUint64Array","isBigInt","isBase64","length","isBoolean","isConstructor","instance","then","resolve","reject","err","message","indexOf","isDataView","isDate","isElement","isEmail","isEmpty","isEmptyArray","isEmptyObject","isError","isEven","isFloat","isFinite","isFragment","isGuid","str","guid","replace","isHash","isHex","isHTMLCollection","isInfinite","Infinity","isIPAddress","isJSON","isLength","isMap","isNull","isNumeric","parseFloat","isOdd","isChinese","includePunctuation","toRegExp","range","pattern","map","rangeStart","rangeEnd","hexStart","hexEnd","join","RegExp","chineseIdeographs","concat","isPhoneNumber","isPromise","isPrototype","OP","isRegExp","isSet","isSymbol","isTextNode","isTypedArray","isURL","isValue","isVNode","node","isWeakMap","isWeakSet","isXML","documentElement","ownerDocument","nodeName"],"mappings":"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"}